
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08012588  08012588  00022588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012988  08012988  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08012988  08012988  00022988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012990  08012990  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012990  08012990  00022990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012998  08012998  00022998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0801299c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005744  20000168  08012b04  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200058ac  08012b04  000358ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d38e  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000867b  00000000  00000000  0008d526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00095ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  000980c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2e4  00000000  00000000  0009a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c139  00000000  00000000  000c66ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5734  00000000  00000000  000f2825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ac  00000000  00000000  001e7fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012570 	.word	0x08012570

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	08012570 	.word	0x08012570

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f005 f932 	bl	8005a32 <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f005 f9b2 	bl	8005b56 <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08012718 	.word	0x08012718

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	080127d8 	.word	0x080127d8

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08012728 	.word	0x08012728

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f001 fbcf 	bl	800207c <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000184 	.word	0x20000184
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f001 fd6d 	bl	80023d4 <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f001 fd61 	bl	80023d4 <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f001 fb9e 	bl	800207c <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000198 	.word	0x20000198
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f00f ffa2 	bl	8010934 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	080127cc 	.word	0x080127cc

08000a00 <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	4608      	mov	r0, r1
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4603      	mov	r3, r0
 8000a10:	70fb      	strb	r3, [r7, #3]
 8000a12:	460b      	mov	r3, r1
 8000a14:	70bb      	strb	r3, [r7, #2]
 8000a16:	4613      	mov	r3, r2
 8000a18:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	78fa      	ldrb	r2, [r7, #3]
 8000a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	78ba      	ldrb	r2, [r7, #2]
 8000a26:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	787a      	ldrb	r2, [r7, #1]
 8000a2e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	141b      	asrs	r3, r3, #16
 8000a54:	b2d9      	uxtb	r1, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	121b      	asrs	r3, r3, #8
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffcd 	bl	8000a00 <_ZN9PS4Parser6setLedEhhh>
        };
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	f00e fd6e 	bl	800f568 <_ZN5BTHIDC1EP3BTDbPKc>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3378      	adds	r3, #120	; 0x78
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffa3 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3378      	adds	r3, #120	; 0x78
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00f ff44 	bl	8010934 <_ZN9PS4Parser5ResetEv>
        };
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08012790 	.word	0x08012790
 8000abc:	080127c0 	.word	0x080127c0

08000ac0 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3378      	adds	r3, #120	; 0x78
 8000aea:	7af9      	ldrb	r1, [r7, #11]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00f fe5b 	bl	80107aa <_ZN9PS4Parser5ParseEhPh>
        };
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3378      	adds	r3, #120	; 0x78
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00f ff13 	bl	8010934 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f855 	bl	8000bbe <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d105      	bne.n	8000b28 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3378      	adds	r3, #120	; 0x78
 8000b20:	21ff      	movs	r1, #255	; 0xff
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff8f 	bl	8000a46 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3378      	adds	r3, #120	; 0x78
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00f fef9 	bl	8010934 <_ZN9PS4Parser5ResetEv>
        };
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b096      	sub	sp, #88	; 0x58
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	224f      	movs	r2, #79	; 0x4f
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f011 fca9 	bl	80124b4 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000b62:	2352      	movs	r3, #82	; 0x52
 8000b64:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b66:	2311      	movs	r3, #17
 8000b68:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b6e:	23ff      	movs	r3, #255	; 0xff
 8000b70:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	785b      	ldrb	r3, [r3, #1]
 8000b76:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	789b      	ldrb	r3, [r3, #2]
 8000b82:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	78db      	ldrb	r3, [r3, #3]
 8000b88:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	791b      	ldrb	r3, [r3, #4]
 8000b8e:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	795b      	ldrb	r3, [r3, #5]
 8000b94:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	799b      	ldrb	r3, [r3, #6]
 8000b9a:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	224f      	movs	r2, #79	; 0x4f
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f81a 	bl	8000be4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bb0:	bf00      	nop
 8000bb2:	3758      	adds	r7, #88	; 0x58
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bb8:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000bbc:	e7c5      	b.n	8000b4a <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000bbe <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000bc6:	2343      	movs	r3, #67	; 0x43
 8000bc8:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000bca:	2302      	movs	r3, #2
 8000bcc:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f804 	bl	8000be4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6898      	ldr	r0, [r3, #8]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	8999      	ldrh	r1, [r3, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	7d9b      	ldrb	r3, [r3, #22]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	7dd2      	ldrb	r2, [r2, #23]
 8000c02:	79fc      	ldrb	r4, [r7, #7]
 8000c04:	9201      	str	r2, [sp, #4]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4623      	mov	r3, r4
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f00d fd48 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f001 f8e6 	bl	8001dec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f8ac 	bl	8000d7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f9d6 	bl	8000fd4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c28:	f000 f9a6 	bl	8000f78 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c2c:	f000 f968 	bl	8000f00 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c30:	f00a fe7c 	bl	800b92c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c34:	f000 f93a 	bl	8000eac <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c38:	4a39      	ldr	r2, [pc, #228]	; (8000d20 <main+0x108>)
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <main+0x10c>)
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	2358      	movs	r3, #88	; 0x58
 8000c42:	461a      	mov	r2, r3
 8000c44:	f011 fc28 	bl	8012498 <memcpy>
  UART_Handle = huart2;
 8000c48:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <main+0x110>)
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <main+0x114>)
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2344      	movs	r3, #68	; 0x44
 8000c52:	461a      	mov	r2, r3
 8000c54:	f011 fc20 	bl	8012498 <memcpy>



  HAL_TIM_Base_Start_IT(&htim14);
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <main+0x118>)
 8000c5a:	f004 fc49 	bl	80054f0 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000c5e:	4935      	ldr	r1, [pc, #212]	; (8000d34 <main+0x11c>)
 8000c60:	4835      	ldr	r0, [pc, #212]	; (8000d38 <main+0x120>)
 8000c62:	f7ff fc9b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c66:	f002 fe6b 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a33      	ldr	r2, [pc, #204]	; (8000d3c <main+0x124>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	0c9b      	lsrs	r3, r3, #18
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <main+0x128>)
 8000c76:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <main+0x128>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	4619      	mov	r1, r3
 8000c80:	482d      	ldr	r0, [pc, #180]	; (8000d38 <main+0x120>)
 8000c82:	f7ff fccb 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c86:	492f      	ldr	r1, [pc, #188]	; (8000d44 <main+0x12c>)
 8000c88:	482b      	ldr	r0, [pc, #172]	; (8000d38 <main+0x120>)
 8000c8a:	f7ff fc95 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000c8e:	492e      	ldr	r1, [pc, #184]	; (8000d48 <main+0x130>)
 8000c90:	4829      	ldr	r0, [pc, #164]	; (8000d38 <main+0x120>)
 8000c92:	f7ff fc91 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <main+0x118>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <main+0x134>)
 8000ca0:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500); //500ms
 8000ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca6:	f001 f8e3 	bl	8001e70 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <main+0x118>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <main+0x134>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <main+0x138>)
 8000cbc:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000cbe:	4925      	ldr	r1, [pc, #148]	; (8000d54 <main+0x13c>)
 8000cc0:	481d      	ldr	r0, [pc, #116]	; (8000d38 <main+0x120>)
 8000cc2:	f7ff fc79 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <main+0x138>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <main+0x140>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <main+0x120>)
 8000cda:	f7ff fc9f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000cde:	491f      	ldr	r1, [pc, #124]	; (8000d5c <main+0x144>)
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <main+0x120>)
 8000ce2:	f7ff fc69 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <main+0x148>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	220a      	movs	r2, #10
 8000cec:	4619      	mov	r1, r3
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <main+0x120>)
 8000cf0:	f7ff fc94 	bl	800061c <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000cf4:	f008 f8c8 	bl	8008e88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <main+0x14c>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <main+0x150>)
 8000cfe:	f008 f90d 	bl	8008f1c <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <main+0x154>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <main+0x158>)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4819      	ldr	r0, [pc, #100]	; (8000d74 <main+0x15c>)
 8000d0e:	f008 f905 	bl	8008f1c <osThreadNew>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <main+0x160>)
 8000d16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d18:	f008 f8da 	bl	8008ed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x104>
 8000d1e:	bf00      	nop
 8000d20:	20000298 	.word	0x20000298
 8000d24:	200001ac 	.word	0x200001ac
 8000d28:	200002f0 	.word	0x200002f0
 8000d2c:	20000204 	.word	0x20000204
 8000d30:	20000248 	.word	0x20000248
 8000d34:	08012598 	.word	0x08012598
 8000d38:	20000334 	.word	0x20000334
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	200005f4 	.word	0x200005f4
 8000d44:	080125b0 	.word	0x080125b0
 8000d48:	080125b4 	.word	0x080125b4
 8000d4c:	200005f8 	.word	0x200005f8
 8000d50:	200005fa 	.word	0x200005fa
 8000d54:	080125bc 	.word	0x080125bc
 8000d58:	cccccccd 	.word	0xcccccccd
 8000d5c:	080125d0 	.word	0x080125d0
 8000d60:	200005fc 	.word	0x200005fc
 8000d64:	08012740 	.word	0x08012740
 8000d68:	08001089 	.word	0x08001089
 8000d6c:	20000290 	.word	0x20000290
 8000d70:	08012764 	.word	0x08012764
 8000d74:	08001711 	.word	0x08001711
 8000d78:	20000294 	.word	0x20000294

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ac      	sub	sp, #176	; 0xb0
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f011 fb92 	bl	80124b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	225c      	movs	r2, #92	; 0x5c
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f011 fb83 	bl	80124b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <SystemClock_Config+0x128>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <SystemClock_Config+0x128>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <SystemClock_Config+0x128>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <SystemClock_Config+0x12c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <SystemClock_Config+0x12c>)
 8000dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <SystemClock_Config+0x12c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e06:	23a8      	movs	r3, #168	; 0xa8
 8000e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 face 	bl	80043c4 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e38:	f000 fc8e 	bl	8001758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2302      	movs	r3, #2
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e4c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e58:	2105      	movs	r1, #5
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fc8a 	bl	8003774 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e70:	f000 fc72 	bl	8001758 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fdc2 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf14      	ite	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	2300      	moveq	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e98:	f000 fc5e 	bl	8001758 <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	37b0      	adds	r7, #176	; 0xb0
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_ZL13MX_TIM14_Initv+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000eb8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ebc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ec6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000eda:	f004 fab9 	bl	8005450 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000eee:	f000 fc33 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000248 	.word	0x20000248
 8000efc:	40002000 	.word	0x40002000

08000f00 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f06:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <_ZL12MX_SPI1_Initv+0x74>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f34:	2218      	movs	r2, #24
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f52:	f003 fcd5 	bl	8004900 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f66:	f000 fbf7 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001ac 	.word	0x200001ac
 8000f74:	40013000 	.word	0x40013000

08000f78 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fb0:	f004 fcf2 	bl	8005998 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000fc4:	f000 fbc8 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000204 	.word	0x20000204
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a22      	ldr	r2, [pc, #136]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <_ZL12MX_GPIO_Initv+0xac>)
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <_ZL12MX_GPIO_Initv+0xb0>)
 8001070:	f001 f804 	bl	800207c <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	10210000 	.word	0x10210000
 8001084:	40020800 	.word	0x40020800

08001088 <_Z10StartGetBTPv>:
//	}
//}

/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001090:	f00a fc4c 	bl	800b92c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 8001094:	48ad      	ldr	r0, [pc, #692]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001096:	f000 fb64 	bl	8001762 <_ZN8MAX3421eI3P102P9E4InitEv>
 800109a:	4603      	mov	r3, r0
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <_Z10StartGetBTPv+0x2e>
  		Serial.print(F("\r\nOSC did not start"));
 80010ac:	49a8      	ldr	r1, [pc, #672]	; (8001350 <_Z10StartGetBTPv+0x2c8>)
 80010ae:	48a9      	ldr	r0, [pc, #676]	; (8001354 <_Z10StartGetBTPv+0x2cc>)
 80010b0:	f7ff fa74 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 80010b4:	e7fe      	b.n	80010b4 <_Z10StartGetBTPv+0x2c>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80010b6:	49a8      	ldr	r1, [pc, #672]	; (8001358 <_Z10StartGetBTPv+0x2d0>)
 80010b8:	48a6      	ldr	r0, [pc, #664]	; (8001354 <_Z10StartGetBTPv+0x2cc>)
 80010ba:	f7ff fa6f 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  gameHID.JoyX = 0;
 80010be:	4ba7      	ldr	r3, [pc, #668]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80010c4:	4ba5      	ldr	r3, [pc, #660]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80010ca:	4ba4      	ldr	r3, [pc, #656]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80010d0:	4ba2      	ldr	r3, [pc, #648]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80010d6:	4ba1      	ldr	r3, [pc, #644]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80010dc:	4b9f      	ldr	r3, [pc, #636]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80010e2:	4a9e      	ldr	r2, [pc, #632]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80010e4:	7993      	ldrb	r3, [r2, #6]
 80010e6:	f36f 0300 	bfc	r3, #0, #1
 80010ea:	7193      	strb	r3, [r2, #6]

  xboxHID.startByte = 0;
 80010ec:	4b9c      	ldr	r3, [pc, #624]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 80010f2:	4b9b      	ldr	r3, [pc, #620]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80010f4:	2214      	movs	r2, #20
 80010f6:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0;
 80010f8:	4b99      	ldr	r3, [pc, #612]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 80010fe:	4b98      	ldr	r3, [pc, #608]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001100:	2200      	movs	r2, #0
 8001102:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001104:	4b96      	ldr	r3, [pc, #600]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001106:	2200      	movs	r2, #0
 8001108:	715a      	strb	r2, [r3, #5]
  xboxHID.Y = 0;
 800110a:	4b95      	ldr	r3, [pc, #596]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 800110c:	2200      	movs	r2, #0
 800110e:	71da      	strb	r2, [r3, #7]
  xboxHID.X = 0;
 8001110:	4b93      	ldr	r3, [pc, #588]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001112:	2200      	movs	r2, #0
 8001114:	719a      	strb	r2, [r3, #6]
  xboxHID.BLACK = 0;
 8001116:	4b92      	ldr	r3, [pc, #584]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001118:	2200      	movs	r2, #0
 800111a:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 800111c:	4b90      	ldr	r3, [pc, #576]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 800111e:	2200      	movs	r2, #0
 8001120:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 8001122:	4b8f      	ldr	r3, [pc, #572]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001124:	2200      	movs	r2, #0
 8001126:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001128:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 800112a:	2200      	movs	r2, #0
 800112c:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 800112e:	4b8c      	ldr	r3, [pc, #560]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001130:	2200      	movs	r2, #0
 8001132:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001134:	4b8a      	ldr	r3, [pc, #552]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001136:	2200      	movs	r2, #0
 8001138:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 800113c:	2200      	movs	r2, #0
 800113e:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001142:	2200      	movs	r2, #0
 8001144:	825a      	strh	r2, [r3, #18]
  {

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
			if(xid_ran > 0) {
 8001146:	4b87      	ldr	r3, [pc, #540]	; (8001364 <_Z10StartGetBTPv+0x2dc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00a      	beq.n	8001164 <_Z10StartGetBTPv+0xdc>
				Serial.print("\r\nHey the xid code ran ");
 800114e:	4986      	ldr	r1, [pc, #536]	; (8001368 <_Z10StartGetBTPv+0x2e0>)
 8001150:	4880      	ldr	r0, [pc, #512]	; (8001354 <_Z10StartGetBTPv+0x2cc>)
 8001152:	f7ff fa31 	bl	80005b8 <_ZN5Print5printEPKc>
				Serial.print(xid_ran);
 8001156:	4b83      	ldr	r3, [pc, #524]	; (8001364 <_Z10StartGetBTPv+0x2dc>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	220a      	movs	r2, #10
 800115c:	4619      	mov	r1, r3
 800115e:	487d      	ldr	r0, [pc, #500]	; (8001354 <_Z10StartGetBTPv+0x2cc>)
 8001160:	f7ff fa4a 	bl	80005f8 <_ZN5Print5printEhi>
			}
			if(usb_failed) {
 8001164:	4b81      	ldr	r3, [pc, #516]	; (800136c <_Z10StartGetBTPv+0x2e4>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <_Z10StartGetBTPv+0xec>
				Serial.print("\r\nUSBd failed");
 800116c:	4980      	ldr	r1, [pc, #512]	; (8001370 <_Z10StartGetBTPv+0x2e8>)
 800116e:	4879      	ldr	r0, [pc, #484]	; (8001354 <_Z10StartGetBTPv+0x2cc>)
 8001170:	f7ff fa22 	bl	80005b8 <_ZN5Print5printEPKc>
			}
			Usb.Task();
 8001174:	4875      	ldr	r0, [pc, #468]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001176:	f010 f91b 	bl	80113b0 <_ZN3USB4TaskEv>
			if (PS4.connected()) {
 800117a:	487e      	ldr	r0, [pc, #504]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 800117c:	f7ff fca0 	bl	8000ac0 <_ZN5PS4BT9connectedEv>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 828d 	beq.w	80016a2 <_Z10StartGetBTPv+0x61a>
				ps4_connected = 1;
 8001188:	4b7b      	ldr	r3, [pc, #492]	; (8001378 <_Z10StartGetBTPv+0x2f0>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
				LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 800118e:	2100      	movs	r1, #0
 8001190:	487a      	ldr	r0, [pc, #488]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 8001192:	f00f fafa 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b79      	ldr	r3, [pc, #484]	; (8001380 <_Z10StartGetBTPv+0x2f8>)
 800119c:	701a      	strb	r2, [r3, #0]
				LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 800119e:	2101      	movs	r1, #1
 80011a0:	4876      	ldr	r0, [pc, #472]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80011a2:	f00f faf2 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <_Z10StartGetBTPv+0x2fc>)
 80011ac:	701a      	strb	r2, [r3, #0]
				RightHatX_val = PS4.getAnalogHat(RightHatX);
 80011ae:	2102      	movs	r1, #2
 80011b0:	4872      	ldr	r0, [pc, #456]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80011b2:	f00f faea 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b73      	ldr	r3, [pc, #460]	; (8001388 <_Z10StartGetBTPv+0x300>)
 80011bc:	701a      	strb	r2, [r3, #0]
				RightHatY_val = PS4.getAnalogHat(RightHatY);
 80011be:	2103      	movs	r1, #3
 80011c0:	486e      	ldr	r0, [pc, #440]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80011c2:	f00f fae2 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b70      	ldr	r3, [pc, #448]	; (800138c <_Z10StartGetBTPv+0x304>)
 80011cc:	701a      	strb	r2, [r3, #0]

				if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 80011ce:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <_Z10StartGetBTPv+0x2f8>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b89      	cmp	r3, #137	; 0x89
 80011d4:	d81b      	bhi.n	800120e <_Z10StartGetBTPv+0x186>
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <_Z10StartGetBTPv+0x2f8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b74      	cmp	r3, #116	; 0x74
 80011dc:	d917      	bls.n	800120e <_Z10StartGetBTPv+0x186>
 80011de:	4b69      	ldr	r3, [pc, #420]	; (8001384 <_Z10StartGetBTPv+0x2fc>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b89      	cmp	r3, #137	; 0x89
 80011e4:	d813      	bhi.n	800120e <_Z10StartGetBTPv+0x186>
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <_Z10StartGetBTPv+0x2fc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b74      	cmp	r3, #116	; 0x74
 80011ec:	d90f      	bls.n	800120e <_Z10StartGetBTPv+0x186>
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <_Z10StartGetBTPv+0x300>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b89      	cmp	r3, #137	; 0x89
 80011f4:	d80b      	bhi.n	800120e <_Z10StartGetBTPv+0x186>
 80011f6:	4b64      	ldr	r3, [pc, #400]	; (8001388 <_Z10StartGetBTPv+0x300>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b74      	cmp	r3, #116	; 0x74
 80011fc:	d907      	bls.n	800120e <_Z10StartGetBTPv+0x186>
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <_Z10StartGetBTPv+0x304>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b89      	cmp	r3, #137	; 0x89
 8001204:	d803      	bhi.n	800120e <_Z10StartGetBTPv+0x186>
 8001206:	4b61      	ldr	r3, [pc, #388]	; (800138c <_Z10StartGetBTPv+0x304>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b74      	cmp	r3, #116	; 0x74
 800120c:	d844      	bhi.n	8001298 <_Z10StartGetBTPv+0x210>
					gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 800120e:	2100      	movs	r1, #0
 8001210:	485a      	ldr	r0, [pc, #360]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 8001212:	f00f faba 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001216:	4603      	mov	r3, r0
 8001218:	3b80      	subs	r3, #128	; 0x80
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	4b4f      	ldr	r3, [pc, #316]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 8001220:	709a      	strb	r2, [r3, #2]
					gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001222:	2101      	movs	r1, #1
 8001224:	4855      	ldr	r0, [pc, #340]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 8001226:	f00f fab0 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800122a:	4603      	mov	r3, r0
 800122c:	3b80      	subs	r3, #128	; 0x80
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 8001234:	70da      	strb	r2, [r3, #3]
					gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8001236:	2102      	movs	r1, #2
 8001238:	4850      	ldr	r0, [pc, #320]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 800123a:	f00f faa6 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800123e:	4603      	mov	r3, r0
 8001240:	3b80      	subs	r3, #128	; 0x80
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b25a      	sxtb	r2, r3
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 8001248:	711a      	strb	r2, [r3, #4]
					gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 800124a:	2103      	movs	r1, #3
 800124c:	484b      	ldr	r0, [pc, #300]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 800124e:	f00f fa9c 	bl	801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001252:	4603      	mov	r3, r0
 8001254:	3b80      	subs	r3, #128	; 0x80
 8001256:	b2db      	uxtb	r3, r3
 8001258:	b25a      	sxtb	r2, r3
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800125c:	715a      	strb	r2, [r3, #5]

					xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 8001260:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 800126a:	819a      	strh	r2, [r3, #12]
					xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800126e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001278:	81da      	strh	r2, [r3, #14]
					xboxHID.rightStickX = gameHID.Joy2X << 8;
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800127c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001286:	821a      	strh	r2, [r3, #16]
					xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800128a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001294:	825a      	strh	r2, [r3, #18]
 8001296:	e017      	b.n	80012c8 <_Z10StartGetBTPv+0x240>

				} else {
					gameHID.JoyX = 0;
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800129a:	2200      	movs	r2, #0
 800129c:	709a      	strb	r2, [r3, #2]
					gameHID.JoyY = 0;
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	70da      	strb	r2, [r3, #3]
					gameHID.Joy2X = 0;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	711a      	strb	r2, [r3, #4]
					gameHID.Joy2Y = 0;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	715a      	strb	r2, [r3, #5]

					xboxHID.leftStickX = 0;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	819a      	strh	r2, [r3, #12]
					xboxHID.leftStickY = 0;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	81da      	strh	r2, [r3, #14]
					xboxHID.rightStickX = 0;
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	821a      	strh	r2, [r3, #16]
					xboxHID.rightStickY = 0;
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	825a      	strh	r2, [r3, #18]
				}

				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 80012c8:	2108      	movs	r1, #8
 80012ca:	482c      	ldr	r0, [pc, #176]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80012cc:	f00f fa44 	bl	8010758 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80012d0:	4603      	mov	r3, r0
 80012d2:	3b80      	subs	r3, #128	; 0x80
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012da:	701a      	strb	r2, [r3, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 80012dc:	2109      	movs	r1, #9
 80012de:	4827      	ldr	r0, [pc, #156]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80012e0:	f00f fa3a 	bl	8010758 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80012e4:	4603      	mov	r3, r0
 80012e6:	3b80      	subs	r3, #128	; 0x80
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012ee:	705a      	strb	r2, [r3, #1]

				xboxHID.L = gameHID.Joy_LT;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012f2:	f993 3000 	ldrsb.w	r3, [r3]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 80012fa:	729a      	strb	r2, [r3, #10]
				xboxHID.R = gameHID.Joy_RT;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 80012fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001306:	72da      	strb	r2, [r3, #11]


				if (PS4.getButtonClick(PS)) {
 8001308:	2110      	movs	r1, #16
 800130a:	481c      	ldr	r0, [pc, #112]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 800130c:	f00f f9e4 	bl	80106d8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <_Z10StartGetBTPv+0x29a>
					gameHID.ps4ButtonsTag.button_ps = 1;
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 8001318:	7993      	ldrb	r3, [r2, #6]
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	7193      	strb	r3, [r2, #6]
 8001320:	e004      	b.n	800132c <_Z10StartGetBTPv+0x2a4>
				} else {
					gameHID.ps4ButtonsTag.button_ps = 0;
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 8001324:	7993      	ldrb	r3, [r2, #6]
 8001326:	f36f 0341 	bfc	r3, #1, #1
 800132a:	7193      	strb	r3, [r2, #6]
				}

				if (PS4.getButtonPress(TRIANGLE)) {
 800132c:	210c      	movs	r1, #12
 800132e:	4813      	ldr	r0, [pc, #76]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 8001330:	f00f f9aa 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d02a      	beq.n	8001390 <_Z10StartGetBTPv+0x308>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800133c:	79d3      	ldrb	r3, [r2, #7]
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	71d3      	strb	r3, [r2, #7]
					xboxHID.Y = 0xFF;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	71da      	strb	r2, [r3, #7]
 800134a:	e029      	b.n	80013a0 <_Z10StartGetBTPv+0x318>
 800134c:	20000348 	.word	0x20000348
 8001350:	080125d4 	.word	0x080125d4
 8001354:	20000334 	.word	0x20000334
 8001358:	080125e8 	.word	0x080125e8
 800135c:	200005e8 	.word	0x200005e8
 8001360:	20000600 	.word	0x20000600
 8001364:	20000615 	.word	0x20000615
 8001368:	08012608 	.word	0x08012608
 800136c:	20000616 	.word	0x20000616
 8001370:	08012620 	.word	0x08012620
 8001374:	2000051c 	.word	0x2000051c
 8001378:	200005e5 	.word	0x200005e5
 800137c:	20000594 	.word	0x20000594
 8001380:	200005f0 	.word	0x200005f0
 8001384:	200005f1 	.word	0x200005f1
 8001388:	200005f2 	.word	0x200005f2
 800138c:	200005f3 	.word	0x200005f3
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8001390:	4aaa      	ldr	r2, [pc, #680]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001392:	79d3      	ldrb	r3, [r2, #7]
 8001394:	f36f 0300 	bfc	r3, #0, #1
 8001398:	71d3      	strb	r3, [r2, #7]
					xboxHID.Y = 0;
 800139a:	4ba9      	ldr	r3, [pc, #676]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800139c:	2200      	movs	r2, #0
 800139e:	71da      	strb	r2, [r3, #7]
				}

				if (PS4.getButtonPress(CIRCLE)) {
 80013a0:	210d      	movs	r1, #13
 80013a2:	48a8      	ldr	r0, [pc, #672]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 80013a4:	f00f f970 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <_Z10StartGetBTPv+0x338>
					gameHID.ps4ButtonsTag.button_circle = 1;
 80013ae:	4aa3      	ldr	r2, [pc, #652]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80013b0:	7993      	ldrb	r3, [r2, #6]
 80013b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b6:	7193      	strb	r3, [r2, #6]
					xboxHID.B = 0xFF;
 80013b8:	4ba1      	ldr	r3, [pc, #644]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	715a      	strb	r2, [r3, #5]
 80013be:	e007      	b.n	80013d0 <_Z10StartGetBTPv+0x348>
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 80013c0:	4a9e      	ldr	r2, [pc, #632]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80013c2:	7993      	ldrb	r3, [r2, #6]
 80013c4:	f36f 13c7 	bfc	r3, #7, #1
 80013c8:	7193      	strb	r3, [r2, #6]
					xboxHID.B = 0;
 80013ca:	4b9d      	ldr	r3, [pc, #628]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	715a      	strb	r2, [r3, #5]
				}

				if (PS4.getButtonPress(CROSS)) {
 80013d0:	210e      	movs	r1, #14
 80013d2:	489c      	ldr	r0, [pc, #624]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 80013d4:	f00f f958 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <_Z10StartGetBTPv+0x368>
					gameHID.ps4ButtonsTag.button_cross = 1;
 80013de:	4a97      	ldr	r2, [pc, #604]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80013e0:	7993      	ldrb	r3, [r2, #6]
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	7193      	strb	r3, [r2, #6]
					xboxHID.A = 0xFF;
 80013e8:	4b95      	ldr	r3, [pc, #596]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	711a      	strb	r2, [r3, #4]
 80013ee:	e007      	b.n	8001400 <_Z10StartGetBTPv+0x378>
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;
 80013f0:	4a92      	ldr	r2, [pc, #584]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80013f2:	7993      	ldrb	r3, [r2, #6]
 80013f4:	f36f 1386 	bfc	r3, #6, #1
 80013f8:	7193      	strb	r3, [r2, #6]
					xboxHID.A = 0;
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	711a      	strb	r2, [r3, #4]
				}

				if (PS4.getButtonPress(SQUARE)) {
 8001400:	210f      	movs	r1, #15
 8001402:	4890      	ldr	r0, [pc, #576]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 8001404:	f00f f940 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <_Z10StartGetBTPv+0x398>
					gameHID.ps4ButtonsTag.button_square = 1;
 800140e:	4a8b      	ldr	r2, [pc, #556]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001410:	79d3      	ldrb	r3, [r2, #7]
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	71d3      	strb	r3, [r2, #7]
					xboxHID.X = 0xFF;
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	719a      	strb	r2, [r3, #6]
 800141e:	e007      	b.n	8001430 <_Z10StartGetBTPv+0x3a8>
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8001420:	4a86      	ldr	r2, [pc, #536]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001422:	79d3      	ldrb	r3, [r2, #7]
 8001424:	f36f 0341 	bfc	r3, #1, #1
 8001428:	71d3      	strb	r3, [r2, #7]
					xboxHID.X = 0;
 800142a:	4b85      	ldr	r3, [pc, #532]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800142c:	2200      	movs	r2, #0
 800142e:	719a      	strb	r2, [r3, #6]
				}

				if (PS4.getButtonPress(UP)) {
 8001430:	2100      	movs	r1, #0
 8001432:	4884      	ldr	r0, [pc, #528]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 8001434:	f00f f928 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00c      	beq.n	8001458 <_Z10StartGetBTPv+0x3d0>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 800143e:	4a7f      	ldr	r2, [pc, #508]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001440:	79d3      	ldrb	r3, [r2, #7]
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DUP;
 8001448:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001454:	709a      	strb	r2, [r3, #2]
 8001456:	e00b      	b.n	8001470 <_Z10StartGetBTPv+0x3e8>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001458:	4a78      	ldr	r2, [pc, #480]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 800145a:	79d3      	ldrb	r3, [r2, #7]
 800145c:	f36f 0382 	bfc	r3, #2, #1
 8001460:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DUP;
 8001462:	4b77      	ldr	r3, [pc, #476]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001464:	789b      	ldrb	r3, [r3, #2]
 8001466:	f083 0301 	eor.w	r3, r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b74      	ldr	r3, [pc, #464]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800146e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(RIGHT)) {
 8001470:	2101      	movs	r1, #1
 8001472:	4874      	ldr	r0, [pc, #464]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 8001474:	f00f f908 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00c      	beq.n	8001498 <_Z10StartGetBTPv+0x410>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 800147e:	4a6f      	ldr	r2, [pc, #444]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001480:	79d3      	ldrb	r3, [r2, #7]
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DRIGHT;
 8001488:	4b6d      	ldr	r3, [pc, #436]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b6b      	ldr	r3, [pc, #428]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001494:	709a      	strb	r2, [r3, #2]
 8001496:	e00b      	b.n	80014b0 <_Z10StartGetBTPv+0x428>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001498:	4a68      	ldr	r2, [pc, #416]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 800149a:	79d3      	ldrb	r3, [r2, #7]
 800149c:	f36f 03c3 	bfc	r3, #3, #1
 80014a0:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DRIGHT;
 80014a2:	4b67      	ldr	r3, [pc, #412]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	f083 0308 	eor.w	r3, r3, #8
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80014ae:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(DOWN)) {
 80014b0:	2102      	movs	r1, #2
 80014b2:	4864      	ldr	r0, [pc, #400]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 80014b4:	f00f f8e8 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <_Z10StartGetBTPv+0x450>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 80014be:	4a5f      	ldr	r2, [pc, #380]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80014c0:	79d3      	ldrb	r3, [r2, #7]
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DDOWN;
 80014c8:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80014d4:	709a      	strb	r2, [r3, #2]
 80014d6:	e00b      	b.n	80014f0 <_Z10StartGetBTPv+0x468>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80014da:	79d3      	ldrb	r3, [r2, #7]
 80014dc:	f36f 1345 	bfc	r3, #5, #1
 80014e0:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DDOWN;
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	f083 0302 	eor.w	r3, r3, #2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b54      	ldr	r3, [pc, #336]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80014ee:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(LEFT)) {
 80014f0:	2103      	movs	r1, #3
 80014f2:	4854      	ldr	r0, [pc, #336]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 80014f4:	f00f f8c8 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <_Z10StartGetBTPv+0x490>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80014fe:	4a4f      	ldr	r2, [pc, #316]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001500:	79d3      	ldrb	r3, [r2, #7]
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DLEFT;
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001514:	709a      	strb	r2, [r3, #2]
 8001516:	e00b      	b.n	8001530 <_Z10StartGetBTPv+0x4a8>

				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001518:	4a48      	ldr	r2, [pc, #288]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 800151a:	79d3      	ldrb	r3, [r2, #7]
 800151c:	f36f 1304 	bfc	r3, #4, #1
 8001520:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DLEFT;
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	f083 0304 	eor.w	r3, r3, #4
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800152e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(L1)) {
 8001530:	210a      	movs	r1, #10
 8001532:	4844      	ldr	r0, [pc, #272]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 8001534:	f00f f8a8 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <_Z10StartGetBTPv+0x4c8>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 800153e:	4a3f      	ldr	r2, [pc, #252]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001540:	7993      	ldrb	r3, [r2, #6]
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	7193      	strb	r3, [r2, #6]
					xboxHID.BLACK = 0xFF;
 8001548:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	721a      	strb	r2, [r3, #8]
 800154e:	e007      	b.n	8001560 <_Z10StartGetBTPv+0x4d8>

				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001550:	4a3a      	ldr	r2, [pc, #232]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001552:	7993      	ldrb	r3, [r2, #6]
 8001554:	f36f 1345 	bfc	r3, #5, #1
 8001558:	7193      	strb	r3, [r2, #6]
					xboxHID.BLACK = 0;
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
				}

				if (PS4.getButtonPress(L3)) {
 8001560:	2106      	movs	r1, #6
 8001562:	4838      	ldr	r0, [pc, #224]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 8001564:	f00f f890 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <_Z10StartGetBTPv+0x500>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800156e:	4a33      	ldr	r2, [pc, #204]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001570:	79d3      	ldrb	r3, [r2, #7]
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_LS_BTN;
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001584:	709a      	strb	r2, [r3, #2]
 8001586:	e00b      	b.n	80015a0 <_Z10StartGetBTPv+0x518>
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001588:	4a2c      	ldr	r2, [pc, #176]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 800158a:	79d3      	ldrb	r3, [r2, #7]
 800158c:	f36f 1386 	bfc	r3, #6, #1
 8001590:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_LS_BTN;
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800159e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(R1)) {
 80015a0:	210b      	movs	r1, #11
 80015a2:	4828      	ldr	r0, [pc, #160]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 80015a4:	f00f f870 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <_Z10StartGetBTPv+0x538>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80015b0:	7993      	ldrb	r3, [r2, #6]
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	7193      	strb	r3, [r2, #6]
					xboxHID.WHITE = 0xFF;
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	725a      	strb	r2, [r3, #9]
 80015be:	e007      	b.n	80015d0 <_Z10StartGetBTPv+0x548>
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80015c2:	7993      	ldrb	r3, [r2, #6]
 80015c4:	f36f 1304 	bfc	r3, #4, #1
 80015c8:	7193      	strb	r3, [r2, #6]
					xboxHID.WHITE = 0;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	725a      	strb	r2, [r3, #9]
				}

				if (PS4.getButtonPress(R3)) {
 80015d0:	2107      	movs	r1, #7
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 80015d4:	f00f f858 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <_Z10StartGetBTPv+0x570>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80015e0:	79d3      	ldrb	r3, [r2, #7]
 80015e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e6:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_RS_BTN;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 80015f4:	709a      	strb	r2, [r3, #2]
 80015f6:	e00c      	b.n	8001612 <_Z10StartGetBTPv+0x58a>
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 80015fa:	79d3      	ldrb	r3, [r2, #7]
 80015fc:	f36f 13c7 	bfc	r3, #7, #1
 8001600:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_RS_BTN;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800160a:	43db      	mvns	r3, r3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001610:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(SHARE)) {
 8001612:	2104      	movs	r1, #4
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <_Z10StartGetBTPv+0x5bc>)
 8001616:	f00f f837 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <_Z10StartGetBTPv+0x5c0>
					gameHID.ps4ButtonsTag.button_share = 1;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <_Z10StartGetBTPv+0x5b4>)
 8001622:	7993      	ldrb	r3, [r2, #6]
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons |= XBOX_BACK_BTN;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <_Z10StartGetBTPv+0x5b8>)
 8001636:	709a      	strb	r2, [r3, #2]
 8001638:	e012      	b.n	8001660 <_Z10StartGetBTPv+0x5d8>
 800163a:	bf00      	nop
 800163c:	200005e8 	.word	0x200005e8
 8001640:	20000600 	.word	0x20000600
 8001644:	20000594 	.word	0x20000594
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 8001648:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <_Z10StartGetBTPv+0x668>)
 800164a:	7993      	ldrb	r3, [r2, #6]
 800164c:	f36f 03c3 	bfc	r3, #3, #1
 8001650:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons ^= XBOX_BACK_BTN;
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <_Z10StartGetBTPv+0x66c>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	f083 0320 	eor.w	r3, r3, #32
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <_Z10StartGetBTPv+0x66c>)
 800165e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 8001660:	2105      	movs	r1, #5
 8001662:	4825      	ldr	r0, [pc, #148]	; (80016f8 <_Z10StartGetBTPv+0x670>)
 8001664:	f00f f810 	bl	8010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <_Z10StartGetBTPv+0x600>
					gameHID.ps4ButtonsTag.button_start = 1;
 800166e:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <_Z10StartGetBTPv+0x668>)
 8001670:	7993      	ldrb	r3, [r2, #6]
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons |= XBOX_START_BTN;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <_Z10StartGetBTPv+0x66c>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <_Z10StartGetBTPv+0x66c>)
 8001684:	709a      	strb	r2, [r3, #2]
 8001686:	e02e      	b.n	80016e6 <_Z10StartGetBTPv+0x65e>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <_Z10StartGetBTPv+0x668>)
 800168a:	7993      	ldrb	r3, [r2, #6]
 800168c:	f36f 0382 	bfc	r3, #2, #1
 8001690:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons ^= XBOX_START_BTN;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <_Z10StartGetBTPv+0x66c>)
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	f083 0310 	eor.w	r3, r3, #16
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_Z10StartGetBTPv+0x66c>)
 800169e:	709a      	strb	r2, [r3, #2]
 80016a0:	e021      	b.n	80016e6 <_Z10StartGetBTPv+0x65e>
				}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <_Z10StartGetBTPv+0x674>)
 80016a8:	f000 fe7c 	bl	80023a4 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d011      	beq.n	80016e0 <_Z10StartGetBTPv+0x658>
			if (!buttonPressed) {
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_Z10StartGetBTPv+0x678>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f083 0301 	eor.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <_Z10StartGetBTPv+0x650>
				Serial.print(F("\r\nButton Pressed"));
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <_Z10StartGetBTPv+0x67c>)
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <_Z10StartGetBTPv+0x680>)
 80016ce:	f7fe ff65 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <_Z10StartGetBTPv+0x684>)
 80016d4:	f7ff f94f 	bl	8000976 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <_Z10StartGetBTPv+0x678>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e002      	b.n	80016e6 <_Z10StartGetBTPv+0x65e>
		} else
			buttonPressed = false;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_Z10StartGetBTPv+0x678>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f007 fcaa 	bl	8009040 <osDelay>
			if(xid_ran > 0) {
 80016ec:	e52b      	b.n	8001146 <_Z10StartGetBTPv+0xbe>
 80016ee:	bf00      	nop
 80016f0:	200005e8 	.word	0x200005e8
 80016f4:	20000600 	.word	0x20000600
 80016f8:	20000594 	.word	0x20000594
 80016fc:	40020800 	.word	0x40020800
 8001700:	200005e4 	.word	0x200005e4
 8001704:	08012630 	.word	0x08012630
 8001708:	20000334 	.word	0x20000334
 800170c:	2000051c 	.word	0x2000051c

08001710 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001718:	2214      	movs	r2, #20
 800171a:	4904      	ldr	r1, [pc, #16]	; (800172c <_Z12StartSendUSBPv+0x1c>)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <_Z12StartSendUSBPv+0x20>)
 800171e:	f006 f991 	bl	8007a44 <USBD_HID_SendReport>
#endif
    osDelay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f007 fc8c 	bl	8009040 <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001728:	e7f6      	b.n	8001718 <_Z12StartSendUSBPv+0x8>
 800172a:	bf00      	nop
 800172c:	20000600 	.word	0x20000600
 8001730:	20004fd0 	.word	0x20004fd0

08001734 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001746:	f000 fb73 	bl	8001e30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40001c00 	.word	0x40001c00

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>

08001762 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800176a:	f7ff f8d7 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 800176e:	f7ff f8bd 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 8001772:	f000 f845 	bl	8001800 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001776:	f7ff f8a3 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800177a:	2218      	movs	r2, #24
 800177c:	2188      	movs	r1, #136	; 0x88
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f846 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f865 	bl	8001854 <_ZN8MAX3421eI3P102P9E5resetEv>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e02b      	b.n	80017f8 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80017a0:	22c1      	movs	r2, #193	; 0xc1
 80017a2:	21d8      	movs	r1, #216	; 0xd8
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f833 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80017aa:	2260      	movs	r2, #96	; 0x60
 80017ac:	21d0      	movs	r1, #208	; 0xd0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f82e 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80017b4:	2204      	movs	r2, #4
 80017b6:	21e8      	movs	r1, #232	; 0xe8
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f829 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80017be:	21e8      	movs	r1, #232	; 0xe8
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f877 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d000      	beq.n	80017dc <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80017da:	e7f0      	b.n	80017be <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f88b 	bl	80018f8 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80017e2:	2220      	movs	r2, #32
 80017e4:	21c8      	movs	r1, #200	; 0xc8
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f812 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80017ec:	2201      	movs	r2, #1
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f80d 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
        }
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
 800181c:	4613      	mov	r3, r2
 800181e:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001820:	f7ff f870 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	b2db      	uxtb	r3, r3
 800182c:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001832:	f107 010c 	add.w	r1, r7, #12
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	2202      	movs	r2, #2
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800183e:	f003 f8e8 	bl	8004a12 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001842:	f7ff f853 	bl	80008ec <_ZN3P103SetEv>
        return;
 8001846:	bf00      	nop
};
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000298 	.word	0x20000298

08001854 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001860:	2220      	movs	r2, #32
 8001862:	2178      	movs	r1, #120	; 0x78
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffd3 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800186a:	2200      	movs	r2, #0
 800186c:	2178      	movs	r1, #120	; 0x78
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffce 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	3301      	adds	r3, #1
 8001878:	81fb      	strh	r3, [r7, #14]
 800187a:	89fb      	ldrh	r3, [r7, #14]
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00f      	beq.n	80018aa <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800188a:	2168      	movs	r1, #104	; 0x68
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f811 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001892:	4603      	mov	r3, r0
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d100      	bne.n	80018a8 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80018a6:	e7e5      	b.n	8001874 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80018a8:	bf00      	nop
        return ( i);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80018c0:	f7ff f820 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80018c4:	1cf9      	adds	r1, r7, #3
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	2201      	movs	r2, #1
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80018ce:	f003 f8a0 	bl	8004a12 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80018d6:	f107 010f 	add.w	r1, r7, #15
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	2201      	movs	r2, #1
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80018e2:	f003 f9d2 	bl	8004c8a <HAL_SPI_Receive>
        SPI_SS::Set();
 80018e6:	f7ff f801 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000298 	.word	0x20000298

080018f8 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001900:	21f8      	movs	r1, #248	; 0xf8
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffd6 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001912:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2bc0      	cmp	r3, #192	; 0xc0
 8001918:	d04a      	beq.n	80019b0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800191a:	2bc0      	cmp	r3, #192	; 0xc0
 800191c:	dc55      	bgt.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800191e:	2b80      	cmp	r3, #128	; 0x80
 8001920:	d006      	beq.n	8001930 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001922:	2b80      	cmp	r3, #128	; 0x80
 8001924:	dc51      	bgt.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d046      	beq.n	80019b8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d020      	beq.n	8001970 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800192e:	e04c      	b.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001930:	21d8      	movs	r1, #216	; 0xd8
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffbe 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800194c:	22c9      	movs	r2, #201	; 0xc9
 800194e:	21d8      	movs	r1, #216	; 0xd8
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff5d 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
                        break;
 800195c:	e035      	b.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800195e:	22cb      	movs	r2, #203	; 0xcb
 8001960:	21d8      	movs	r1, #216	; 0xd8
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff54 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800196a:	2203      	movs	r2, #3
 800196c:	701a      	strb	r2, [r3, #0]
                        break;
 800196e:	e02c      	b.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001970:	21d8      	movs	r1, #216	; 0xd8
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff9e 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800198c:	22cb      	movs	r2, #203	; 0xcb
 800198e:	21d8      	movs	r1, #216	; 0xd8
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff3d 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001998:	2203      	movs	r2, #3
 800199a:	701a      	strb	r2, [r3, #0]
                        break;
 800199c:	e015      	b.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800199e:	22c9      	movs	r2, #201	; 0xc9
 80019a0:	21d8      	movs	r1, #216	; 0xd8
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff34 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
                        break;
 80019ae:	e00c      	b.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
                        break;
 80019b6:	e008      	b.n	80019ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80019b8:	22d1      	movs	r2, #209	; 0xd1
 80019ba:	21d8      	movs	r1, #216	; 0xd8
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff27 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
                        break;
 80019c8:	bf00      	nop
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000614 	.word	0x20000614

080019d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d115      	bne.n	8001a14 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d110      	bne.n	8001a14 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80019f6:	f7fe ff4d 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80019fa:	480a      	ldr	r0, [pc, #40]	; (8001a24 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80019fc:	f00f f838 	bl	8010a70 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001a00:	4908      	ldr	r1, [pc, #32]	; (8001a24 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a04:	f00a fe38 	bl	800c678 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a0e:	4808      	ldr	r0, [pc, #32]	; (8001a30 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001a10:	f7ff f82e 	bl	8000a70 <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000204 	.word	0x20000204
 8001a20:	20000334 	.word	0x20000334
 8001a24:	20000348 	.word	0x20000348
 8001a28:	20000404 	.word	0x20000404
 8001a2c:	08012644 	.word	0x08012644
 8001a30:	2000051c 	.word	0x2000051c

08001a34 <_GLOBAL__sub_I_hspi1>:
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff ffcb 	bl	80019d8 <_Z41__static_initialization_and_destruction_0ii>
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_MspInit+0x54>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_MspInit+0x54>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x54>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_MspInit+0x54>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_MspInit+0x54>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_MspInit+0x54>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	210f      	movs	r1, #15
 8001a86:	f06f 0001 	mvn.w	r0, #1
 8001a8a:	f000 facd 	bl	8002028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_SPI_MspInit+0x84>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12b      	bne.n	8001b16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_SPI_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23e0      	movs	r3, #224	; 0xe0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b06:	2305      	movs	r3, #5
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_SPI_MspInit+0x8c>)
 8001b12:	f000 fab3 	bl	800207c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40013000 	.word	0x40013000
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000

08001b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d115      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_TIM_Base_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_TIM_Base_MspInit+0x4c>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_TIM_Base_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	202d      	movs	r0, #45	; 0x2d
 8001b60:	f000 fa62 	bl	8002028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b64:	202d      	movs	r0, #45	; 0x2d
 8001b66:	f000 fa7b 	bl	8002060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40002000 	.word	0x40002000
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_UART_MspInit+0x84>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12b      	bne.n	8001bf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_UART_MspInit+0x88>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_UART_MspInit+0x88>)
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_UART_MspInit+0x88>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_UART_MspInit+0x88>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_UART_MspInit+0x88>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_UART_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be6:	2307      	movs	r3, #7
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <HAL_UART_MspInit+0x8c>)
 8001bf2:	f000 fa43 	bl	800207c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40004400 	.word	0x40004400
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000

08001c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	202c      	movs	r0, #44	; 0x2c
 8001c22:	f000 fa01 	bl	8002028 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c26:	202c      	movs	r0, #44	; 0x2c
 8001c28:	f000 fa1a 	bl	8002060 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_InitTick+0xa4>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_InitTick+0xa4>)
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_InitTick+0xa4>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c48:	f107 0210 	add.w	r2, r7, #16
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fea8 	bl	80039a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c58:	f001 fe7e 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_InitTick+0xa8>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <HAL_InitTick+0xb0>)
 8001c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c7c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c92:	f003 fbdd 	bl	8005450 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <HAL_InitTick+0xac>)
 8001c9e:	f003 fc27 	bl	80054f0 <HAL_TIM_Base_Start_IT>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3730      	adds	r7, #48	; 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	20004f44 	.word	0x20004f44
 8001cbc:	40001c00 	.word	0x40001c00

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001cf2:	f003 fc6d 	bl	80055d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20004f44 	.word	0x20004f44

08001d00 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d06:	f003 fc63 	bl	80055d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000248 	.word	0x20000248

08001d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <OTG_FS_IRQHandler+0x10>)
 8001d1a:	f000 fccb 	bl	80026b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200054a0 	.word	0x200054a0

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d42:	f010 fb7f 	bl	8012444 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <SystemInit+0x28>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <SystemInit+0x28>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SystemInit+0x28>)
 8001d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d86:	609a      	str	r2, [r3, #8]
#endif
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d9e:	e003      	b.n	8001da8 <LoopCopyDataInit>

08001da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001da6:	3104      	adds	r1, #4

08001da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001db0:	d3f6      	bcc.n	8001da0 <CopyDataInit>
  ldr  r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001db4:	e002      	b.n	8001dbc <LoopFillZerobss>

08001db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001db8:	f842 3b04 	str.w	r3, [r2], #4

08001dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dc0:	d3f9      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc2:	f7ff ffd3 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f010 fb43 	bl	8012450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7fe ff25 	bl	8000c18 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dd4:	0801299c 	.word	0x0801299c
  ldr  r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ddc:	20000168 	.word	0x20000168
  ldr  r2, =_sbss
 8001de0:	20000168 	.word	0x20000168
  ldr  r3, = _ebss
 8001de4:	200058ac 	.word	0x200058ac

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f8fc 	bl	8002012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7ff fef6 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fe10 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20004f8c 	.word	0x20004f8c

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20004f8c 	.word	0x20004f8c

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffde 	bl	8001e58 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <__NVIC_EnableIRQ+0x38>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff4c 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203a:	f7ff ff61 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 800203e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	6978      	ldr	r0, [r7, #20]
 8002046:	f7ff ffb1 	bl	8001fac <NVIC_EncodePriority>
 800204a:	4602      	mov	r2, r0
 800204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff80 	bl	8001f58 <__NVIC_SetPriority>
}
 8002058:	bf00      	nop
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff54 	bl	8001f1c <__NVIC_EnableIRQ>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e165      	b.n	8002364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f040 8154 	bne.w	800235e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d005      	beq.n	80020ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d130      	bne.n	8002130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002104:	2201      	movs	r2, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 0201 	and.w	r2, r3, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b03      	cmp	r3, #3
 800213a:	d017      	beq.n	800216c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d123      	bne.n	80021c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80ae 	beq.w	800235e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b5d      	ldr	r3, [pc, #372]	; (800237c <HAL_GPIO_Init+0x300>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_GPIO_Init+0x300>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <HAL_GPIO_Init+0x300>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_GPIO_Init+0x304>)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x308>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x21a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_GPIO_Init+0x30c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x216>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4d      	ldr	r2, [pc, #308]	; (800238c <HAL_GPIO_Init+0x310>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x212>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x314>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x20e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <HAL_GPIO_Init+0x318>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x20a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <HAL_GPIO_Init+0x31c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x206>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a49      	ldr	r2, [pc, #292]	; (800239c <HAL_GPIO_Init+0x320>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x202>
 800227a:	2306      	movs	r3, #6
 800227c:	e00c      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 800227e:	2307      	movs	r3, #7
 8002280:	e00a      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002282:	2305      	movs	r3, #5
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002286:	2304      	movs	r3, #4
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x304>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b6:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_GPIO_Init+0x324>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <HAL_GPIO_Init+0x324>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x324>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002304:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_GPIO_Init+0x324>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_GPIO_Init+0x324>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f ae96 	bls.w	8002098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40021400 	.word	0x40021400
 800239c:	40021800 	.word	0x40021800
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e001      	b.n	80023c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002408:	b08f      	sub	sp, #60	; 0x3c
 800240a:	af0a      	add	r7, sp, #40	; 0x28
 800240c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e116      	b.n	8002646 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f009 fbc2 	bl	800bbbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2203      	movs	r2, #3
 800243c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 ff47 	bl	80062ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	687e      	ldr	r6, [r7, #4]
 8002464:	466d      	mov	r5, sp
 8002466:	f106 0410 	add.w	r4, r6, #16
 800246a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002476:	e885 0003 	stmia.w	r5, {r0, r1}
 800247a:	1d33      	adds	r3, r6, #4
 800247c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	f003 fe1e 	bl	80060c0 <USB_CoreInit>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0d7      	b.n	8002646 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f003 ff35 	bl	800630c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e04a      	b.n	800253e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	333d      	adds	r3, #61	; 0x3d
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	333c      	adds	r3, #60	; 0x3c
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	b298      	uxth	r0, r3
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3342      	adds	r3, #66	; 0x42
 80024e4:	4602      	mov	r2, r0
 80024e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3344      	adds	r3, #68	; 0x44
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3348      	adds	r3, #72	; 0x48
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3350      	adds	r3, #80	; 0x50
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3af      	bcc.n	80024a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e044      	b.n	80025d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	3301      	adds	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d3b5      	bcc.n	800254e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	687e      	ldr	r6, [r7, #4]
 80025ea:	466d      	mov	r5, sp
 80025ec:	f106 0410 	add.w	r4, r6, #16
 80025f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002600:	1d33      	adds	r3, r6, #4
 8002602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002604:	6838      	ldr	r0, [r7, #0]
 8002606:	f003 feab 	bl	8006360 <USB_DevInit>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e014      	b.n	8002646 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f001 f879 	bl	800372c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fee6 	bl	8007410 <USB_DevDisconnect>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800264e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_PCD_Start+0x1c>
 8002666:	2302      	movs	r3, #2
 8002668:	e020      	b.n	80026ac <HAL_PCD_Start+0x5e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	2b01      	cmp	r3, #1
 8002678:	d109      	bne.n	800268e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fe18 	bl	80062c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f004 fe96 	bl	80073ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b08d      	sub	sp, #52	; 0x34
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 ff54 	bl	8007578 <USB_GetMode>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 83ca 	bne.w	8002e6c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 feb8 	bl	8007452 <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 83c0 	beq.w	8002e6a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 feaf 	bl	8007452 <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 0202 	and.w	r2, r2, #2
 800270c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f004 fe9d 	bl	8007452 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b10      	cmp	r3, #16
 8002720:	d161      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0210 	bic.w	r2, r2, #16
 8002730:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	0c5b      	lsrs	r3, r3, #17
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	2b02      	cmp	r3, #2
 800275c:	d124      	bne.n	80027a8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d035      	beq.n	80027d6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	6a38      	ldr	r0, [r7, #32]
 800277e:	f004 fd03 	bl	8007188 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278e:	441a      	add	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a0:	441a      	add	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	619a      	str	r2, [r3, #24]
 80027a6:	e016      	b.n	80027d6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	0c5b      	lsrs	r3, r3, #17
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	2b06      	cmp	r3, #6
 80027b2:	d110      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ba:	2208      	movs	r2, #8
 80027bc:	4619      	mov	r1, r3
 80027be:	6a38      	ldr	r0, [r7, #32]
 80027c0:	f004 fce2 	bl	8007188 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d0:	441a      	add	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0210 	orr.w	r2, r2, #16
 80027e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 fe31 	bl	8007452 <USB_ReadInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027fa:	d16e      	bne.n	80028da <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fe37 	bl	8007478 <USB_ReadDevAllOutEpInterrupt>
 800280a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800280c:	e062      	b.n	80028d4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d057      	beq.n	80028c8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f004 fe5c 	bl	80074e0 <USB_ReadDevOutEPInterrupt>
 8002828:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002840:	461a      	mov	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fdc5 	bl	80033d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800286a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 febf 	bl	80035f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002888:	461a      	mov	r2, r3
 800288a:	2310      	movs	r3, #16
 800288c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	2320      	movs	r3, #32
 80028a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	461a      	mov	r2, r3
 80028c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d199      	bne.n	800280e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 fdb7 	bl	8007452 <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028ee:	f040 80c0 	bne.w	8002a72 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fdd8 	bl	80074ac <USB_ReadDevAllInEpInterrupt>
 80028fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002902:	e0b2      	b.n	8002a6a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80a7 	beq.w	8002a5e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f004 fdfe 	bl	800751c <USB_ReadDevInEPInterrupt>
 8002920:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d057      	beq.n	80029dc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	2201      	movs	r2, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	69f9      	ldr	r1, [r7, #28]
 8002948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800294c:	4013      	ands	r3, r2
 800294e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295c:	461a      	mov	r2, r3
 800295e:	2301      	movs	r3, #1
 8002960:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d132      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3348      	adds	r3, #72	; 0x48
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4403      	add	r3, r0
 800298a:	3344      	adds	r3, #68	; 0x44
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4419      	add	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4403      	add	r3, r0
 800299e:	3348      	adds	r3, #72	; 0x48
 80029a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d113      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x31c>
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3350      	adds	r3, #80	; 0x50
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029c8:	461a      	mov	r2, r3
 80029ca:	2101      	movs	r1, #1
 80029cc:	f004 fe06 	bl	80075dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f009 f971 	bl	800bcbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f2:	461a      	mov	r2, r3
 80029f4:	2308      	movs	r3, #8
 80029f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2310      	movs	r3, #16
 8002a12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2340      	movs	r3, #64	; 0x40
 8002a2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a46:	461a      	mov	r2, r3
 8002a48:	2302      	movs	r3, #2
 8002a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fc30 	bl	80032be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f af49 	bne.w	8002904 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 fceb 	bl	8007452 <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a86:	d122      	bne.n	8002ace <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f009 fb41 	bl	800c138 <HAL_PCDEx_LPM_Callback>
 8002ab6:	e002      	b.n	8002abe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f009 f977 	bl	800bdac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fcbd 	bl	8007452 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae2:	d112      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d102      	bne.n	8002afa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f009 f933 	bl	800bd60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b08:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 fc9f 	bl	8007452 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1e:	d121      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b2e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d111      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b54:	2101      	movs	r1, #1
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f009 faee 	bl	800c138 <HAL_PCDEx_LPM_Callback>
 8002b5c:	e002      	b.n	8002b64 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f009 f8fe 	bl	800bd60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fc72 	bl	8007452 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b78:	f040 80c7 	bne.w	8002d0a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2110      	movs	r1, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fd40 	bl	800661c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba0:	e056      	b.n	8002c50 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bb4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	0151      	lsls	r1, r2, #5
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	440a      	add	r2, r1
 8002bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bd4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be6:	0151      	lsls	r1, r2, #5
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	440a      	add	r2, r1
 8002bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1a:	0151      	lsls	r1, r2, #5
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3a:	0151      	lsls	r1, r2, #5
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	440a      	add	r2, r1
 8002c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3a3      	bcc.n	8002ba2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c86:	f043 030b 	orr.w	r3, r3, #11
 8002c8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9c:	f043 030b 	orr.w	r3, r3, #11
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	e015      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cca:	f043 030b 	orr.w	r3, r3, #11
 8002cce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ce2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f004 fc71 	bl	80075dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 fb9f 	bl	8007452 <USB_ReadInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	d124      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 fc35 	bl	8007594 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fcd5 	bl	80066de <USB_GetDevSpeed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681c      	ldr	r4, [r3, #0]
 8002d40:	f000 fdfe 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8002d44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f003 fa18 	bl	8006184 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f008 ffda 	bl	800bd0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fb6f 	bl	8007452 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d10a      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f008 ffb7 	bl	800bcf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f002 0208 	and.w	r2, r2, #8
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fb5a 	bl	8007452 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da8:	d10f      	bne.n	8002dca <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f009 f819 	bl	800bdec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fb3f 	bl	8007452 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dde:	d10f      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f008 ffec 	bl	800bdc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f004 fb24 	bl	8007452 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d10a      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f008 fffa 	bl	800be10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 fb0e 	bl	8007452 <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d115      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f008 ffea 	bl	800be2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e000      	b.n	8002e6c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002e6a:	bf00      	nop
    }
  }
}
 8002e6c:	3734      	adds	r7, #52	; 0x34
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd90      	pop	{r4, r7, pc}

08002e72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_PCD_SetAddress+0x1a>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e013      	b.n	8002eb4 <HAL_PCD_SetAddress+0x42>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f004 fa6c 	bl	8007382 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	70fb      	strb	r3, [r7, #3]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	803b      	strh	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da0f      	bge.n	8002f02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3338      	adds	r3, #56	; 0x38
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
 8002f00:	e00f      	b.n	8002f22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f2e:	883a      	ldrh	r2, [r7, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	78ba      	ldrb	r2, [r7, #2]
 8002f38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f4c:	78bb      	ldrb	r3, [r7, #2]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d102      	bne.n	8002f58 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_EP_Open+0xaa>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e00e      	b.n	8002f84 <HAL_PCD_EP_Open+0xc8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fbd7 	bl	8006728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f82:	7afb      	ldrb	r3, [r7, #11]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da0f      	bge.n	8002fc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3338      	adds	r3, #56	; 0x38
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	705a      	strb	r2, [r3, #1]
 8002fbe:	e00f      	b.n	8002fe0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_PCD_EP_Close+0x6e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e00e      	b.n	8003018 <HAL_PCD_EP_Close+0x8c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fc15 	bl	8006838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	b2da      	uxtb	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	f003 fef0 	bl	8006e78 <USB_EP0StartXfer>
 8003098:	e008      	b.n	80030ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6979      	ldr	r1, [r7, #20]
 80030a8:	f003 fca2 	bl	80069f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	460b      	mov	r3, r1
 80030c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3338      	adds	r3, #56	; 0x38
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	f003 fea6 	bl	8006e78 <USB_EP0StartXfer>
 800312c:	e008      	b.n	8003140 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	f003 fc58 	bl	80069f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d901      	bls.n	8003168 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e050      	b.n	800320a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	da0f      	bge.n	8003190 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 020f 	and.w	r2, r3, #15
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	3338      	adds	r3, #56	; 0x38
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	705a      	strb	r2, [r3, #1]
 800318e:	e00d      	b.n	80031ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_EP_SetStall+0x82>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e01e      	b.n	800320a <HAL_PCD_EP_SetStall+0xc0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 fffd 	bl	80071da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	b2d9      	uxtb	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031fa:	461a      	mov	r2, r3
 80031fc:	f004 f9ee 	bl	80075dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d901      	bls.n	8003230 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e042      	b.n	80032b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da0f      	bge.n	8003258 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	3338      	adds	r3, #56	; 0x38
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	705a      	strb	r2, [r3, #1]
 8003256:	e00f      	b.n	8003278 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	3304      	adds	r3, #4
 8003270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_PCD_EP_ClrStall+0x86>
 8003294:	2302      	movs	r3, #2
 8003296:	e00e      	b.n	80032b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68f9      	ldr	r1, [r7, #12]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f805 	bl	80072b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b08a      	sub	sp, #40	; 0x28
 80032c2:	af02      	add	r7, sp, #8
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3338      	adds	r3, #56	; 0x38
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d901      	bls.n	80032f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06c      	b.n	80033d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	429a      	cmp	r2, r3
 800330a:	d902      	bls.n	8003312 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3303      	adds	r3, #3
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331a:	e02b      	b.n	8003374 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	429a      	cmp	r2, r3
 8003330:	d902      	bls.n	8003338 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3303      	adds	r3, #3
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68d9      	ldr	r1, [r3, #12]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003350:	b2db      	uxtb	r3, r3
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	4603      	mov	r3, r0
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f003 fee1 	bl	800711e <USB_WritePacket>

    ep->xfer_buff  += len;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	441a      	add	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	b29b      	uxth	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	429a      	cmp	r2, r3
 8003388:	d809      	bhi.n	800339e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003392:	429a      	cmp	r2, r3
 8003394:	d203      	bcs.n	800339e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1be      	bne.n	800331c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d811      	bhi.n	80033ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	2201      	movs	r2, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ca:	4013      	ands	r3, r2
 80033cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	333c      	adds	r3, #60	; 0x3c
 80033f0:	3304      	adds	r3, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	f040 80a0 	bne.w	8003550 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d015      	beq.n	8003446 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a72      	ldr	r2, [pc, #456]	; (80035e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f240 80dd 	bls.w	80035de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80d7 	beq.w	80035de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003442:	6093      	str	r3, [r2, #8]
 8003444:	e0cb      	b.n	80035de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	461a      	mov	r2, r3
 800345e:	2320      	movs	r3, #32
 8003460:	6093      	str	r3, [r2, #8]
 8003462:	e0bc      	b.n	80035de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 80b7 	bne.w	80035de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d90f      	bls.n	8003498 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003494:	6093      	str	r3, [r2, #8]
 8003496:	e0a2      	b.n	80035de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	0159      	lsls	r1, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	440b      	add	r3, r1
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4403      	add	r3, r0
 80034f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4419      	add	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003510:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d114      	bne.n	8003542 <PCD_EP_OutXfrComplete_int+0x16a>
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800353a:	461a      	mov	r2, r3
 800353c:	2101      	movs	r1, #1
 800353e:	f004 f84d 	bl	80075dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f008 fb9d 	bl	800bc88 <HAL_PCD_DataOutStageCallback>
 800354e:	e046      	b.n	80035de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a26      	ldr	r2, [pc, #152]	; (80035ec <PCD_EP_OutXfrComplete_int+0x214>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d124      	bne.n	80035a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	e032      	b.n	80035de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	2320      	movs	r3, #32
 8003592:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f008 fb74 	bl	800bc88 <HAL_PCD_DataOutStageCallback>
 80035a0:	e01d      	b.n	80035de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d114      	bne.n	80035d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035ca:	461a      	mov	r2, r3
 80035cc:	2100      	movs	r1, #0
 80035ce:	f004 f805 	bl	80075dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f008 fb55 	bl	800bc88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	4f54300a 	.word	0x4f54300a
 80035ec:	4f54310a 	.word	0x4f54310a

080035f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	333c      	adds	r3, #60	; 0x3c
 8003608:	3304      	adds	r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <PCD_EP_OutSetupPacket_int+0x88>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d90e      	bls.n	8003644 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f008 fb0d 	bl	800bc64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <PCD_EP_OutSetupPacket_int+0x88>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d90c      	bls.n	800366c <PCD_EP_OutSetupPacket_int+0x7c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d108      	bne.n	800366c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003664:	461a      	mov	r2, r3
 8003666:	2101      	movs	r1, #1
 8003668:	f003 ffb8 	bl	80075dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	4f54300a 	.word	0x4f54300a

0800367c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
 8003688:	4613      	mov	r3, r2
 800368a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800369a:	883b      	ldrh	r3, [r7, #0]
 800369c:	0419      	lsls	r1, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
 80036a8:	e028      	b.n	80036fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e00d      	b.n	80036da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	3340      	adds	r3, #64	; 0x40
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4413      	add	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	3301      	adds	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	3b01      	subs	r3, #1
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3ec      	bcc.n	80036be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036e4:	883b      	ldrh	r3, [r7, #0]
 80036e6:	0418      	lsls	r0, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4302      	orrs	r2, r0
 80036f4:	3340      	adds	r3, #64	; 0x40
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375e:	f043 0303 	orr.w	r3, r3, #3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cc      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d90c      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b65      	ldr	r3, [pc, #404]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a52      	ldr	r2, [pc, #328]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d044      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d119      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e067      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4934      	ldr	r1, [pc, #208]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fe faf8 	bl	8001e58 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe faf4 	bl	8001e58 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e04f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20c      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 fbb1 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490a      	ldr	r1, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f976 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00
 8003930:	40023800 	.word	0x40023800
 8003934:	080127f0 	.word	0x080127f0
 8003938:	20000000 	.word	0x20000000
 800393c:	20000004 	.word	0x20000004

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCC_GetHCLKFreq+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000000 	.word	0x20000000

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800395c:	f7ff fff0 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0a9b      	lsrs	r3, r3, #10
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK1Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	08012800 	.word	0x08012800

08003980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003984:	f7ff ffdc 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0b5b      	lsrs	r3, r3, #13
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4903      	ldr	r1, [pc, #12]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40023800 	.word	0x40023800
 80039a4:	08012800 	.word	0x08012800

080039a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	220f      	movs	r2, #15
 80039b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0203 	and.w	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_RCC_GetClockConfig+0x60>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 020f 	and.w	r2, r3, #15
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40023c00 	.word	0x40023c00

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	496c      	ldr	r1, [pc, #432]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a62:	2301      	movs	r3, #1
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a72:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	4960      	ldr	r1, [pc, #384]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a90:	2301      	movs	r3, #1
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d017      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa0:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4955      	ldr	r1, [pc, #340]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003acc:	2301      	movs	r3, #1
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d017      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003adc:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	4946      	ldr	r1, [pc, #280]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afa:	d101      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003afc:	2301      	movs	r3, #1
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 808a 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a33      	ldr	r2, [pc, #204]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b42:	f7fe f989 	bl	8001e58 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe f985 	bl	8001e58 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e278      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b70:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02f      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d028      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ba2:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d114      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bae:	f7fe f953 	bl	8001e58 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe f94f 	bl	8001e58 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e240      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be4:	d114      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfa:	4902      	ldr	r1, [pc, #8]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
 8003c00:	e00c      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42470e40 	.word	0x42470e40
 8003c10:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a49      	ldr	r2, [pc, #292]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c1a:	6093      	str	r3, [r2, #8]
 8003c1c:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	4944      	ldr	r1, [pc, #272]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c42:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c50:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	4937      	ldr	r1, [pc, #220]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c72:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c78:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	492e      	ldr	r1, [pc, #184]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d011      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	4926      	ldr	r1, [pc, #152]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	491a      	ldr	r1, [pc, #104]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d011      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	4911      	ldr	r1, [pc, #68]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d06:	2301      	movs	r3, #1
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	f040 80ff 	bne.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d22:	f7fe f899 	bl	8001e58 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d28:	e00e      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d2a:	f7fe f895 	bl	8001e58 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d907      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e188      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	424711e0 	.word	0x424711e0
 8003d44:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d48:	4b7e      	ldr	r3, [pc, #504]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ea      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d028      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d124      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d7c:	4b71      	ldr	r3, [pc, #452]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	3301      	adds	r3, #1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d94:	0e1b      	lsrs	r3, r3, #24
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	4961      	ldr	r1, [pc, #388]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d035      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df0:	d130      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e04:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0a:	0f1b      	lsrs	r3, r3, #28
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	019b      	lsls	r3, r3, #6
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	071b      	lsls	r3, r3, #28
 8003e34:	4943      	ldr	r1, [pc, #268]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e3c:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e42:	f023 021f 	bic.w	r2, r3, #31
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	493d      	ldr	r1, [pc, #244]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d029      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e68:	d124      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e6a:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e82:	0f1b      	lsrs	r3, r3, #28
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	019b      	lsls	r3, r3, #6
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	071b      	lsls	r3, r3, #28
 8003eac:	4925      	ldr	r1, [pc, #148]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d016      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	4917      	ldr	r1, [pc, #92]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd ffb0 	bl	8001e58 <HAL_GetTick>
 8003ef8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003efc:	f7fd ffac 	bl	8001e58 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e09f      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 8095 	bne.w	800404c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fd ff96 	bl	8001e58 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f30:	f7fd ff92 	bl	8001e58 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d908      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e085      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	42470068 	.word	0x42470068
 8003f4c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f5c:	d0e8      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02b      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d127      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	4928      	ldr	r1, [pc, #160]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	4922      	ldr	r1, [pc, #136]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01d      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fea:	d118      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	0e1b      	lsrs	r3, r3, #24
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	019b      	lsls	r3, r3, #6
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	3b01      	subs	r3, #1
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	4910      	ldr	r1, [pc, #64]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004024:	f7fd ff18 	bl	8001e58 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800402c:	f7fd ff14 	bl	8001e58 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e007      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404a:	d1ef      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3730      	adds	r7, #48	; 0x30
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	42470070 	.word	0x42470070

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004064:	b088      	sub	sp, #32
 8004066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800407c:	4bce      	ldr	r3, [pc, #824]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b0c      	cmp	r3, #12
 8004086:	f200 818d 	bhi.w	80043a4 <HAL_RCC_GetSysClockFreq+0x344>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <HAL_RCC_GetSysClockFreq+0x30>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080043a5 	.word	0x080043a5
 8004098:	080043a5 	.word	0x080043a5
 800409c:	080043a5 	.word	0x080043a5
 80040a0:	080040cb 	.word	0x080040cb
 80040a4:	080043a5 	.word	0x080043a5
 80040a8:	080043a5 	.word	0x080043a5
 80040ac:	080043a5 	.word	0x080043a5
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	080043a5 	.word	0x080043a5
 80040b8:	080043a5 	.word	0x080043a5
 80040bc:	080043a5 	.word	0x080043a5
 80040c0:	08004245 	.word	0x08004245
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4bbd      	ldr	r3, [pc, #756]	; (80043bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80040c6:	61bb      	str	r3, [r7, #24]
       break;
 80040c8:	e16f      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ca:	4bbd      	ldr	r3, [pc, #756]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x360>)
 80040cc:	61bb      	str	r3, [r7, #24]
      break;
 80040ce:	e16c      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d0:	4bb9      	ldr	r3, [pc, #740]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040da:	4bb7      	ldr	r3, [pc, #732]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d053      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4bb4      	ldr	r3, [pc, #720]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	461a      	mov	r2, r3
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	ea02 0400 	and.w	r4, r2, r0
 80040fe:	603c      	str	r4, [r7, #0]
 8004100:	400b      	ands	r3, r1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004108:	4620      	mov	r0, r4
 800410a:	4629      	mov	r1, r5
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	014b      	lsls	r3, r1, #5
 8004116:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800411a:	0142      	lsls	r2, r0, #5
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	4623      	mov	r3, r4
 8004122:	1ac0      	subs	r0, r0, r3
 8004124:	462b      	mov	r3, r5
 8004126:	eb61 0103 	sbc.w	r1, r1, r3
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	018b      	lsls	r3, r1, #6
 8004134:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004138:	0182      	lsls	r2, r0, #6
 800413a:	1a12      	subs	r2, r2, r0
 800413c:	eb63 0301 	sbc.w	r3, r3, r1
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	00d9      	lsls	r1, r3, #3
 800414a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800414e:	00d0      	lsls	r0, r2, #3
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4621      	mov	r1, r4
 8004156:	1852      	adds	r2, r2, r1
 8004158:	4629      	mov	r1, r5
 800415a:	eb43 0101 	adc.w	r1, r3, r1
 800415e:	460b      	mov	r3, r1
 8004160:	f04f 0000 	mov.w	r0, #0
 8004164:	f04f 0100 	mov.w	r1, #0
 8004168:	0259      	lsls	r1, r3, #9
 800416a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800416e:	0250      	lsls	r0, r2, #9
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	461a      	mov	r2, r3
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	f7fc f84e 	bl	8000220 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e04c      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b8a      	ldr	r3, [pc, #552]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	461a      	mov	r2, r3
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	ea02 0a00 	and.w	sl, r2, r0
 80041a6:	ea03 0b01 	and.w	fp, r3, r1
 80041aa:	4650      	mov	r0, sl
 80041ac:	4659      	mov	r1, fp
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	014b      	lsls	r3, r1, #5
 80041b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041bc:	0142      	lsls	r2, r0, #5
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	ebb0 000a 	subs.w	r0, r0, sl
 80041c6:	eb61 010b 	sbc.w	r1, r1, fp
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	018b      	lsls	r3, r1, #6
 80041d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041d8:	0182      	lsls	r2, r0, #6
 80041da:	1a12      	subs	r2, r2, r0
 80041dc:	eb63 0301 	sbc.w	r3, r3, r1
 80041e0:	f04f 0000 	mov.w	r0, #0
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	00d9      	lsls	r1, r3, #3
 80041ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ee:	00d0      	lsls	r0, r2, #3
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	eb12 020a 	adds.w	r2, r2, sl
 80041f8:	eb43 030b 	adc.w	r3, r3, fp
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	0299      	lsls	r1, r3, #10
 8004206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800420a:	0290      	lsls	r0, r2, #10
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	461a      	mov	r2, r3
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f7fc f800 	bl	8000220 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004228:	4b63      	ldr	r3, [pc, #396]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	3301      	adds	r3, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	61bb      	str	r3, [r7, #24]
      break;
 8004242:	e0b2      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004244:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424e:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04d      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	461a      	mov	r2, r3
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	ea02 0800 	and.w	r8, r2, r0
 8004272:	ea03 0901 	and.w	r9, r3, r1
 8004276:	4640      	mov	r0, r8
 8004278:	4649      	mov	r1, r9
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	014b      	lsls	r3, r1, #5
 8004284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004288:	0142      	lsls	r2, r0, #5
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	ebb0 0008 	subs.w	r0, r0, r8
 8004292:	eb61 0109 	sbc.w	r1, r1, r9
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042a4:	0182      	lsls	r2, r0, #6
 80042a6:	1a12      	subs	r2, r2, r0
 80042a8:	eb63 0301 	sbc.w	r3, r3, r1
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	00d9      	lsls	r1, r3, #3
 80042b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ba:	00d0      	lsls	r0, r2, #3
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	eb12 0208 	adds.w	r2, r2, r8
 80042c4:	eb43 0309 	adc.w	r3, r3, r9
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	0259      	lsls	r1, r3, #9
 80042d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042d6:	0250      	lsls	r0, r2, #9
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f7fb ff9a 	bl	8000220 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e04a      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	461a      	mov	r2, r3
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	ea02 0400 	and.w	r4, r2, r0
 800430e:	ea03 0501 	and.w	r5, r3, r1
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	014b      	lsls	r3, r1, #5
 8004320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004324:	0142      	lsls	r2, r0, #5
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	1b00      	subs	r0, r0, r4
 800432c:	eb61 0105 	sbc.w	r1, r1, r5
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	018b      	lsls	r3, r1, #6
 800433a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800433e:	0182      	lsls	r2, r0, #6
 8004340:	1a12      	subs	r2, r2, r0
 8004342:	eb63 0301 	sbc.w	r3, r3, r1
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	00d9      	lsls	r1, r3, #3
 8004350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004354:	00d0      	lsls	r0, r2, #3
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	1912      	adds	r2, r2, r4
 800435c:	eb45 0303 	adc.w	r3, r5, r3
 8004360:	f04f 0000 	mov.w	r0, #0
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	0299      	lsls	r1, r3, #10
 800436a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800436e:	0290      	lsls	r0, r2, #10
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f7fb ff4e 	bl	8000220 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0f1b      	lsrs	r3, r3, #28
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	61bb      	str	r3, [r7, #24]
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80043a6:	61bb      	str	r3, [r7, #24]
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	69bb      	ldr	r3, [r7, #24]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e28d      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8083 	beq.w	80044ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043e4:	4b94      	ldr	r3, [pc, #592]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d019      	beq.n	8004424 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043f0:	4b91      	ldr	r3, [pc, #580]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043fc:	4b8e      	ldr	r3, [pc, #568]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004408:	d00c      	beq.n	8004424 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440a:	4b8b      	ldr	r3, [pc, #556]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004422:	d10b      	bne.n	800443c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	4b84      	ldr	r3, [pc, #528]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05b      	beq.n	80044e8 <HAL_RCC_OscConfig+0x124>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d157      	bne.n	80044e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e25a      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d106      	bne.n	8004454 <HAL_RCC_OscConfig+0x90>
 8004446:	4b7c      	ldr	r3, [pc, #496]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7b      	ldr	r2, [pc, #492]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xcc>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0xb4>
 800445e:	4b76      	ldr	r3, [pc, #472]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a75      	ldr	r2, [pc, #468]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b73      	ldr	r3, [pc, #460]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a72      	ldr	r2, [pc, #456]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xcc>
 8004478:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6e      	ldr	r2, [pc, #440]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b6c      	ldr	r3, [pc, #432]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6b      	ldr	r2, [pc, #428]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd fcde 	bl	8001e58 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fcda 	bl	8001e58 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e21f      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xdc>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fd fcca 	bl	8001e58 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fd fcc6 	bl	8001e58 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e20b      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x104>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d06f      	beq.n	80045d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044f6:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d017      	beq.n	8004532 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004502:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800450a:	2b08      	cmp	r3, #8
 800450c:	d105      	bne.n	800451a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450e:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d11c      	bne.n	8004560 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004526:	4b44      	ldr	r3, [pc, #272]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d116      	bne.n	8004560 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_RCC_OscConfig+0x186>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d001      	beq.n	800454a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e1d3      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4937      	ldr	r1, [pc, #220]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	e03a      	b.n	80045d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004568:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_RCC_OscConfig+0x278>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fd fc73 	bl	8001e58 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004576:	f7fd fc6f 	bl	8001e58 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e1b4      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004594:	4b28      	ldr	r3, [pc, #160]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4925      	ldr	r1, [pc, #148]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
 80045a8:	e015      	b.n	80045d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_OscConfig+0x278>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fc52 	bl	8001e58 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b8:	f7fd fc4e 	bl	8001e58 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e193      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d036      	beq.n	8004650 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d016      	beq.n	8004618 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_RCC_OscConfig+0x27c>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fd fc32 	bl	8001e58 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f8:	f7fd fc2e 	bl	8001e58 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e173      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 800460c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x234>
 8004616:	e01b      	b.n	8004650 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_RCC_OscConfig+0x27c>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461e:	f7fd fc1b 	bl	8001e58 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004624:	e00e      	b.n	8004644 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004626:	f7fd fc17 	bl	8001e58 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d907      	bls.n	8004644 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e15c      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
 8004638:	40023800 	.word	0x40023800
 800463c:	42470000 	.word	0x42470000
 8004640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	4b8a      	ldr	r3, [pc, #552]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ea      	bne.n	8004626 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8097 	beq.w	800478c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b83      	ldr	r3, [pc, #524]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	4b7f      	ldr	r3, [pc, #508]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a7e      	ldr	r2, [pc, #504]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b7c      	ldr	r3, [pc, #496]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469a:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a75      	ldr	r2, [pc, #468]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7fd fbd7 	bl	8001e58 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fd fbd3 	bl	8001e58 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e118      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x31e>
 80046d4:	4b66      	ldr	r3, [pc, #408]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4a65      	ldr	r2, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6713      	str	r3, [r2, #112]	; 0x70
 80046e0:	e01c      	b.n	800471c <HAL_RCC_OscConfig+0x358>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x340>
 80046ea:	4b61      	ldr	r3, [pc, #388]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a60      	ldr	r2, [pc, #384]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a5d      	ldr	r2, [pc, #372]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0x358>
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a59      	ldr	r2, [pc, #356]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	4b57      	ldr	r3, [pc, #348]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a56      	ldr	r2, [pc, #344]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004716:	f023 0304 	bic.w	r3, r3, #4
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd fb98 	bl	8001e58 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd fb94 	bl	8001e58 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0d7      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ee      	beq.n	800472c <HAL_RCC_OscConfig+0x368>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fb82 	bl	8001e58 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	e00a      	b.n	800476e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f7fd fb7e 	bl	8001e58 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0c1      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	4b40      	ldr	r3, [pc, #256]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ee      	bne.n	8004758 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80ad 	beq.w	80048f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004796:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d060      	beq.n	8004864 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d145      	bne.n	8004836 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_RCC_OscConfig+0x4b4>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd fb52 	bl	8001e58 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fd fb4e 	bl	8001e58 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e093      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	019b      	lsls	r3, r3, #6
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	3b01      	subs	r3, #1
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	491b      	ldr	r1, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <HAL_RCC_OscConfig+0x4b4>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd fb23 	bl	8001e58 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd fb1f 	bl	8001e58 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e064      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x452>
 8004834:	e05c      	b.n	80048f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCC_OscConfig+0x4b4>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fd fb0c 	bl	8001e58 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004844:	f7fd fb08 	bl	8001e58 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e04d      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x480>
 8004862:	e045      	b.n	80048f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e040      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
 8004870:	40023800 	.word	0x40023800
 8004874:	40007000 	.word	0x40007000
 8004878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCC_OscConfig+0x538>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d030      	beq.n	80048ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d129      	bne.n	80048ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d122      	bne.n	80048ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d119      	bne.n	80048ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	3b01      	subs	r3, #1
 80048c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d10f      	bne.n	80048ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07b      	b.n	8004a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d108      	bne.n	800492c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004922:	d009      	beq.n	8004938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	61da      	str	r2, [r3, #28]
 800492a:	e005      	b.n	8004938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fd f8a2 	bl	8001a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	ea42 0103 	orr.w	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0104 	and.w	r1, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0210 	and.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b088      	sub	sp, #32
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_SPI_Transmit+0x22>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e126      	b.n	8004c82 <HAL_SPI_Transmit+0x270>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a3c:	f7fd fa0c 	bl	8001e58 <HAL_GetTick>
 8004a40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a56:	e10b      	b.n	8004c70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Transmit+0x52>
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a68:	e102      	b.n	8004c70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	88fa      	ldrh	r2, [r7, #6]
 8004a82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d007      	beq.n	8004af0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af8:	d14b      	bne.n	8004b92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_Transmit+0xf6>
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d13e      	bne.n	8004b86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b2c:	e02b      	b.n	8004b86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d112      	bne.n	8004b62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b60:	e011      	b.n	8004b86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b62:	f7fd f979 	bl	8001e58 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d803      	bhi.n	8004b7a <HAL_SPI_Transmit+0x168>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d102      	bne.n	8004b80 <HAL_SPI_Transmit+0x16e>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b84:	e074      	b.n	8004c70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ce      	bne.n	8004b2e <HAL_SPI_Transmit+0x11c>
 8004b90:	e04c      	b.n	8004c2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_SPI_Transmit+0x18e>
 8004b9a:	8afb      	ldrh	r3, [r7, #22]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d140      	bne.n	8004c22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bc6:	e02c      	b.n	8004c22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d113      	bne.n	8004bfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bfc:	e011      	b.n	8004c22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfe:	f7fd f92b 	bl	8001e58 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d803      	bhi.n	8004c16 <HAL_SPI_Transmit+0x204>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d102      	bne.n	8004c1c <HAL_SPI_Transmit+0x20a>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c20:	e026      	b.n	8004c70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1cd      	bne.n	8004bc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fbcb 	bl	80053cc <SPI_EndRxTxTransaction>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e000      	b.n	8004c70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b088      	sub	sp, #32
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca6:	d112      	bne.n	8004cce <HAL_SPI_Receive+0x44>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10e      	bne.n	8004cce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cb8:	88fa      	ldrh	r2, [r7, #6]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f8f1 	bl	8004eac <HAL_SPI_TransmitReceive>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	e0ea      	b.n	8004ea4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_SPI_Receive+0x52>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e0e3      	b.n	8004ea4 <HAL_SPI_Receive+0x21a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce4:	f7fd f8b8 	bl	8001e58 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cfa:	e0ca      	b.n	8004e92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_Receive+0x7e>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d0c:	e0c1      	b.n	8004e92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2204      	movs	r2, #4
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	d10f      	bne.n	8004d76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d007      	beq.n	8004d94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d162      	bne.n	8004e62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d9c:	e02e      	b.n	8004dfc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d115      	bne.n	8004dd8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f103 020c 	add.w	r2, r3, #12
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd6:	e011      	b.n	8004dfc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd8:	f7fd f83e 	bl	8001e58 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d803      	bhi.n	8004df0 <HAL_SPI_Receive+0x166>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_Receive+0x16c>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dfa:	e04a      	b.n	8004e92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1cb      	bne.n	8004d9e <HAL_SPI_Receive+0x114>
 8004e06:	e031      	b.n	8004e6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d113      	bne.n	8004e3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	b292      	uxth	r2, r2
 8004e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3c:	e011      	b.n	8004e62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3e:	f7fd f80b 	bl	8001e58 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d803      	bhi.n	8004e56 <HAL_SPI_Receive+0x1cc>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_Receive+0x1d2>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e60:	e017      	b.n	8004e92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1cd      	bne.n	8004e08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fa45 	bl	8005300 <SPI_EndRxTransaction>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
 8004e8e:	e000      	b.n	8004e92 <HAL_SPI_Receive+0x208>
  }

error :
 8004e90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x26>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e18a      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x33c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eda:	f7fc ffbd 	bl	8001e58 <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d00f      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x70>
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f02:	d107      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x68>
 8004f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d003      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f1a:	e15b      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x82>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x82>
 8004f28:	887b      	ldrh	r3, [r7, #2]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f34:	e14e      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2205      	movs	r2, #5
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	887a      	ldrh	r2, [r7, #2]
 8004f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d007      	beq.n	8004f9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa6:	d178      	bne.n	800509a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x10a>
 8004fb0:	8b7b      	ldrh	r3, [r7, #26]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d166      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	1c9a      	adds	r2, r3, #2
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	e053      	b.n	8005084 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d11b      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x176>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d016      	beq.n	8005022 <HAL_SPI_TransmitReceive+0x176>
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d113      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	881a      	ldrh	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	1c9a      	adds	r2, r3, #2
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d119      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x1b8>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	b292      	uxth	r2, r2
 8005046:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	1c9a      	adds	r2, r3, #2
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005060:	2301      	movs	r3, #1
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005064:	f7fc fef8 	bl	8001e58 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005070:	429a      	cmp	r2, r3
 8005072:	d807      	bhi.n	8005084 <HAL_SPI_TransmitReceive+0x1d8>
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d003      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005082:	e0a7      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1a6      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x130>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1a1      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x130>
 8005098:	e07c      	b.n	8005194 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x1fc>
 80050a2:	8b7b      	ldrh	r3, [r7, #26]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d16b      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	7812      	ldrb	r2, [r2, #0]
 80050b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ce:	e057      	b.n	8005180 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d11c      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x26c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d017      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x26c>
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d114      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d119      	bne.n	800515a <HAL_SPI_TransmitReceive+0x2ae>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d014      	beq.n	800515a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005156:	2301      	movs	r3, #1
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800515a:	f7fc fe7d 	bl	8001e58 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005166:	429a      	cmp	r2, r3
 8005168:	d803      	bhi.n	8005172 <HAL_SPI_TransmitReceive+0x2c6>
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d102      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x2cc>
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d103      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800517e:	e029      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1a2      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x224>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d19d      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f917 	bl	80053cc <SPI_EndRxTxTransaction>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051b0:	e010      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	e000      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	; 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005200:	f7fc fe2a 	bl	8001e58 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	4413      	add	r3, r2
 800520e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005210:	f7fc fe22 	bl	8001e58 <HAL_GetTick>
 8005214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005216:	4b39      	ldr	r3, [pc, #228]	; (80052fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	015b      	lsls	r3, r3, #5
 800521c:	0d1b      	lsrs	r3, r3, #20
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005226:	e054      	b.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d050      	beq.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005230:	f7fc fe12 	bl	8001e58 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	429a      	cmp	r2, r3
 800523e:	d902      	bls.n	8005246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d13d      	bne.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800525e:	d111      	bne.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005268:	d004      	beq.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005272:	d107      	bne.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528c:	d10f      	bne.n	80052ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e017      	b.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d19b      	bne.n	8005228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000000 	.word	0x20000000

08005300 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005314:	d111      	bne.n	800533a <SPI_EndRxTransaction+0x3a>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531e:	d004      	beq.n	800532a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005328:	d107      	bne.n	800533a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005338:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005342:	d12a      	bne.n	800539a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d012      	beq.n	8005374 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2200      	movs	r2, #0
 8005356:	2180      	movs	r1, #128	; 0x80
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff49 	bl	80051f0 <SPI_WaitFlagStateUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02d      	beq.n	80053c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e026      	b.n	80053c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2200      	movs	r2, #0
 800537c:	2101      	movs	r1, #1
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff ff36 	bl	80051f0 <SPI_WaitFlagStateUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01a      	beq.n	80053c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e013      	b.n	80053c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2101      	movs	r1, #1
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff ff23 	bl	80051f0 <SPI_WaitFlagStateUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e000      	b.n	80053c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <SPI_EndRxTxTransaction+0x7c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <SPI_EndRxTxTransaction+0x80>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	0d5b      	lsrs	r3, r3, #21
 80053e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d112      	bne.n	800541e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fef4 	bl	80051f0 <SPI_WaitFlagStateUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d016      	beq.n	800543c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00f      	b.n	800543e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3b01      	subs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d0f2      	beq.n	800541e <SPI_EndRxTxTransaction+0x52>
 8005438:	e000      	b.n	800543c <SPI_EndRxTxTransaction+0x70>
        break;
 800543a:	bf00      	nop
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000
 800544c:	165e9f81 	.word	0x165e9f81

08005450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e041      	b.n	80054e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc fb58 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 f9ce 	bl	8005830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e04e      	b.n	80055a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d022      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005532:	d01d      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1f      	ldr	r2, [pc, #124]	; (80055b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a19      	ldr	r2, [pc, #100]	; (80055c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <HAL_TIM_Base_Start_IT+0xdc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d010      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	e007      	b.n	80055a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40001800 	.word	0x40001800

080055d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0202 	mvn.w	r2, #2
 80055fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8ee 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8e0 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8f1 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0204 	mvn.w	r2, #4
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8c4 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8b6 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f8c7 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b08      	cmp	r3, #8
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b08      	cmp	r3, #8
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0208 	mvn.w	r2, #8
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f89a 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f88c 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f89d 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0210 	mvn.w	r2, #16
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2208      	movs	r2, #8
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f870 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f862 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f873 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0201 	mvn.w	r2, #1
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb fff0 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d10e      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d107      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f902 	bl	8005984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f838 	bl	800581c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0220 	mvn.w	r2, #32
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8cc 	bl	8005970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d00f      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <TIM_Base_SetConfig+0x120>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3a      	ldr	r2, [pc, #232]	; (8005954 <TIM_Base_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d027      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2c      	ldr	r2, [pc, #176]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d023      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2b      	ldr	r2, [pc, #172]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2a      	ldr	r2, [pc, #168]	; (8005950 <TIM_Base_SetConfig+0x120>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <TIM_Base_SetConfig+0x124>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <TIM_Base_SetConfig+0x128>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <TIM_Base_SetConfig+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a26      	ldr	r2, [pc, #152]	; (8005960 <TIM_Base_SetConfig+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <TIM_Base_SetConfig+0x134>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <TIM_Base_SetConfig+0x138>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <TIM_Base_SetConfig+0x13c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0xf8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <TIM_Base_SetConfig+0x124>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d103      	bne.n	8005930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	615a      	str	r2, [r3, #20]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800
 8005964:	40001800 	.word	0x40001800
 8005968:	40001c00 	.word	0x40001c00
 800596c:	40002000 	.word	0x40002000

08005970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e03f      	b.n	8005a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc f8dc 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f9a7 	bl	8005d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b08a      	sub	sp, #40	; 0x28
 8005a36:	af02      	add	r7, sp, #8
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d17c      	bne.n	8005b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_UART_Transmit+0x2c>
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e075      	b.n	8005b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_UART_Transmit+0x3e>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e06e      	b.n	8005b4e <HAL_UART_Transmit+0x11c>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2221      	movs	r2, #33	; 0x21
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a86:	f7fc f9e7 	bl	8001e58 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa0:	d108      	bne.n	8005ab4 <HAL_UART_Transmit+0x82>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e003      	b.n	8005abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ac4:	e02a      	b.n	8005b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f8e2 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e036      	b.n	8005b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	3302      	adds	r3, #2
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e007      	b.n	8005b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	781a      	ldrb	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1cf      	bne.n	8005ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2140      	movs	r1, #64	; 0x40
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f8b2 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e006      	b.n	8005b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b08a      	sub	sp, #40	; 0x28
 8005b5a:	af02      	add	r7, sp, #8
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	f040 808c 	bne.w	8005c90 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_UART_Receive+0x2e>
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e084      	b.n	8005c92 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Receive+0x40>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e07d      	b.n	8005c92 <HAL_UART_Receive+0x13c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2222      	movs	r2, #34	; 0x22
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb2:	f7fc f951 	bl	8001e58 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d108      	bne.n	8005be0 <HAL_UART_Receive+0x8a>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e003      	b.n	8005be8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005bf0:	e043      	b.n	8005c7a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f84c 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e042      	b.n	8005c92 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	3302      	adds	r3, #2
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e01f      	b.n	8005c6c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c34:	d007      	beq.n	8005c46 <HAL_UART_Receive+0xf0>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_UART_Receive+0xfe>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e008      	b.n	8005c66 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1b6      	bne.n	8005bf2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005caa:	e02c      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d028      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0x30>
 8005cba:	f7fc f8cd 	bl	8001e58 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d21d      	bcs.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e00f      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d0c3      	beq.n	8005cac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	b09f      	sub	sp, #124	; 0x7c
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	68d9      	ldr	r1, [r3, #12]
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	ea40 0301 	orr.w	r3, r0, r1
 8005d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d74:	f021 010c 	bic.w	r1, r1, #12
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	6999      	ldr	r1, [r3, #24]
 8005d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	ea40 0301 	orr.w	r3, r0, r1
 8005d98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4bc5      	ldr	r3, [pc, #788]	; (80060b4 <UART_SetConfig+0x384>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d004      	beq.n	8005dae <UART_SetConfig+0x7e>
 8005da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4bc3      	ldr	r3, [pc, #780]	; (80060b8 <UART_SetConfig+0x388>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d103      	bne.n	8005db6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dae:	f7fd fde7 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 8005db2:	6778      	str	r0, [r7, #116]	; 0x74
 8005db4:	e002      	b.n	8005dbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7fd fdcf 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8005dba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc4:	f040 80b6 	bne.w	8005f34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dca:	461c      	mov	r4, r3
 8005dcc:	f04f 0500 	mov.w	r5, #0
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	1891      	adds	r1, r2, r2
 8005dd6:	6439      	str	r1, [r7, #64]	; 0x40
 8005dd8:	415b      	adcs	r3, r3
 8005dda:	647b      	str	r3, [r7, #68]	; 0x44
 8005ddc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005de0:	1912      	adds	r2, r2, r4
 8005de2:	eb45 0303 	adc.w	r3, r5, r3
 8005de6:	f04f 0000 	mov.w	r0, #0
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	00d9      	lsls	r1, r3, #3
 8005df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005df4:	00d0      	lsls	r0, r2, #3
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	1911      	adds	r1, r2, r4
 8005dfc:	6639      	str	r1, [r7, #96]	; 0x60
 8005dfe:	416b      	adcs	r3, r5
 8005e00:	667b      	str	r3, [r7, #100]	; 0x64
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e10:	415b      	adcs	r3, r3
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e1c:	f7fa fa00 	bl	8000220 <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4ba5      	ldr	r3, [pc, #660]	; (80060bc <UART_SetConfig+0x38c>)
 8005e26:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	011e      	lsls	r6, r3, #4
 8005e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e30:	461c      	mov	r4, r3
 8005e32:	f04f 0500 	mov.w	r5, #0
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	1891      	adds	r1, r2, r2
 8005e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e3e:	415b      	adcs	r3, r3
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
 8005e42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e46:	1912      	adds	r2, r2, r4
 8005e48:	eb45 0303 	adc.w	r3, r5, r3
 8005e4c:	f04f 0000 	mov.w	r0, #0
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	00d9      	lsls	r1, r3, #3
 8005e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e5a:	00d0      	lsls	r0, r2, #3
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	1911      	adds	r1, r2, r4
 8005e62:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e64:	416b      	adcs	r3, r5
 8005e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e76:	415b      	adcs	r3, r3
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e82:	f7fa f9cd 	bl	8000220 <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b8c      	ldr	r3, [pc, #560]	; (80060bc <UART_SetConfig+0x38c>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a87      	ldr	r2, [pc, #540]	; (80060bc <UART_SetConfig+0x38c>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eac:	441e      	add	r6, r3
 8005eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	1894      	adds	r4, r2, r2
 8005ebc:	623c      	str	r4, [r7, #32]
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ec6:	1812      	adds	r2, r2, r0
 8005ec8:	eb41 0303 	adc.w	r3, r1, r3
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	f04f 0500 	mov.w	r5, #0
 8005ed4:	00dd      	lsls	r5, r3, #3
 8005ed6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eda:	00d4      	lsls	r4, r2, #3
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	1814      	adds	r4, r2, r0
 8005ee2:	653c      	str	r4, [r7, #80]	; 0x50
 8005ee4:	414b      	adcs	r3, r1
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	1891      	adds	r1, r2, r2
 8005ef4:	61b9      	str	r1, [r7, #24]
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005efe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f02:	f7fa f98d 	bl	8000220 <__aeabi_uldivmod>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4b6c      	ldr	r3, [pc, #432]	; (80060bc <UART_SetConfig+0x38c>)
 8005f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	2164      	movs	r1, #100	; 0x64
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	3332      	adds	r3, #50	; 0x32
 8005f1e:	4a67      	ldr	r2, [pc, #412]	; (80060bc <UART_SetConfig+0x38c>)
 8005f20:	fba2 2303 	umull	r2, r3, r2, r3
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f003 0207 	and.w	r2, r3, #7
 8005f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4432      	add	r2, r6
 8005f30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f32:	e0b9      	b.n	80060a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f36:	461c      	mov	r4, r3
 8005f38:	f04f 0500 	mov.w	r5, #0
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	462b      	mov	r3, r5
 8005f40:	1891      	adds	r1, r2, r2
 8005f42:	6139      	str	r1, [r7, #16]
 8005f44:	415b      	adcs	r3, r3
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f4c:	1912      	adds	r2, r2, r4
 8005f4e:	eb45 0303 	adc.w	r3, r5, r3
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	00d9      	lsls	r1, r3, #3
 8005f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f60:	00d0      	lsls	r0, r2, #3
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	eb12 0804 	adds.w	r8, r2, r4
 8005f6a:	eb43 0905 	adc.w	r9, r3, r5
 8005f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f04f 0100 	mov.w	r1, #0
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	008b      	lsls	r3, r1, #2
 8005f82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f86:	0082      	lsls	r2, r0, #2
 8005f88:	4640      	mov	r0, r8
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	f7fa f948 	bl	8000220 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b49      	ldr	r3, [pc, #292]	; (80060bc <UART_SetConfig+0x38c>)
 8005f96:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	011e      	lsls	r6, r3, #4
 8005f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f04f 0100 	mov.w	r1, #0
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	1894      	adds	r4, r2, r2
 8005fac:	60bc      	str	r4, [r7, #8]
 8005fae:	415b      	adcs	r3, r3
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb6:	1812      	adds	r2, r2, r0
 8005fb8:	eb41 0303 	adc.w	r3, r1, r3
 8005fbc:	f04f 0400 	mov.w	r4, #0
 8005fc0:	f04f 0500 	mov.w	r5, #0
 8005fc4:	00dd      	lsls	r5, r3, #3
 8005fc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fca:	00d4      	lsls	r4, r2, #3
 8005fcc:	4622      	mov	r2, r4
 8005fce:	462b      	mov	r3, r5
 8005fd0:	1814      	adds	r4, r2, r0
 8005fd2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f04f 0100 	mov.w	r1, #0
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	008b      	lsls	r3, r1, #2
 8005fec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ff0:	0082      	lsls	r2, r0, #2
 8005ff2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ff6:	f7fa f913 	bl	8000220 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <UART_SetConfig+0x38c>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	3332      	adds	r3, #50	; 0x32
 8006012:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <UART_SetConfig+0x38c>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601e:	441e      	add	r6, r3
 8006020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006022:	4618      	mov	r0, r3
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	1894      	adds	r4, r2, r2
 800602e:	603c      	str	r4, [r7, #0]
 8006030:	415b      	adcs	r3, r3
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006038:	1812      	adds	r2, r2, r0
 800603a:	eb41 0303 	adc.w	r3, r1, r3
 800603e:	f04f 0400 	mov.w	r4, #0
 8006042:	f04f 0500 	mov.w	r5, #0
 8006046:	00dd      	lsls	r5, r3, #3
 8006048:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800604c:	00d4      	lsls	r4, r2, #3
 800604e:	4622      	mov	r2, r4
 8006050:	462b      	mov	r3, r5
 8006052:	eb12 0a00 	adds.w	sl, r2, r0
 8006056:	eb43 0b01 	adc.w	fp, r3, r1
 800605a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4618      	mov	r0, r3
 8006060:	f04f 0100 	mov.w	r1, #0
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	008b      	lsls	r3, r1, #2
 800606e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006072:	0082      	lsls	r2, r0, #2
 8006074:	4650      	mov	r0, sl
 8006076:	4659      	mov	r1, fp
 8006078:	f7fa f8d2 	bl	8000220 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <UART_SetConfig+0x38c>)
 8006082:	fba3 1302 	umull	r1, r3, r3, r2
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	2164      	movs	r1, #100	; 0x64
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	3332      	adds	r3, #50	; 0x32
 8006094:	4a09      	ldr	r2, [pc, #36]	; (80060bc <UART_SetConfig+0x38c>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	f003 020f 	and.w	r2, r3, #15
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4432      	add	r2, r6
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	377c      	adds	r7, #124	; 0x7c
 80060ac:	46bd      	mov	sp, r7
 80060ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b2:	bf00      	nop
 80060b4:	40011000 	.word	0x40011000
 80060b8:	40011400 	.word	0x40011400
 80060bc:	51eb851f 	.word	0x51eb851f

080060c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060c0:	b084      	sub	sp, #16
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	f107 001c 	add.w	r0, r7, #28
 80060ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d122      	bne.n	800611e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d105      	bne.n	8006112 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fac0 	bl	8007698 <USB_CoreReset>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e01a      	b.n	8006154 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fab4 	bl	8007698 <USB_CoreReset>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
 8006146:	e005      	b.n	8006154 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10b      	bne.n	8006172 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f043 0206 	orr.w	r2, r3, #6
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f043 0220 	orr.w	r2, r3, #32
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800617e:	b004      	add	sp, #16
 8006180:	4770      	bx	lr
	...

08006184 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d165      	bne.n	8006264 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4a41      	ldr	r2, [pc, #260]	; (80062a0 <USB_SetTurnaroundTime+0x11c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d906      	bls.n	80061ae <USB_SetTurnaroundTime+0x2a>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4a40      	ldr	r2, [pc, #256]	; (80062a4 <USB_SetTurnaroundTime+0x120>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d202      	bcs.n	80061ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061a8:	230f      	movs	r3, #15
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e062      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4a3c      	ldr	r2, [pc, #240]	; (80062a4 <USB_SetTurnaroundTime+0x120>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d306      	bcc.n	80061c4 <USB_SetTurnaroundTime+0x40>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4a3b      	ldr	r2, [pc, #236]	; (80062a8 <USB_SetTurnaroundTime+0x124>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d202      	bcs.n	80061c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061be:	230e      	movs	r3, #14
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e057      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4a38      	ldr	r2, [pc, #224]	; (80062a8 <USB_SetTurnaroundTime+0x124>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d306      	bcc.n	80061da <USB_SetTurnaroundTime+0x56>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4a37      	ldr	r2, [pc, #220]	; (80062ac <USB_SetTurnaroundTime+0x128>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d202      	bcs.n	80061da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061d4:	230d      	movs	r3, #13
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e04c      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4a33      	ldr	r2, [pc, #204]	; (80062ac <USB_SetTurnaroundTime+0x128>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d306      	bcc.n	80061f0 <USB_SetTurnaroundTime+0x6c>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4a32      	ldr	r2, [pc, #200]	; (80062b0 <USB_SetTurnaroundTime+0x12c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061ea:	230c      	movs	r3, #12
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e041      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4a2f      	ldr	r2, [pc, #188]	; (80062b0 <USB_SetTurnaroundTime+0x12c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d906      	bls.n	8006206 <USB_SetTurnaroundTime+0x82>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4a2e      	ldr	r2, [pc, #184]	; (80062b4 <USB_SetTurnaroundTime+0x130>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d802      	bhi.n	8006206 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006200:	230b      	movs	r3, #11
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e036      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <USB_SetTurnaroundTime+0x130>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d906      	bls.n	800621c <USB_SetTurnaroundTime+0x98>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <USB_SetTurnaroundTime+0x134>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d802      	bhi.n	800621c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006216:	230a      	movs	r3, #10
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e02b      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <USB_SetTurnaroundTime+0x134>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d906      	bls.n	8006232 <USB_SetTurnaroundTime+0xae>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4a25      	ldr	r2, [pc, #148]	; (80062bc <USB_SetTurnaroundTime+0x138>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d202      	bcs.n	8006232 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800622c:	2309      	movs	r3, #9
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e020      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a21      	ldr	r2, [pc, #132]	; (80062bc <USB_SetTurnaroundTime+0x138>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d306      	bcc.n	8006248 <USB_SetTurnaroundTime+0xc4>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <USB_SetTurnaroundTime+0x13c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d802      	bhi.n	8006248 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006242:	2308      	movs	r3, #8
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e015      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <USB_SetTurnaroundTime+0x13c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d906      	bls.n	800625e <USB_SetTurnaroundTime+0xda>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <USB_SetTurnaroundTime+0x140>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d202      	bcs.n	800625e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006258:	2307      	movs	r3, #7
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e00a      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800625e:	2306      	movs	r3, #6
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e007      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800626a:	2309      	movs	r3, #9
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e001      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006270:	2309      	movs	r3, #9
 8006272:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	00d8acbf 	.word	0x00d8acbf
 80062a4:	00e4e1c0 	.word	0x00e4e1c0
 80062a8:	00f42400 	.word	0x00f42400
 80062ac:	01067380 	.word	0x01067380
 80062b0:	011a499f 	.word	0x011a499f
 80062b4:	01312cff 	.word	0x01312cff
 80062b8:	014ca43f 	.word	0x014ca43f
 80062bc:	016e3600 	.word	0x016e3600
 80062c0:	01a6ab1f 	.word	0x01a6ab1f
 80062c4:	01e84800 	.word	0x01e84800

080062c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d106      	bne.n	8006338 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60da      	str	r2, [r3, #12]
 8006336:	e00b      	b.n	8006350 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	e001      	b.n	8006350 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e003      	b.n	8006358 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006350:	2032      	movs	r0, #50	; 0x32
 8006352:	f7fb fd8d 	bl	8001e70 <HAL_Delay>

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006360:	b084      	sub	sp, #16
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800636e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	e009      	b.n	8006394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3340      	adds	r3, #64	; 0x40
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	2200      	movs	r2, #0
 800638c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b0e      	cmp	r3, #14
 8006398:	d9f2      	bls.n	8006380 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11c      	bne.n	80063da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ae:	f043 0302 	orr.w	r3, r3, #2
 80063b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e005      	b.n	80063e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f8:	4619      	mov	r1, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006400:	461a      	mov	r2, r3
 8006402:	680b      	ldr	r3, [r1, #0]
 8006404:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10c      	bne.n	8006426 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f949 	bl	80066ac <USB_SetDevSpeed>
 800641a:	e008      	b.n	800642e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800641c:	2101      	movs	r1, #1
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f944 	bl	80066ac <USB_SetDevSpeed>
 8006424:	e003      	b.n	800642e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006426:	2103      	movs	r1, #3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f93f 	bl	80066ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800642e:	2110      	movs	r1, #16
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f8f3 	bl	800661c <USB_FlushTxFifo>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f911 	bl	8006668 <USB_FlushRxFifo>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	461a      	mov	r2, r3
 8006458:	2300      	movs	r3, #0
 800645a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	461a      	mov	r2, r3
 8006464:	2300      	movs	r3, #0
 8006466:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	461a      	mov	r2, r3
 8006470:	2300      	movs	r3, #0
 8006472:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	e043      	b.n	8006502 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800648c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006490:	d118      	bne.n	80064c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a4:	461a      	mov	r2, r3
 80064a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e013      	b.n	80064d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	461a      	mov	r2, r3
 80064bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e008      	b.n	80064d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	461a      	mov	r2, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	461a      	mov	r2, r3
 80064e4:	2300      	movs	r3, #0
 80064e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	461a      	mov	r2, r3
 80064f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3301      	adds	r3, #1
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	d3b7      	bcc.n	800647a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e043      	b.n	8006598 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006526:	d118      	bne.n	800655a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	461a      	mov	r2, r3
 800653c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e013      	b.n	800656c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	461a      	mov	r2, r3
 8006552:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e008      	b.n	800656c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	461a      	mov	r2, r3
 8006568:	2300      	movs	r3, #0
 800656a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	461a      	mov	r2, r3
 800658c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006590:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3301      	adds	r3, #1
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d3b7      	bcc.n	8006510 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f043 0210 	orr.w	r2, r3, #16
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <USB_DevInit+0x2b8>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f043 0208 	orr.w	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d107      	bne.n	8006608 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006600:	f043 0304 	orr.w	r3, r3, #4
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006614:	b004      	add	sp, #16
 8006616:	4770      	bx	lr
 8006618:	803c3800 	.word	0x803c3800

0800661c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	019b      	lsls	r3, r3, #6
 800662e:	f043 0220 	orr.w	r2, r3, #32
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <USB_FlushTxFifo+0x48>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e006      	b.n	8006656 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d0f0      	beq.n	8006636 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	00030d40 	.word	0x00030d40

08006668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2210      	movs	r2, #16
 8006678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3301      	adds	r3, #1
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <USB_FlushRxFifo+0x40>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d901      	bls.n	800668c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e006      	b.n	800669a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b10      	cmp	r3, #16
 8006696:	d0f0      	beq.n	800667a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	00030d40 	.word	0x00030d40

080066ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0306 	and.w	r3, r3, #6
 80066f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d102      	bne.n	8006704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
 8006702:	e00a      	b.n	800671a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d002      	beq.n	8006710 <USB_GetDevSpeed+0x32>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b06      	cmp	r3, #6
 800670e:	d102      	bne.n	8006716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006710:	2302      	movs	r3, #2
 8006712:	75fb      	strb	r3, [r7, #23]
 8006714:	e001      	b.n	800671a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006716:	230f      	movs	r3, #15
 8006718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
}
 800671c:	4618      	mov	r0, r3
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d13a      	bne.n	80067ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	2101      	movs	r1, #1
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	b29b      	uxth	r3, r3
 800675c:	68f9      	ldr	r1, [r7, #12]
 800675e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006762:	4313      	orrs	r3, r2
 8006764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d155      	bne.n	8006828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	78db      	ldrb	r3, [r3, #3]
 8006796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067a0:	4313      	orrs	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e036      	b.n	8006828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c0:	69da      	ldr	r2, [r3, #28]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	2101      	movs	r1, #1
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d8:	4313      	orrs	r3, r2
 80067da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11a      	bne.n	8006828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	78db      	ldrb	r3, [r3, #3]
 800680c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800680e:	430b      	orrs	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d161      	bne.n	8006918 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686a:	d11f      	bne.n	80068ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800688a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	43db      	mvns	r3, r3
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068cc:	4013      	ands	r3, r2
 80068ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	43db      	mvns	r3, r3
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f0:	4013      	ands	r3, r2
 80068f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	0159      	lsls	r1, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	440b      	add	r3, r1
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	4619      	mov	r1, r3
 8006910:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <USB_DeactivateEndpoint+0x1b0>)
 8006912:	4013      	ands	r3, r2
 8006914:	600b      	str	r3, [r1, #0]
 8006916:	e060      	b.n	80069da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692e:	d11f      	bne.n	8006970 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800694e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800696e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	2101      	movs	r1, #1
 8006982:	fa01 f303 	lsl.w	r3, r1, r3
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	43db      	mvns	r3, r3
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006990:	4013      	ands	r3, r2
 8006992:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	43db      	mvns	r3, r3
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b4:	4013      	ands	r3, r2
 80069b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	0159      	lsls	r1, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	440b      	add	r3, r1
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	4619      	mov	r1, r3
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <USB_DeactivateEndpoint+0x1b4>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	ec337800 	.word	0xec337800
 80069ec:	eff37800 	.word	0xeff37800

080069f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f040 815c 	bne.w	8006cca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d132      	bne.n	8006a80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	0cdb      	lsrs	r3, r3, #19
 8006a7a:	04db      	lsls	r3, r3, #19
 8006a7c:	6113      	str	r3, [r2, #16]
 8006a7e:	e074      	b.n	8006b6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9a:	0cdb      	lsrs	r3, r3, #19
 8006a9c:	04db      	lsls	r3, r3, #19
 8006a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006abe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6959      	ldr	r1, [r3, #20]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	440b      	add	r3, r1
 8006adc:	1e59      	subs	r1, r3, #1
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ae6:	04d9      	lsls	r1, r3, #19
 8006ae8:	4b9d      	ldr	r3, [pc, #628]	; (8006d60 <USB_EPStartXfer+0x370>)
 8006aea:	400b      	ands	r3, r1
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	0148      	lsls	r0, r1, #5
 8006af0:	69f9      	ldr	r1, [r7, #28]
 8006af2:	4401      	add	r1, r0
 8006af4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006af8:	4313      	orrs	r3, r2
 8006afa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b12:	69b9      	ldr	r1, [r7, #24]
 8006b14:	0148      	lsls	r0, r1, #5
 8006b16:	69f9      	ldr	r1, [r7, #28]
 8006b18:	4401      	add	r1, r0
 8006b1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d11f      	bne.n	8006b6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d14b      	bne.n	8006c08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	461a      	mov	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d128      	bne.n	8006be6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d110      	bne.n	8006bc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	e00f      	b.n	8006be6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e12f      	b.n	8006e68 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	78db      	ldrb	r3, [r3, #3]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d015      	beq.n	8006c5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8117 	beq.w	8006e68 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	69f9      	ldr	r1, [r7, #28]
 8006c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c56:	4313      	orrs	r3, r2
 8006c58:	634b      	str	r3, [r1, #52]	; 0x34
 8006c5a:	e105      	b.n	8006e68 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d110      	bne.n	8006c8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e00f      	b.n	8006cae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	68d9      	ldr	r1, [r3, #12]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	b298      	uxth	r0, r3
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fa2b 	bl	800711e <USB_WritePacket>
 8006cc8:	e0ce      	b.n	8006e68 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce4:	0cdb      	lsrs	r3, r3, #19
 8006ce6:	04db      	lsls	r3, r3, #19
 8006ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d126      	bne.n	8006d64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d2c:	69b9      	ldr	r1, [r7, #24]
 8006d2e:	0148      	lsls	r0, r1, #5
 8006d30:	69f9      	ldr	r1, [r7, #28]
 8006d32:	4401      	add	r1, r0
 8006d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d5a:	6113      	str	r3, [r2, #16]
 8006d5c:	e036      	b.n	8006dcc <USB_EPStartXfer+0x3dc>
 8006d5e:	bf00      	nop
 8006d60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	695a      	ldr	r2, [r3, #20]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	1e5a      	subs	r2, r3, #1
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d78:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	8afb      	ldrh	r3, [r7, #22]
 8006d8a:	04d9      	lsls	r1, r3, #19
 8006d8c:	4b39      	ldr	r3, [pc, #228]	; (8006e74 <USB_EPStartXfer+0x484>)
 8006d8e:	400b      	ands	r3, r1
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	0148      	lsls	r0, r1, #5
 8006d94:	69f9      	ldr	r1, [r7, #28]
 8006d96:	4401      	add	r1, r0
 8006d98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	8af9      	ldrh	r1, [r7, #22]
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	0148      	lsls	r0, r1, #5
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	4401      	add	r1, r0
 8006dc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d10d      	bne.n	8006dee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	68d9      	ldr	r1, [r3, #12]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	460a      	mov	r2, r1
 8006dec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d128      	bne.n	8006e48 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d110      	bne.n	8006e28 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00f      	b.n	8006e48 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	1ff80000 	.word	0x1ff80000

08006e78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	f040 80cd 	bne.w	8007034 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d132      	bne.n	8006f08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f00:	0cdb      	lsrs	r3, r3, #19
 8006f02:	04db      	lsls	r3, r3, #19
 8006f04:	6113      	str	r3, [r2, #16]
 8006f06:	e04e      	b.n	8006fa6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f22:	0cdb      	lsrs	r3, r3, #19
 8006f24:	04db      	lsls	r3, r3, #19
 8006f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d903      	bls.n	8006f60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f96:	6939      	ldr	r1, [r7, #16]
 8006f98:	0148      	lsls	r0, r1, #5
 8006f9a:	6979      	ldr	r1, [r7, #20]
 8006f9c:	4401      	add	r1, r0
 8006f9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d11e      	bne.n	8006fea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d009      	beq.n	8006fc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e092      	b.n	8007110 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007008:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d07e      	beq.n	8007110 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	2101      	movs	r1, #1
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702e:	4313      	orrs	r3, r2
 8007030:	634b      	str	r3, [r1, #52]	; 0x34
 8007032:	e06d      	b.n	8007110 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800704e:	0cdb      	lsrs	r3, r3, #19
 8007050:	04db      	lsls	r3, r3, #19
 8007052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800706e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007072:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007076:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070be:	6939      	ldr	r1, [r7, #16]
 80070c0:	0148      	lsls	r0, r1, #5
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	4401      	add	r1, r0
 80070c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070ca:	4313      	orrs	r3, r2
 80070cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10d      	bne.n	80070f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	68d9      	ldr	r1, [r3, #12]
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	460a      	mov	r2, r1
 80070ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800710e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800711e:	b480      	push	{r7}
 8007120:	b089      	sub	sp, #36	; 0x24
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	4611      	mov	r1, r2
 800712a:	461a      	mov	r2, r3
 800712c:	460b      	mov	r3, r1
 800712e:	71fb      	strb	r3, [r7, #7]
 8007130:	4613      	mov	r3, r2
 8007132:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800713c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11a      	bne.n	800717a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007144:	88bb      	ldrh	r3, [r7, #4]
 8007146:	3303      	adds	r3, #3
 8007148:	089b      	lsrs	r3, r3, #2
 800714a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800714c:	2300      	movs	r3, #0
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	e00f      	b.n	8007172 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	031a      	lsls	r2, r3, #12
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	4413      	add	r3, r2
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	461a      	mov	r2, r3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3304      	adds	r3, #4
 800716a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	3301      	adds	r3, #1
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	429a      	cmp	r2, r3
 8007178:	d3eb      	bcc.n	8007152 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3724      	adds	r7, #36	; 0x24
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	; 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	3303      	adds	r3, #3
 80071a2:	089b      	lsrs	r3, r3, #2
 80071a4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	e00b      	b.n	80071c4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3304      	adds	r3, #4
 80071bc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3301      	adds	r3, #1
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d3ef      	bcc.n	80071ac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80071cc:	69fb      	ldr	r3, [r7, #28]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3724      	adds	r7, #36	; 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d12c      	bne.n	8007250 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	db12      	blt.n	800722e <USB_EPSetStall+0x54>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00f      	beq.n	800722e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007228:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800722c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e02b      	b.n	80072a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	db12      	blt.n	8007288 <USB_EPSetStall+0xae>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00f      	beq.n	8007288 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007286:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	440a      	add	r2, r1
 800729e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d128      	bne.n	8007324 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	78db      	ldrb	r3, [r3, #3]
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d003      	beq.n	8007302 <USB_EPClearStall+0x4c>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	78db      	ldrb	r3, [r3, #3]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d138      	bne.n	8007374 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e027      	b.n	8007374 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	78db      	ldrb	r3, [r3, #3]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d003      	beq.n	8007354 <USB_EPClearStall+0x9e>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	78db      	ldrb	r3, [r3, #3]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d10f      	bne.n	8007374 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007372:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073bc:	4313      	orrs	r3, r2
 80073be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073e8:	f023 0303 	bic.w	r3, r3, #3
 80073ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073fc:	f023 0302 	bic.w	r3, r3, #2
 8007400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800742a:	f023 0303 	bic.w	r3, r3, #3
 800742e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800743e:	f043 0302 	orr.w	r3, r3, #2
 8007442:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4013      	ands	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4013      	ands	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	0c1b      	lsrs	r3, r3, #16
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4013      	ands	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	b29b      	uxth	r3, r3
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4013      	ands	r3, r2
 800750c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800750e:	68bb      	ldr	r3, [r7, #8]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
 800754c:	01db      	lsls	r3, r3, #7
 800754e:	b2db      	uxtb	r3, r3
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4013      	ands	r3, r2
 8007568:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800756a:	68bb      	ldr	r3, [r7, #8]
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	f003 0301 	and.w	r3, r3, #1
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075b2:	f023 0307 	bic.w	r3, r3, #7
 80075b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
	...

080075dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	460b      	mov	r3, r1
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	333c      	adds	r3, #60	; 0x3c
 80075f2:	3304      	adds	r3, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4a26      	ldr	r2, [pc, #152]	; (8007694 <USB_EP0_OutStart+0xb8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d90a      	bls.n	8007616 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800760c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007610:	d101      	bne.n	8007616 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	e037      	b.n	8007686 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761c:	461a      	mov	r2, r3
 800761e:	2300      	movs	r3, #0
 8007620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007644:	f043 0318 	orr.w	r3, r3, #24
 8007648:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007658:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800765c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d10f      	bne.n	8007684 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	4f54300a 	.word	0x4f54300a

08007698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4a13      	ldr	r2, [pc, #76]	; (80076fc <USB_CoreReset+0x64>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d901      	bls.n	80076b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e01b      	b.n	80076ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	daf2      	bge.n	80076a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f043 0201 	orr.w	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4a09      	ldr	r2, [pc, #36]	; (80076fc <USB_CoreReset+0x64>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d901      	bls.n	80076e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e006      	b.n	80076ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d0f0      	beq.n	80076ce <USB_CoreReset+0x36>

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	00030d40 	.word	0x00030d40

08007700 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800770c:	2010      	movs	r0, #16
 800770e:	f004 fd61 	bl	800c1d4 <USBD_static_malloc>
 8007712:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d108      	bne.n	800772c <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 800771a:	4b14      	ldr	r3, [pc, #80]	; (800776c <USBD_HID_Init+0x6c>)
 800771c:	2201      	movs	r2, #1
 800771e:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007728:	2302      	movs	r3, #2
 800772a:	e01b      	b.n	8007764 <USBD_HID_Init+0x64>
  }

  pdev->pClassData = (void *)hhid;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2207      	movs	r2, #7
 8007740:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007742:	e002      	b.n	800774a <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2208      	movs	r2, #8
 8007748:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800774a:	2320      	movs	r3, #32
 800774c:	2203      	movs	r2, #3
 800774e:	2181      	movs	r1, #129	; 0x81
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f004 fbe0 	bl	800bf16 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000616 	.word	0x20000616

08007770 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800777c:	2181      	movs	r1, #129	; 0x81
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f004 fbef 	bl	800bf62 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a0:	4618      	mov	r0, r3
 80077a2:	f004 fd25 	bl	800c1f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  xid_ran++;
 80077c2:	4b9b      	ldr	r3, [pc, #620]	; (8007a30 <USBD_HID_Setup+0x278>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	4b99      	ldr	r3, [pc, #612]	; (8007a30 <USBD_HID_Setup+0x278>)
 80077cc:	701a      	strb	r2, [r3, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d4:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <USBD_HID_Setup+0x36>
  {
	  usb_failed = 1;
 80077e4:	4b93      	ldr	r3, [pc, #588]	; (8007a34 <USBD_HID_Setup+0x27c>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e11c      	b.n	8007a28 <USBD_HID_Setup+0x270>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f6:	2bc1      	cmp	r3, #193	; 0xc1
 80077f8:	f000 80cd 	beq.w	8007996 <USBD_HID_Setup+0x1de>
 80077fc:	2bc1      	cmp	r3, #193	; 0xc1
 80077fe:	f200 810a 	bhi.w	8007a16 <USBD_HID_Setup+0x25e>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d045      	beq.n	8007892 <USBD_HID_Setup+0xda>
 8007806:	2b20      	cmp	r3, #32
 8007808:	f040 8105 	bne.w	8007a16 <USBD_HID_Setup+0x25e>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	3b02      	subs	r3, #2
 8007812:	2b09      	cmp	r3, #9
 8007814:	d835      	bhi.n	8007882 <USBD_HID_Setup+0xca>
 8007816:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBD_HID_Setup+0x64>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	08007873 	.word	0x08007873
 8007820:	08007853 	.word	0x08007853
 8007824:	08007883 	.word	0x08007883
 8007828:	08007883 	.word	0x08007883
 800782c:	08007883 	.word	0x08007883
 8007830:	08007883 	.word	0x08007883
 8007834:	08007883 	.word	0x08007883
 8007838:	08007883 	.word	0x08007883
 800783c:	08007861 	.word	0x08007861
 8007840:	08007845 	.word	0x08007845
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	885b      	ldrh	r3, [r3, #2]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	601a      	str	r2, [r3, #0]
          break;
 8007850:	e01e      	b.n	8007890 <USBD_HID_Setup+0xd8>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2201      	movs	r2, #1
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fa6e 	bl	8008d3a <USBD_CtlSendData>
          break;
 800785e:	e017      	b.n	8007890 <USBD_HID_Setup+0xd8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	885b      	ldrh	r3, [r3, #2]
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	b29b      	uxth	r3, r3
 8007868:	b2db      	uxtb	r3, r3
 800786a:	461a      	mov	r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	605a      	str	r2, [r3, #4]
          break;
 8007870:	e00e      	b.n	8007890 <USBD_HID_Setup+0xd8>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	3304      	adds	r3, #4
 8007876:	2201      	movs	r2, #1
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 fa5d 	bl	8008d3a <USBD_CtlSendData>
          break;
 8007880:	e006      	b.n	8007890 <USBD_HID_Setup+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f9e7 	bl	8008c58 <USBD_CtlError>
          ret = USBD_FAIL;
 800788a:	2303      	movs	r3, #3
 800788c:	77fb      	strb	r3, [r7, #31]
          break;
 800788e:	bf00      	nop
      }
      break;
 8007890:	e0c9      	b.n	8007a26 <USBD_HID_Setup+0x26e>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	2b0b      	cmp	r3, #11
 8007898:	d874      	bhi.n	8007984 <USBD_HID_Setup+0x1cc>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <USBD_HID_Setup+0xe8>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078d1 	.word	0x080078d1
 80078a4:	08007993 	.word	0x08007993
 80078a8:	08007985 	.word	0x08007985
 80078ac:	08007985 	.word	0x08007985
 80078b0:	08007985 	.word	0x08007985
 80078b4:	08007985 	.word	0x08007985
 80078b8:	080078fb 	.word	0x080078fb
 80078bc:	08007985 	.word	0x08007985
 80078c0:	08007985 	.word	0x08007985
 80078c4:	08007985 	.word	0x08007985
 80078c8:	08007933 	.word	0x08007933
 80078cc:	0800795d 	.word	0x0800795d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d107      	bne.n	80078ec <USBD_HID_Setup+0x134>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078dc:	f107 030e 	add.w	r3, r7, #14
 80078e0:	2202      	movs	r2, #2
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fa28 	bl	8008d3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ea:	e053      	b.n	8007994 <USBD_HID_Setup+0x1dc>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 f9b2 	bl	8008c58 <USBD_CtlError>
            ret = USBD_FAIL;
 80078f4:	2303      	movs	r3, #3
 80078f6:	77fb      	strb	r3, [r7, #31]
          break;
 80078f8:	e04c      	b.n	8007994 <USBD_HID_Setup+0x1dc>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b21      	cmp	r3, #33	; 0x21
 8007904:	d10e      	bne.n	8007924 <USBD_HID_Setup+0x16c>
          {
            pbuf = USBD_HID_Desc;
 8007906:	4b4c      	ldr	r3, [pc, #304]	; (8007a38 <USBD_HID_Setup+0x280>)
 8007908:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	88db      	ldrh	r3, [r3, #6]
 800790e:	2b12      	cmp	r3, #18
 8007910:	bf28      	it	cs
 8007912:	2312      	movcs	r3, #18
 8007914:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007916:	8afb      	ldrh	r3, [r7, #22]
 8007918:	461a      	mov	r2, r3
 800791a:	6939      	ldr	r1, [r7, #16]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fa0c 	bl	8008d3a <USBD_CtlSendData>
          break;
 8007922:	e037      	b.n	8007994 <USBD_HID_Setup+0x1dc>
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f996 	bl	8008c58 <USBD_CtlError>
            ret = USBD_FAIL;
 800792c:	2303      	movs	r3, #3
 800792e:	77fb      	strb	r3, [r7, #31]
            break;
 8007930:	e030      	b.n	8007994 <USBD_HID_Setup+0x1dc>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b03      	cmp	r3, #3
 800793c:	d107      	bne.n	800794e <USBD_HID_Setup+0x196>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	3308      	adds	r3, #8
 8007942:	2201      	movs	r2, #1
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 f9f7 	bl	8008d3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800794c:	e022      	b.n	8007994 <USBD_HID_Setup+0x1dc>
            USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f981 	bl	8008c58 <USBD_CtlError>
            ret = USBD_FAIL;
 8007956:	2303      	movs	r3, #3
 8007958:	77fb      	strb	r3, [r7, #31]
          break;
 800795a:	e01b      	b.n	8007994 <USBD_HID_Setup+0x1dc>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d106      	bne.n	8007976 <USBD_HID_Setup+0x1be>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	885b      	ldrh	r3, [r3, #2]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007974:	e00e      	b.n	8007994 <USBD_HID_Setup+0x1dc>
            USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f96d 	bl	8008c58 <USBD_CtlError>
            ret = USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	77fb      	strb	r3, [r7, #31]
          break;
 8007982:	e007      	b.n	8007994 <USBD_HID_Setup+0x1dc>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 f966 	bl	8008c58 <USBD_CtlError>
          ret = USBD_FAIL;
 800798c:	2303      	movs	r3, #3
 800798e:	77fb      	strb	r3, [r7, #31]
          break;
 8007990:	e000      	b.n	8007994 <USBD_HID_Setup+0x1dc>
          break;
 8007992:	bf00      	nop
      }
      break;
 8007994:	e047      	b.n	8007a26 <USBD_HID_Setup+0x26e>

    case 0xC1:			//this is for the og xbox, this is the custom vendor request
    	xid_ran = 1;
 8007996:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <USBD_HID_Setup+0x278>)
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d10f      	bne.n	80079c4 <USBD_HID_Setup+0x20c>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	885b      	ldrh	r3, [r3, #2]
 80079a8:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80079ac:	d10a      	bne.n	80079c4 <USBD_HID_Setup+0x20c>
    		len = 16;
 80079ae:	2310      	movs	r3, #16
 80079b0:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 80079b2:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <USBD_HID_Setup+0x280>)
 80079b4:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079b6:	8afb      	ldrh	r3, [r7, #22]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6939      	ldr	r1, [r7, #16]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f9bc 	bl	8008d3a <USBD_CtlSendData>
 80079c2:	e027      	b.n	8007a14 <USBD_HID_Setup+0x25c>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10f      	bne.n	80079ec <USBD_HID_Setup+0x234>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	885b      	ldrh	r3, [r3, #2]
 80079d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d4:	d10a      	bne.n	80079ec <USBD_HID_Setup+0x234>
    		len = 20;
 80079d6:	2314      	movs	r3, #20
 80079d8:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 80079da:	4b18      	ldr	r3, [pc, #96]	; (8007a3c <USBD_HID_Setup+0x284>)
 80079dc:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079de:	8afb      	ldrh	r3, [r7, #22]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6939      	ldr	r1, [r7, #16]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9a8 	bl	8008d3a <USBD_CtlSendData>
 80079ea:	e013      	b.n	8007a14 <USBD_HID_Setup+0x25c>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d117      	bne.n	8007a24 <USBD_HID_Setup+0x26c>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	885b      	ldrh	r3, [r3, #2]
 80079f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079fc:	d112      	bne.n	8007a24 <USBD_HID_Setup+0x26c>
    		len = 6;
 80079fe:	2306      	movs	r3, #6
 8007a00:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8007a02:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <USBD_HID_Setup+0x288>)
 8007a04:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a06:	8afb      	ldrh	r3, [r7, #22]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6939      	ldr	r1, [r7, #16]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f994 	bl	8008d3a <USBD_CtlSendData>
    	}
    break;
 8007a12:	e007      	b.n	8007a24 <USBD_HID_Setup+0x26c>
 8007a14:	e006      	b.n	8007a24 <USBD_HID_Setup+0x26c>


    default:
      USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f91d 	bl	8008c58 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	77fb      	strb	r3, [r7, #31]
      break;
 8007a22:	e000      	b.n	8007a26 <USBD_HID_Setup+0x26e>
    break;
 8007a24:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000615 	.word	0x20000615
 8007a34:	20000616 	.word	0x20000616
 8007a38:	20000064 	.word	0x20000064
 8007a3c:	20000080 	.word	0x20000080
 8007a40:	20000094 	.word	0x20000094

08007a44 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a58:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e013      	b.n	8007a8c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d10c      	bne.n	8007a8a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	7b1b      	ldrb	r3, [r3, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d108      	bne.n	8007a8a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	2181      	movs	r1, #129	; 0x81
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f004 fb14 	bl	800c0b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007aa2:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	20000044 	.word	0x20000044

08007ab4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  return USBD_HID_CfgHSDesc;
#endif

	#if(OG_XBOX_SETUP)
	*length = 0;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	801a      	strh	r2, [r3, #0]
	return 0;
 8007ac2:	2300      	movs	r3, #0
	#endif
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	220a      	movs	r2, #10
 8007b00:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	20000074 	.word	0x20000074

08007b14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e01f      	b.n	8007b6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	79fa      	ldrb	r2, [r7, #7]
 8007b5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f004 f971 	bl	800be48 <USBD_LL_Init>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e016      	b.n	8007bba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f107 020e 	add.w	r2, r7, #14
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f004 f988 	bl	800bee0 <USBD_LL_Start>
 8007bd0:	4603      	mov	r3, r0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	4611      	mov	r1, r2
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
  }

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 ffba 	bl	8008be4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d01a      	beq.n	8007cca <USBD_LL_SetupStage+0x72>
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d822      	bhi.n	8007cde <USBD_LL_SetupStage+0x86>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <USBD_LL_SetupStage+0x4a>
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d00a      	beq.n	8007cb6 <USBD_LL_SetupStage+0x5e>
 8007ca0:	e01d      	b.n	8007cde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa62 	bl	8008174 <USBD_StdDevReq>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	e020      	b.n	8007cf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fac6 	bl	8008250 <USBD_StdItfReq>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc8:	e016      	b.n	8007cf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fb05 	bl	80082e2 <USBD_StdEPReq>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
      break;
 8007cdc:	e00c      	b.n	8007cf8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ce4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f004 f957 	bl	800bfa0 <USBD_LL_StallEP>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	bf00      	nop
  }

  return ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d138      	bne.n	8007d88 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d14a      	bne.n	8007dbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d913      	bls.n	8007d5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	bf28      	it	cs
 8007d4e:	4613      	movcs	r3, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f001 f81c 	bl	8008d92 <USBD_CtlContinueRx>
 8007d5a:	e030      	b.n	8007dbe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d10b      	bne.n	8007d80 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f001 f817 	bl	8008db4 <USBD_CtlSendStatus>
 8007d86:	e01a      	b.n	8007dbe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d114      	bne.n	8007dbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00e      	beq.n	8007dbe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	7afa      	ldrb	r2, [r7, #11]
 8007daa:	4611      	mov	r1, r2
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	4798      	blx	r3
 8007db0:	4603      	mov	r3, r0
 8007db2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	e000      	b.n	8007dc0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d16b      	bne.n	8007eb4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3314      	adds	r3, #20
 8007de0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d156      	bne.n	8007e9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d914      	bls.n	8007e22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 ffae 	bl	8008d70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e14:	2300      	movs	r3, #0
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f004 f96a 	bl	800c0f4 <USBD_LL_PrepareReceive>
 8007e20:	e03b      	b.n	8007e9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d11c      	bne.n	8007e68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d316      	bcc.n	8007e68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d20f      	bcs.n	8007e68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 ff8f 	bl	8008d70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2100      	movs	r1, #0
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f004 f947 	bl	800c0f4 <USBD_LL_PrepareReceive>
 8007e66:	e018      	b.n	8007e9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d10b      	bne.n	8007e8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e8c:	2180      	movs	r1, #128	; 0x80
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f004 f886 	bl	800bfa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 ffa0 	bl	8008dda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d122      	bne.n	8007eea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fe98 	bl	8007bda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007eb2:	e01a      	b.n	8007eea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d114      	bne.n	8007eea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	7afa      	ldrb	r2, [r7, #11]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	4798      	blx	r3
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	e000      	b.n	8007eec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e02f      	b.n	8007f88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00f      	beq.n	8007f52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6852      	ldr	r2, [r2, #4]
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f52:	2340      	movs	r3, #64	; 0x40
 8007f54:	2200      	movs	r2, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f003 ffdc 	bl	800bf16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2240      	movs	r2, #64	; 0x40
 8007f6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f6e:	2340      	movs	r3, #64	; 0x40
 8007f70:	2200      	movs	r2, #0
 8007f72:	2180      	movs	r1, #128	; 0x80
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f003 ffce 	bl	800bf16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2240      	movs	r2, #64	; 0x40
 8007f84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d106      	bne.n	8007ffe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	e012      	b.n	8008048 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d10b      	bne.n	8008046 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	e014      	b.n	8008094 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b03      	cmp	r3, #3
 8008074:	d10d      	bne.n	8008092 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	4611      	mov	r1, r2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e014      	b.n	80080e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d10d      	bne.n	80080de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	4611      	mov	r1, r2
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d009      	beq.n	800812c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	4611      	mov	r1, r2
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008136:	b480      	push	{r7}
 8008138:	b087      	sub	sp, #28
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	3301      	adds	r3, #1
 800814c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008154:	8a3b      	ldrh	r3, [r7, #16]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	b21a      	sxth	r2, r3
 800815a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800815e:	4313      	orrs	r3, r2
 8008160:	b21b      	sxth	r3, r3
 8008162:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008164:	89fb      	ldrh	r3, [r7, #14]
}
 8008166:	4618      	mov	r0, r3
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800818a:	2b40      	cmp	r3, #64	; 0x40
 800818c:	d005      	beq.n	800819a <USBD_StdDevReq+0x26>
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d853      	bhi.n	800823a <USBD_StdDevReq+0xc6>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00b      	beq.n	80081ae <USBD_StdDevReq+0x3a>
 8008196:	2b20      	cmp	r3, #32
 8008198:	d14f      	bne.n	800823a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]
      break;
 80081ac:	e04a      	b.n	8008244 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	d83b      	bhi.n	800822e <USBD_StdDevReq+0xba>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <USBD_StdDevReq+0x48>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	08008211 	.word	0x08008211
 80081c0:	08008225 	.word	0x08008225
 80081c4:	0800822f 	.word	0x0800822f
 80081c8:	0800821b 	.word	0x0800821b
 80081cc:	0800822f 	.word	0x0800822f
 80081d0:	080081ef 	.word	0x080081ef
 80081d4:	080081e5 	.word	0x080081e5
 80081d8:	0800822f 	.word	0x0800822f
 80081dc:	08008207 	.word	0x08008207
 80081e0:	080081f9 	.word	0x080081f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9de 	bl	80085a8 <USBD_GetDescriptor>
          break;
 80081ec:	e024      	b.n	8008238 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fb6d 	bl	80088d0 <USBD_SetAddress>
          break;
 80081f6:	e01f      	b.n	8008238 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fbac 	bl	8008958 <USBD_SetConfig>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
          break;
 8008204:	e018      	b.n	8008238 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fc4b 	bl	8008aa4 <USBD_GetConfig>
          break;
 800820e:	e013      	b.n	8008238 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fc7c 	bl	8008b10 <USBD_GetStatus>
          break;
 8008218:	e00e      	b.n	8008238 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fcab 	bl	8008b78 <USBD_SetFeature>
          break;
 8008222:	e009      	b.n	8008238 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fcba 	bl	8008ba0 <USBD_ClrFeature>
          break;
 800822c:	e004      	b.n	8008238 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fd11 	bl	8008c58 <USBD_CtlError>
          break;
 8008236:	bf00      	nop
      }
      break;
 8008238:	e004      	b.n	8008244 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fd0b 	bl	8008c58 <USBD_CtlError>
      break;
 8008242:	bf00      	nop
  }

  return ret;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop

08008250 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008266:	2b40      	cmp	r3, #64	; 0x40
 8008268:	d005      	beq.n	8008276 <USBD_StdItfReq+0x26>
 800826a:	2b40      	cmp	r3, #64	; 0x40
 800826c:	d82f      	bhi.n	80082ce <USBD_StdItfReq+0x7e>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <USBD_StdItfReq+0x26>
 8008272:	2b20      	cmp	r3, #32
 8008274:	d12b      	bne.n	80082ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827c:	b2db      	uxtb	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	2b02      	cmp	r3, #2
 8008282:	d81d      	bhi.n	80082c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	889b      	ldrh	r3, [r3, #4]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b01      	cmp	r3, #1
 800828c:	d813      	bhi.n	80082b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	88db      	ldrh	r3, [r3, #6]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d110      	bne.n	80082ca <USBD_StdItfReq+0x7a>
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10d      	bne.n	80082ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fd80 	bl	8008db4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082b4:	e009      	b.n	80082ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fccd 	bl	8008c58 <USBD_CtlError>
          break;
 80082be:	e004      	b.n	80082ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fcc8 	bl	8008c58 <USBD_CtlError>
          break;
 80082c8:	e000      	b.n	80082cc <USBD_StdItfReq+0x7c>
          break;
 80082ca:	bf00      	nop
      }
      break;
 80082cc:	e004      	b.n	80082d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fcc1 	bl	8008c58 <USBD_CtlError>
      break;
 80082d6:	bf00      	nop
  }

  return ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	889b      	ldrh	r3, [r3, #4]
 80082f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d007      	beq.n	8008312 <USBD_StdEPReq+0x30>
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	f200 8145 	bhi.w	8008592 <USBD_StdEPReq+0x2b0>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <USBD_StdEPReq+0x44>
 800830c:	2b20      	cmp	r3, #32
 800830e:	f040 8140 	bne.w	8008592 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e13a      	b.n	800859c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d007      	beq.n	800833e <USBD_StdEPReq+0x5c>
 800832e:	2b03      	cmp	r3, #3
 8008330:	f300 8129 	bgt.w	8008586 <USBD_StdEPReq+0x2a4>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d07f      	beq.n	8008438 <USBD_StdEPReq+0x156>
 8008338:	2b01      	cmp	r3, #1
 800833a:	d03c      	beq.n	80083b6 <USBD_StdEPReq+0xd4>
 800833c:	e123      	b.n	8008586 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d002      	beq.n	8008350 <USBD_StdEPReq+0x6e>
 800834a:	2b03      	cmp	r3, #3
 800834c:	d016      	beq.n	800837c <USBD_StdEPReq+0x9a>
 800834e:	e02c      	b.n	80083aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <USBD_StdEPReq+0x90>
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b80      	cmp	r3, #128	; 0x80
 800835a:	d00a      	beq.n	8008372 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f003 fe1d 	bl	800bfa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008366:	2180      	movs	r1, #128	; 0x80
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f003 fe19 	bl	800bfa0 <USBD_LL_StallEP>
 800836e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008370:	e020      	b.n	80083b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc6f 	bl	8008c58 <USBD_CtlError>
              break;
 800837a:	e01b      	b.n	80083b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10e      	bne.n	80083a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <USBD_StdEPReq+0xc0>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b80      	cmp	r3, #128	; 0x80
 800838e:	d008      	beq.n	80083a2 <USBD_StdEPReq+0xc0>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 fdff 	bl	800bfa0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fd06 	bl	8008db4 <USBD_CtlSendStatus>

              break;
 80083a8:	e004      	b.n	80083b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc53 	bl	8008c58 <USBD_CtlError>
              break;
 80083b2:	bf00      	nop
          }
          break;
 80083b4:	e0ec      	b.n	8008590 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d002      	beq.n	80083c8 <USBD_StdEPReq+0xe6>
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d016      	beq.n	80083f4 <USBD_StdEPReq+0x112>
 80083c6:	e030      	b.n	800842a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <USBD_StdEPReq+0x108>
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	d00a      	beq.n	80083ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f003 fde1 	bl	800bfa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f003 fddd 	bl	800bfa0 <USBD_LL_StallEP>
 80083e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e8:	e025      	b.n	8008436 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc33 	bl	8008c58 <USBD_CtlError>
              break;
 80083f2:	e020      	b.n	8008436 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	885b      	ldrh	r3, [r3, #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d11b      	bne.n	8008434 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f003 fde7 	bl	800bfde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fccf 	bl	8008db4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008428:	e004      	b.n	8008434 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc13 	bl	8008c58 <USBD_CtlError>
              break;
 8008432:	e000      	b.n	8008436 <USBD_StdEPReq+0x154>
              break;
 8008434:	bf00      	nop
          }
          break;
 8008436:	e0ab      	b.n	8008590 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d002      	beq.n	800844a <USBD_StdEPReq+0x168>
 8008444:	2b03      	cmp	r3, #3
 8008446:	d032      	beq.n	80084ae <USBD_StdEPReq+0x1cc>
 8008448:	e097      	b.n	800857a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <USBD_StdEPReq+0x17e>
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d004      	beq.n	8008460 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fbfd 	bl	8008c58 <USBD_CtlError>
                break;
 800845e:	e091      	b.n	8008584 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008464:	2b00      	cmp	r3, #0
 8008466:	da0b      	bge.n	8008480 <USBD_StdEPReq+0x19e>
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	3310      	adds	r3, #16
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	3304      	adds	r3, #4
 800847e:	e00b      	b.n	8008498 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4413      	add	r3, r2
 8008496:	3304      	adds	r3, #4
 8008498:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2202      	movs	r2, #2
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fc47 	bl	8008d3a <USBD_CtlSendData>
              break;
 80084ac:	e06a      	b.n	8008584 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da11      	bge.n	80084da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	f003 020f 	and.w	r2, r3, #15
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	3324      	adds	r3, #36	; 0x24
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d117      	bne.n	8008500 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fbc0 	bl	8008c58 <USBD_CtlError>
                  break;
 80084d8:	e054      	b.n	8008584 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fbad 	bl	8008c58 <USBD_CtlError>
                  break;
 80084fe:	e041      	b.n	8008584 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008504:	2b00      	cmp	r3, #0
 8008506:	da0b      	bge.n	8008520 <USBD_StdEPReq+0x23e>
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800850e:	4613      	mov	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	3310      	adds	r3, #16
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	4413      	add	r3, r2
 800851c:	3304      	adds	r3, #4
 800851e:	e00b      	b.n	8008538 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	4413      	add	r3, r2
 8008536:	3304      	adds	r3, #4
 8008538:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <USBD_StdEPReq+0x264>
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d103      	bne.n	800854e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	e00e      	b.n	800856c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f003 fd62 	bl	800c01c <USBD_LL_IsStallEP>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e002      	b.n	800856c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2202      	movs	r2, #2
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fbe1 	bl	8008d3a <USBD_CtlSendData>
              break;
 8008578:	e004      	b.n	8008584 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fb6b 	bl	8008c58 <USBD_CtlError>
              break;
 8008582:	bf00      	nop
          }
          break;
 8008584:	e004      	b.n	8008590 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fb65 	bl	8008c58 <USBD_CtlError>
          break;
 800858e:	bf00      	nop
      }
      break;
 8008590:	e004      	b.n	800859c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fb5f 	bl	8008c58 <USBD_CtlError>
      break;
 800859a:	bf00      	nop
  }

  return ret;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	885b      	ldrh	r3, [r3, #2]
 80085c2:	0a1b      	lsrs	r3, r3, #8
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	2b0e      	cmp	r3, #14
 80085ca:	f200 8152 	bhi.w	8008872 <USBD_GetDescriptor+0x2ca>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_GetDescriptor+0x2c>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008645 	.word	0x08008645
 80085d8:	0800865d 	.word	0x0800865d
 80085dc:	0800869d 	.word	0x0800869d
 80085e0:	08008873 	.word	0x08008873
 80085e4:	08008873 	.word	0x08008873
 80085e8:	08008813 	.word	0x08008813
 80085ec:	0800883f 	.word	0x0800883f
 80085f0:	08008873 	.word	0x08008873
 80085f4:	08008873 	.word	0x08008873
 80085f8:	08008873 	.word	0x08008873
 80085fc:	08008873 	.word	0x08008873
 8008600:	08008873 	.word	0x08008873
 8008604:	08008873 	.word	0x08008873
 8008608:	08008873 	.word	0x08008873
 800860c:	08008611 	.word	0x08008611
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7c12      	ldrb	r2, [r2, #16]
 8008628:	f107 0108 	add.w	r1, r7, #8
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3
 8008630:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008632:	e126      	b.n	8008882 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb0e 	bl	8008c58 <USBD_CtlError>
        err++;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	3301      	adds	r3, #1
 8008640:	72fb      	strb	r3, [r7, #11]
      break;
 8008642:	e11e      	b.n	8008882 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 0108 	add.w	r1, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
      break;
 800865a:	e112      	b.n	8008882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	7c1b      	ldrb	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10d      	bne.n	8008680 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	f107 0208 	add.w	r2, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	2202      	movs	r2, #2
 800867c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800867e:	e100      	b.n	8008882 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	f107 0208 	add.w	r2, r7, #8
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
 8008690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	2202      	movs	r2, #2
 8008698:	701a      	strb	r2, [r3, #0]
      break;
 800869a:	e0f2      	b.n	8008882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	885b      	ldrh	r3, [r3, #2]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	f200 80ac 	bhi.w	8008800 <USBD_GetDescriptor+0x258>
 80086a8:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <USBD_GetDescriptor+0x108>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086fd 	.word	0x080086fd
 80086b8:	08008731 	.word	0x08008731
 80086bc:	08008765 	.word	0x08008765
 80086c0:	08008799 	.word	0x08008799
 80086c4:	080087cd 	.word	0x080087cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	7c12      	ldrb	r2, [r2, #16]
 80086e0:	f107 0108 	add.w	r1, r7, #8
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ea:	e091      	b.n	8008810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fab2 	bl	8008c58 <USBD_CtlError>
            err++;
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	3301      	adds	r3, #1
 80086f8:	72fb      	strb	r3, [r7, #11]
          break;
 80086fa:	e089      	b.n	8008810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7c12      	ldrb	r2, [r2, #16]
 8008714:	f107 0108 	add.w	r1, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800871e:	e077      	b.n	8008810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa98 	bl	8008c58 <USBD_CtlError>
            err++;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	3301      	adds	r3, #1
 800872c:	72fb      	strb	r3, [r7, #11]
          break;
 800872e:	e06f      	b.n	8008810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7c12      	ldrb	r2, [r2, #16]
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
 8008750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008752:	e05d      	b.n	8008810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fa7e 	bl	8008c58 <USBD_CtlError>
            err++;
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	3301      	adds	r3, #1
 8008760:	72fb      	strb	r3, [r7, #11]
          break;
 8008762:	e055      	b.n	8008810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00b      	beq.n	8008788 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	7c12      	ldrb	r2, [r2, #16]
 800877c:	f107 0108 	add.w	r1, r7, #8
 8008780:	4610      	mov	r0, r2
 8008782:	4798      	blx	r3
 8008784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008786:	e043      	b.n	8008810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa64 	bl	8008c58 <USBD_CtlError>
            err++;
 8008790:	7afb      	ldrb	r3, [r7, #11]
 8008792:	3301      	adds	r3, #1
 8008794:	72fb      	strb	r3, [r7, #11]
          break;
 8008796:	e03b      	b.n	8008810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7c12      	ldrb	r2, [r2, #16]
 80087b0:	f107 0108 	add.w	r1, r7, #8
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ba:	e029      	b.n	8008810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa4a 	bl	8008c58 <USBD_CtlError>
            err++;
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	3301      	adds	r3, #1
 80087c8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ca:	e021      	b.n	8008810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7c12      	ldrb	r2, [r2, #16]
 80087e4:	f107 0108 	add.w	r1, r7, #8
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ee:	e00f      	b.n	8008810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa30 	bl	8008c58 <USBD_CtlError>
            err++;
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	3301      	adds	r3, #1
 80087fc:	72fb      	strb	r3, [r7, #11]
          break;
 80087fe:	e007      	b.n	8008810 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa28 	bl	8008c58 <USBD_CtlError>
          err++;
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	3301      	adds	r3, #1
 800880c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800880e:	bf00      	nop
      }
      break;
 8008810:	e037      	b.n	8008882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7c1b      	ldrb	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008822:	f107 0208 	add.w	r2, r7, #8
 8008826:	4610      	mov	r0, r2
 8008828:	4798      	blx	r3
 800882a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800882c:	e029      	b.n	8008882 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa11 	bl	8008c58 <USBD_CtlError>
        err++;
 8008836:	7afb      	ldrb	r3, [r7, #11]
 8008838:	3301      	adds	r3, #1
 800883a:	72fb      	strb	r3, [r7, #11]
      break;
 800883c:	e021      	b.n	8008882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	7c1b      	ldrb	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10d      	bne.n	8008862 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	f107 0208 	add.w	r2, r7, #8
 8008852:	4610      	mov	r0, r2
 8008854:	4798      	blx	r3
 8008856:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	2207      	movs	r2, #7
 800885e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008860:	e00f      	b.n	8008882 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f9f7 	bl	8008c58 <USBD_CtlError>
        err++;
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	3301      	adds	r3, #1
 800886e:	72fb      	strb	r3, [r7, #11]
      break;
 8008870:	e007      	b.n	8008882 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f9ef 	bl	8008c58 <USBD_CtlError>
      err++;
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	3301      	adds	r3, #1
 800887e:	72fb      	strb	r3, [r7, #11]
      break;
 8008880:	bf00      	nop
  }

  if (err != 0U)
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11e      	bne.n	80088c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	88db      	ldrh	r3, [r3, #6]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d016      	beq.n	80088be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008890:	893b      	ldrh	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00e      	beq.n	80088b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	88da      	ldrh	r2, [r3, #6]
 800889a:	893b      	ldrh	r3, [r7, #8]
 800889c:	4293      	cmp	r3, r2
 800889e:	bf28      	it	cs
 80088a0:	4613      	movcs	r3, r2
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088a6:	893b      	ldrh	r3, [r7, #8]
 80088a8:	461a      	mov	r2, r3
 80088aa:	68f9      	ldr	r1, [r7, #12]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fa44 	bl	8008d3a <USBD_CtlSendData>
 80088b2:	e009      	b.n	80088c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9ce 	bl	8008c58 <USBD_CtlError>
 80088bc:	e004      	b.n	80088c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa78 	bl	8008db4 <USBD_CtlSendStatus>
 80088c4:	e000      	b.n	80088c8 <USBD_GetDescriptor+0x320>
    return;
 80088c6:	bf00      	nop
  }
}
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop

080088d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	889b      	ldrh	r3, [r3, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d131      	bne.n	8008946 <USBD_SetAddress+0x76>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	88db      	ldrh	r3, [r3, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d12d      	bne.n	8008946 <USBD_SetAddress+0x76>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	885b      	ldrh	r3, [r3, #2]
 80088ee:	2b7f      	cmp	r3, #127	; 0x7f
 80088f0:	d829      	bhi.n	8008946 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b03      	cmp	r3, #3
 8008908:	d104      	bne.n	8008914 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f9a3 	bl	8008c58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008912:	e01d      	b.n	8008950 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7bfa      	ldrb	r2, [r7, #15]
 8008918:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f003 fba7 	bl	800c074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa44 	bl	8008db4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893a:	e009      	b.n	8008950 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008944:	e004      	b.n	8008950 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f985 	bl	8008c58 <USBD_CtlError>
  }
}
 800894e:	bf00      	nop
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	b2da      	uxtb	r2, r3
 800896c:	4b4c      	ldr	r3, [pc, #304]	; (8008aa0 <USBD_SetConfig+0x148>)
 800896e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008970:	4b4b      	ldr	r3, [pc, #300]	; (8008aa0 <USBD_SetConfig+0x148>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d905      	bls.n	8008984 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f96c 	bl	8008c58 <USBD_CtlError>
    return USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	e088      	b.n	8008a96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d002      	beq.n	8008996 <USBD_SetConfig+0x3e>
 8008990:	2b03      	cmp	r3, #3
 8008992:	d025      	beq.n	80089e0 <USBD_SetConfig+0x88>
 8008994:	e071      	b.n	8008a7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008996:	4b42      	ldr	r3, [pc, #264]	; (8008aa0 <USBD_SetConfig+0x148>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01c      	beq.n	80089d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800899e:	4b40      	ldr	r3, [pc, #256]	; (8008aa0 <USBD_SetConfig+0x148>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089a8:	4b3d      	ldr	r3, [pc, #244]	; (8008aa0 <USBD_SetConfig+0x148>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff f91e 	bl	8007bf0 <USBD_SetClassConfig>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f949 	bl	8008c58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089c6:	e065      	b.n	8008a94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f9f3 	bl	8008db4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2203      	movs	r2, #3
 80089d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089d6:	e05d      	b.n	8008a94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f9eb 	bl	8008db4 <USBD_CtlSendStatus>
      break;
 80089de:	e059      	b.n	8008a94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089e0:	4b2f      	ldr	r3, [pc, #188]	; (8008aa0 <USBD_SetConfig+0x148>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d112      	bne.n	8008a0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80089f0:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <USBD_SetConfig+0x148>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089fa:	4b29      	ldr	r3, [pc, #164]	; (8008aa0 <USBD_SetConfig+0x148>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff f911 	bl	8007c28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f9d4 	bl	8008db4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a0c:	e042      	b.n	8008a94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a0e:	4b24      	ldr	r3, [pc, #144]	; (8008aa0 <USBD_SetConfig+0x148>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d02a      	beq.n	8008a72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff f8ff 	bl	8007c28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <USBD_SetConfig+0x148>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a34:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <USBD_SetConfig+0x148>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff f8d8 	bl	8007bf0 <USBD_SetClassConfig>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00f      	beq.n	8008a6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f903 	bl	8008c58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff f8e4 	bl	8007c28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a68:	e014      	b.n	8008a94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9a2 	bl	8008db4 <USBD_CtlSendStatus>
      break;
 8008a70:	e010      	b.n	8008a94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f99e 	bl	8008db4 <USBD_CtlSendStatus>
      break;
 8008a78:	e00c      	b.n	8008a94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f8eb 	bl	8008c58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a82:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <USBD_SetConfig+0x148>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff f8cd 	bl	8007c28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	73fb      	strb	r3, [r7, #15]
      break;
 8008a92:	bf00      	nop
  }

  return ret;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000617 	.word	0x20000617

08008aa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	88db      	ldrh	r3, [r3, #6]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d004      	beq.n	8008ac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f8cd 	bl	8008c58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008abe:	e023      	b.n	8008b08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	dc02      	bgt.n	8008ad2 <USBD_GetConfig+0x2e>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dc03      	bgt.n	8008ad8 <USBD_GetConfig+0x34>
 8008ad0:	e015      	b.n	8008afe <USBD_GetConfig+0x5a>
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d00b      	beq.n	8008aee <USBD_GetConfig+0x4a>
 8008ad6:	e012      	b.n	8008afe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f927 	bl	8008d3a <USBD_CtlSendData>
        break;
 8008aec:	e00c      	b.n	8008b08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3304      	adds	r3, #4
 8008af2:	2201      	movs	r2, #1
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f91f 	bl	8008d3a <USBD_CtlSendData>
        break;
 8008afc:	e004      	b.n	8008b08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f8a9 	bl	8008c58 <USBD_CtlError>
        break;
 8008b06:	bf00      	nop
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d81e      	bhi.n	8008b66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	88db      	ldrh	r3, [r3, #6]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d004      	beq.n	8008b3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f890 	bl	8008c58 <USBD_CtlError>
        break;
 8008b38:	e01a      	b.n	8008b70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f043 0202 	orr.w	r2, r3, #2
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f8eb 	bl	8008d3a <USBD_CtlSendData>
      break;
 8008b64:	e004      	b.n	8008b70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f875 	bl	8008c58 <USBD_CtlError>
      break;
 8008b6e:	bf00      	nop
  }
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d106      	bne.n	8008b98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f90e 	bl	8008db4 <USBD_CtlSendStatus>
  }
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d80b      	bhi.n	8008bd0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	885b      	ldrh	r3, [r3, #2]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d10c      	bne.n	8008bda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f8f3 	bl	8008db4 <USBD_CtlSendStatus>
      }
      break;
 8008bce:	e004      	b.n	8008bda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f840 	bl	8008c58 <USBD_CtlError>
      break;
 8008bd8:	e000      	b.n	8008bdc <USBD_ClrFeature+0x3c>
      break;
 8008bda:	bf00      	nop
  }
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	781a      	ldrb	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7ff fa91 	bl	8008136 <SWAPBYTE>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3301      	adds	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff fa84 	bl	8008136 <SWAPBYTE>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461a      	mov	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fa77 	bl	8008136 <SWAPBYTE>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	80da      	strh	r2, [r3, #6]
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f003 f99b 	bl	800bfa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f003 f997 	bl	800bfa0 <USBD_LL_StallEP>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d036      	beq.n	8008cfe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c94:	6938      	ldr	r0, [r7, #16]
 8008c96:	f000 f836 	bl	8008d06 <USBD_GetLen>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cca:	e013      	b.n	8008cf4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	7812      	ldrb	r2, [r2, #0]
 8008cd6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	613b      	str	r3, [r7, #16]
    idx++;
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	4413      	add	r3, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e7      	bne.n	8008ccc <USBD_GetString+0x52>
 8008cfc:	e000      	b.n	8008d00 <USBD_GetString+0x86>
    return;
 8008cfe:	bf00      	nop
  }
}
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d16:	e005      	b.n	8008d24 <USBD_GetLen+0x1e>
  {
    len++;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1f5      	bne.n	8008d18 <USBD_GetLen+0x12>
  }

  return len;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	2100      	movs	r1, #0
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f003 f9a6 	bl	800c0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	2100      	movs	r1, #0
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f003 f995 	bl	800c0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	2100      	movs	r1, #0
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f003 f9a5 	bl	800c0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f003 f971 	bl	800c0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2205      	movs	r2, #5
 8008de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dea:	2300      	movs	r3, #0
 8008dec:	2200      	movs	r2, #0
 8008dee:	2100      	movs	r1, #0
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f003 f97f 	bl	800c0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <__NVIC_SetPriority>:
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	6039      	str	r1, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	db0a      	blt.n	8008e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	490c      	ldr	r1, [pc, #48]	; (8008e4c <__NVIC_SetPriority+0x4c>)
 8008e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e1e:	0112      	lsls	r2, r2, #4
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	440b      	add	r3, r1
 8008e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e28:	e00a      	b.n	8008e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	4908      	ldr	r1, [pc, #32]	; (8008e50 <__NVIC_SetPriority+0x50>)
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	3b04      	subs	r3, #4
 8008e38:	0112      	lsls	r2, r2, #4
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	761a      	strb	r2, [r3, #24]
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	e000e100 	.word	0xe000e100
 8008e50:	e000ed00 	.word	0xe000ed00

08008e54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <SysTick_Handler+0x1c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e5c:	f001 fcfe 	bl	800a85c <xTaskGetSchedulerState>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d001      	beq.n	8008e6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e66:	f002 fae7 	bl	800b438 <xPortSysTickHandler>
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	e000e010 	.word	0xe000e010

08008e74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e78:	2100      	movs	r1, #0
 8008e7a:	f06f 0004 	mvn.w	r0, #4
 8008e7e:	f7ff ffbf 	bl	8008e00 <__NVIC_SetPriority>
#endif
}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8e:	f3ef 8305 	mrs	r3, IPSR
 8008e92:	603b      	str	r3, [r7, #0]
  return(result);
 8008e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e9a:	f06f 0305 	mvn.w	r3, #5
 8008e9e:	607b      	str	r3, [r7, #4]
 8008ea0:	e00c      	b.n	8008ebc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <osKernelInitialize+0x44>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008eaa:	4b08      	ldr	r3, [pc, #32]	; (8008ecc <osKernelInitialize+0x44>)
 8008eac:	2201      	movs	r2, #1
 8008eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	e002      	b.n	8008ebc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ebc:	687b      	ldr	r3, [r7, #4]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000618 	.word	0x20000618

08008ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed6:	f3ef 8305 	mrs	r3, IPSR
 8008eda:	603b      	str	r3, [r7, #0]
  return(result);
 8008edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ee2:	f06f 0305 	mvn.w	r3, #5
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	e010      	b.n	8008f0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <osKernelStart+0x48>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d109      	bne.n	8008f06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ef2:	f7ff ffbf 	bl	8008e74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ef6:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <osKernelStart+0x48>)
 8008ef8:	2202      	movs	r2, #2
 8008efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008efc:	f001 f866 	bl	8009fcc <vTaskStartScheduler>
      stat = osOK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e002      	b.n	8008f0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f06:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f0c:	687b      	ldr	r3, [r7, #4]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000618 	.word	0x20000618

08008f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08e      	sub	sp, #56	; 0x38
 8008f20:	af04      	add	r7, sp, #16
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f2c:	f3ef 8305 	mrs	r3, IPSR
 8008f30:	617b      	str	r3, [r7, #20]
  return(result);
 8008f32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d17e      	bne.n	8009036 <osThreadNew+0x11a>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d07b      	beq.n	8009036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f3e:	2380      	movs	r3, #128	; 0x80
 8008f40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f42:	2318      	movs	r3, #24
 8008f44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d045      	beq.n	8008fe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <osThreadNew+0x48>
        name = attr->name;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <osThreadNew+0x6e>
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b38      	cmp	r3, #56	; 0x38
 8008f7c:	d805      	bhi.n	8008f8a <osThreadNew+0x6e>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <osThreadNew+0x72>
        return (NULL);
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e054      	b.n	8009038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	089b      	lsrs	r3, r3, #2
 8008f9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00e      	beq.n	8008fc4 <osThreadNew+0xa8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	2b5b      	cmp	r3, #91	; 0x5b
 8008fac:	d90a      	bls.n	8008fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <osThreadNew+0xa8>
        mem = 1;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	e010      	b.n	8008fe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10c      	bne.n	8008fe6 <osThreadNew+0xca>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d108      	bne.n	8008fe6 <osThreadNew+0xca>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <osThreadNew+0xca>
          mem = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	61bb      	str	r3, [r7, #24]
 8008fe0:	e001      	b.n	8008fe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d110      	bne.n	800900e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ff4:	9202      	str	r2, [sp, #8]
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	6a3a      	ldr	r2, [r7, #32]
 8009000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 fe0c 	bl	8009c20 <xTaskCreateStatic>
 8009008:	4603      	mov	r3, r0
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	e013      	b.n	8009036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d110      	bne.n	8009036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	b29a      	uxth	r2, r3
 8009018:	f107 0310 	add.w	r3, r7, #16
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fe57 	bl	8009cda <xTaskCreate>
 800902c:	4603      	mov	r3, r0
 800902e:	2b01      	cmp	r3, #1
 8009030:	d001      	beq.n	8009036 <osThreadNew+0x11a>
            hTask = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009036:	693b      	ldr	r3, [r7, #16]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3728      	adds	r7, #40	; 0x28
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009048:	f3ef 8305 	mrs	r3, IPSR
 800904c:	60bb      	str	r3, [r7, #8]
  return(result);
 800904e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <osDelay+0x1c>
    stat = osErrorISR;
 8009054:	f06f 0305 	mvn.w	r3, #5
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	e007      	b.n	800906c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 ff7c 	bl	8009f64 <vTaskDelay>
    }
  }

  return (stat);
 800906c:	68fb      	ldr	r3, [r7, #12]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4a07      	ldr	r2, [pc, #28]	; (80090a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4a06      	ldr	r2, [pc, #24]	; (80090a8 <vApplicationGetIdleTaskMemory+0x30>)
 800908e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2280      	movs	r2, #128	; 0x80
 8009094:	601a      	str	r2, [r3, #0]
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	2000061c 	.word	0x2000061c
 80090a8:	20000678 	.word	0x20000678

080090ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a07      	ldr	r2, [pc, #28]	; (80090d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80090bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4a06      	ldr	r2, [pc, #24]	; (80090dc <vApplicationGetTimerTaskMemory+0x30>)
 80090c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090ca:	601a      	str	r2, [r3, #0]
}
 80090cc:	bf00      	nop
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	20000878 	.word	0x20000878
 80090dc:	200008d4 	.word	0x200008d4

080090e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f103 0208 	add.w	r2, r3, #8
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295
 80090f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f103 0208 	add.w	r2, r3, #8
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f103 0208 	add.w	r2, r3, #8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	601a      	str	r2, [r3, #0]
}
 8009176:	bf00      	nop
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009182:	b480      	push	{r7}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009198:	d103      	bne.n	80091a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e00c      	b.n	80091bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3308      	adds	r3, #8
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e002      	b.n	80091b0 <vListInsert+0x2e>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d2f6      	bcs.n	80091aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	601a      	str	r2, [r3, #0]
}
 80091e8:	bf00      	nop
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	6892      	ldr	r2, [r2, #8]
 800920a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6852      	ldr	r2, [r2, #4]
 8009214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	429a      	cmp	r2, r3
 800921e:	d103      	bne.n	8009228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	1e5a      	subs	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009272:	f002 f84f 	bl	800b314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	441a      	add	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	3b01      	subs	r3, #1
 80092a4:	68f9      	ldr	r1, [r7, #12]
 80092a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	441a      	add	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	22ff      	movs	r2, #255	; 0xff
 80092b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	22ff      	movs	r2, #255	; 0xff
 80092be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d114      	bne.n	80092f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01a      	beq.n	8009306 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3310      	adds	r3, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 f903 	bl	800a4e0 <xTaskRemoveFromEventList>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d012      	beq.n	8009306 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092e0:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <xQueueGenericReset+0xcc>)
 80092e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	e009      	b.n	8009306 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3310      	adds	r3, #16
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fef2 	bl	80090e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff feed 	bl	80090e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009306:	f002 f835 	bl	800b374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800930a:	2301      	movs	r3, #1
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08e      	sub	sp, #56	; 0x38
 800931c:	af02      	add	r7, sp, #8
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <xQueueGenericCreateStatic+0x52>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <xQueueGenericCreateStatic+0x56>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <xQueueGenericCreateStatic+0x58>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	623b      	str	r3, [r7, #32]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <xQueueGenericCreateStatic+0x7e>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <xQueueGenericCreateStatic+0x82>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <xQueueGenericCreateStatic+0x84>
 800939a:	2300      	movs	r3, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	61fb      	str	r3, [r7, #28]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093b6:	2350      	movs	r3, #80	; 0x50
 80093b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b50      	cmp	r3, #80	; 0x50
 80093be:	d00a      	beq.n	80093d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	61bb      	str	r3, [r7, #24]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00d      	beq.n	80093fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4613      	mov	r3, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f805 	bl	8009408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009400:	4618      	mov	r0, r3
 8009402:	3730      	adds	r7, #48	; 0x30
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	e002      	b.n	800942a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009436:	2101      	movs	r1, #1
 8009438:	69b8      	ldr	r0, [r7, #24]
 800943a:	f7ff ff05 	bl	8009248 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009446:	bf00      	nop
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08e      	sub	sp, #56	; 0x38
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800945e:	2300      	movs	r3, #0
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xQueueGenericSend+0x32>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d103      	bne.n	8009490 <xQueueGenericSend+0x40>
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <xQueueGenericSend+0x44>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <xQueueGenericSend+0x46>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <xQueueGenericSend+0x60>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d103      	bne.n	80094be <xQueueGenericSend+0x6e>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d101      	bne.n	80094c2 <xQueueGenericSend+0x72>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <xQueueGenericSend+0x74>
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xQueueGenericSend+0x8e>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	623b      	str	r3, [r7, #32]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094de:	f001 f9bd 	bl	800a85c <xTaskGetSchedulerState>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <xQueueGenericSend+0x9e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <xQueueGenericSend+0xa2>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e000      	b.n	80094f4 <xQueueGenericSend+0xa4>
 80094f2:	2300      	movs	r3, #0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <xQueueGenericSend+0xbe>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	61fb      	str	r3, [r7, #28]
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800950e:	f001 ff01 	bl	800b314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	429a      	cmp	r2, r3
 800951c:	d302      	bcc.n	8009524 <xQueueGenericSend+0xd4>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d129      	bne.n	8009578 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952a:	f000 fa0b 	bl	8009944 <prvCopyDataToQueue>
 800952e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	d010      	beq.n	800955a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	3324      	adds	r3, #36	; 0x24
 800953c:	4618      	mov	r0, r3
 800953e:	f000 ffcf 	bl	800a4e0 <xTaskRemoveFromEventList>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d013      	beq.n	8009570 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009548:	4b3f      	ldr	r3, [pc, #252]	; (8009648 <xQueueGenericSend+0x1f8>)
 800954a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	e00a      	b.n	8009570 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009560:	4b39      	ldr	r3, [pc, #228]	; (8009648 <xQueueGenericSend+0x1f8>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009570:	f001 ff00 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 8009574:	2301      	movs	r3, #1
 8009576:	e063      	b.n	8009640 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800957e:	f001 fef9 	bl	800b374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009582:	2300      	movs	r3, #0
 8009584:	e05c      	b.n	8009640 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800958c:	f107 0314 	add.w	r3, r7, #20
 8009590:	4618      	mov	r0, r3
 8009592:	f001 f809 	bl	800a5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009596:	2301      	movs	r3, #1
 8009598:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800959a:	f001 feeb 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800959e:	f000 fd7b 	bl	800a098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095a2:	f001 feb7 	bl	800b314 <vPortEnterCritical>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095ac:	b25b      	sxtb	r3, r3
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d103      	bne.n	80095bc <xQueueGenericSend+0x16c>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c2:	b25b      	sxtb	r3, r3
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d103      	bne.n	80095d2 <xQueueGenericSend+0x182>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095d2:	f001 fecf 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d6:	1d3a      	adds	r2, r7, #4
 80095d8:	f107 0314 	add.w	r3, r7, #20
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fff8 	bl	800a5d4 <xTaskCheckForTimeOut>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d124      	bne.n	8009634 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ec:	f000 faa2 	bl	8009b34 <prvIsQueueFull>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d018      	beq.n	8009628 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	3310      	adds	r3, #16
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 ff1e 	bl	800a440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009606:	f000 fa2d 	bl	8009a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800960a:	f000 fd53 	bl	800a0b4 <xTaskResumeAll>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	f47f af7c 	bne.w	800950e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009616:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <xQueueGenericSend+0x1f8>)
 8009618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	e772      	b.n	800950e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800962a:	f000 fa1b 	bl	8009a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800962e:	f000 fd41 	bl	800a0b4 <xTaskResumeAll>
 8009632:	e76c      	b.n	800950e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009636:	f000 fa15 	bl	8009a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800963a:	f000 fd3b 	bl	800a0b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800963e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009640:	4618      	mov	r0, r3
 8009642:	3738      	adds	r7, #56	; 0x38
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b090      	sub	sp, #64	; 0x40
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009676:	bf00      	nop
 8009678:	e7fe      	b.n	8009678 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <xQueueGenericSendFromISR+0x3c>
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <xQueueGenericSendFromISR+0x40>
 8009688:	2301      	movs	r3, #1
 800968a:	e000      	b.n	800968e <xQueueGenericSendFromISR+0x42>
 800968c:	2300      	movs	r3, #0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10a      	bne.n	80096a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d103      	bne.n	80096b6 <xQueueGenericSendFromISR+0x6a>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <xQueueGenericSendFromISR+0x6e>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e000      	b.n	80096bc <xQueueGenericSendFromISR+0x70>
 80096ba:	2300      	movs	r3, #0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	623b      	str	r3, [r7, #32]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096d6:	f001 feff 	bl	800b4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096da:	f3ef 8211 	mrs	r2, BASEPRI
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	61fa      	str	r2, [r7, #28]
 80096f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	429a      	cmp	r2, r3
 8009700:	d302      	bcc.n	8009708 <xQueueGenericSendFromISR+0xbc>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d12f      	bne.n	8009768 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800971e:	f000 f911 	bl	8009944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009722:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972a:	d112      	bne.n	8009752 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	d016      	beq.n	8009762 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	3324      	adds	r3, #36	; 0x24
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fed1 	bl	800a4e0 <xTaskRemoveFromEventList>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00e      	beq.n	8009762 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00b      	beq.n	8009762 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	e007      	b.n	8009762 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009756:	3301      	adds	r3, #1
 8009758:	b2db      	uxtb	r3, r3
 800975a:	b25a      	sxtb	r2, r3
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009762:	2301      	movs	r3, #1
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009766:	e001      	b.n	800976c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009776:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800977a:	4618      	mov	r0, r3
 800977c:	3740      	adds	r7, #64	; 0x40
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08c      	sub	sp, #48	; 0x30
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <xQueueReceive+0x30>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	623b      	str	r3, [r7, #32]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <xQueueReceive+0x3e>
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <xQueueReceive+0x42>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <xQueueReceive+0x44>
 80097c6:	2300      	movs	r3, #0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xQueueReceive+0x5e>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61fb      	str	r3, [r7, #28]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097e2:	f001 f83b 	bl	800a85c <xTaskGetSchedulerState>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <xQueueReceive+0x6e>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <xQueueReceive+0x72>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <xQueueReceive+0x74>
 80097f6:	2300      	movs	r3, #0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <xQueueReceive+0x8e>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61bb      	str	r3, [r7, #24]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009812:	f001 fd7f 	bl	800b314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	d01f      	beq.n	8009862 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009826:	f000 f8f7 	bl	8009a18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	1e5a      	subs	r2, r3, #1
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00f      	beq.n	800985a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	3310      	adds	r3, #16
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fe4e 	bl	800a4e0 <xTaskRemoveFromEventList>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d007      	beq.n	800985a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800984a:	4b3d      	ldr	r3, [pc, #244]	; (8009940 <xQueueReceive+0x1bc>)
 800984c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800985a:	f001 fd8b 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 800985e:	2301      	movs	r3, #1
 8009860:	e069      	b.n	8009936 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d103      	bne.n	8009870 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009868:	f001 fd84 	bl	800b374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800986c:	2300      	movs	r3, #0
 800986e:	e062      	b.n	8009936 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009876:	f107 0310 	add.w	r3, r7, #16
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fe94 	bl	800a5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009884:	f001 fd76 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009888:	f000 fc06 	bl	800a098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988c:	f001 fd42 	bl	800b314 <vPortEnterCritical>
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009896:	b25b      	sxtb	r3, r3
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989c:	d103      	bne.n	80098a6 <xQueueReceive+0x122>
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ac:	b25b      	sxtb	r3, r3
 80098ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b2:	d103      	bne.n	80098bc <xQueueReceive+0x138>
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098bc:	f001 fd5a 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098c0:	1d3a      	adds	r2, r7, #4
 80098c2:	f107 0310 	add.w	r3, r7, #16
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fe83 	bl	800a5d4 <xTaskCheckForTimeOut>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d123      	bne.n	800991c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d6:	f000 f917 	bl	8009b08 <prvIsQueueEmpty>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d017      	beq.n	8009910 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	3324      	adds	r3, #36	; 0x24
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 fda9 	bl	800a440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f0:	f000 f8b8 	bl	8009a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098f4:	f000 fbde 	bl	800a0b4 <xTaskResumeAll>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d189      	bne.n	8009812 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80098fe:	4b10      	ldr	r3, [pc, #64]	; (8009940 <xQueueReceive+0x1bc>)
 8009900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	e780      	b.n	8009812 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009912:	f000 f8a7 	bl	8009a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009916:	f000 fbcd 	bl	800a0b4 <xTaskResumeAll>
 800991a:	e77a      	b.n	8009812 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800991c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991e:	f000 f8a1 	bl	8009a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009922:	f000 fbc7 	bl	800a0b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009928:	f000 f8ee 	bl	8009b08 <prvIsQueueEmpty>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	f43f af6f 	beq.w	8009812 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009936:	4618      	mov	r0, r3
 8009938:	3730      	adds	r7, #48	; 0x30
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10d      	bne.n	800997e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d14d      	bne.n	8009a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 ff92 	bl	800a898 <xTaskPriorityDisinherit>
 8009974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	609a      	str	r2, [r3, #8]
 800997c:	e043      	b.n	8009a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d119      	bne.n	80099b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6858      	ldr	r0, [r3, #4]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	461a      	mov	r2, r3
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	f008 fd82 	bl	8012498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999c:	441a      	add	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d32b      	bcc.n	8009a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	605a      	str	r2, [r3, #4]
 80099b6:	e026      	b.n	8009a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	68d8      	ldr	r0, [r3, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	461a      	mov	r2, r3
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	f008 fd68 	bl	8012498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d0:	425b      	negs	r3, r3
 80099d2:	441a      	add	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d207      	bcs.n	80099f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	425b      	negs	r3, r3
 80099ee:	441a      	add	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d105      	bne.n	8009a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a0e:	697b      	ldr	r3, [r7, #20]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d018      	beq.n	8009a5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	441a      	add	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d303      	bcc.n	8009a4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68d9      	ldr	r1, [r3, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	461a      	mov	r2, r3
 8009a56:	6838      	ldr	r0, [r7, #0]
 8009a58:	f008 fd1e 	bl	8012498 <memcpy>
	}
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a6c:	f001 fc52 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a78:	e011      	b.n	8009a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d012      	beq.n	8009aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fd2a 	bl	800a4e0 <xTaskRemoveFromEventList>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a92:	f000 fe01 	bl	800a698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dce9      	bgt.n	8009a7a <prvUnlockQueue+0x16>
 8009aa6:	e000      	b.n	8009aaa <prvUnlockQueue+0x46>
					break;
 8009aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	22ff      	movs	r2, #255	; 0xff
 8009aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ab2:	f001 fc5f 	bl	800b374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ab6:	f001 fc2d 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ac2:	e011      	b.n	8009ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d012      	beq.n	8009af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3310      	adds	r3, #16
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fd05 	bl	800a4e0 <xTaskRemoveFromEventList>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009adc:	f000 fddc 	bl	800a698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dce9      	bgt.n	8009ac4 <prvUnlockQueue+0x60>
 8009af0:	e000      	b.n	8009af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	22ff      	movs	r2, #255	; 0xff
 8009af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009afc:	f001 fc3a 	bl	800b374 <vPortExitCritical>
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b10:	f001 fc00 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	e001      	b.n	8009b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b26:	f001 fc25 	bl	800b374 <vPortExitCritical>

	return xReturn;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b3c:	f001 fbea 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d102      	bne.n	8009b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e001      	b.n	8009b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b56:	f001 fc0d 	bl	800b374 <vPortExitCritical>

	return xReturn;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	e014      	b.n	8009b9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b74:	4a0f      	ldr	r2, [pc, #60]	; (8009bb4 <vQueueAddToRegistry+0x50>)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b80:	490c      	ldr	r1, [pc, #48]	; (8009bb4 <vQueueAddToRegistry+0x50>)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b8a:	4a0a      	ldr	r2, [pc, #40]	; (8009bb4 <vQueueAddToRegistry+0x50>)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	4413      	add	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b96:	e006      	b.n	8009ba6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	60fb      	str	r3, [r7, #12]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b07      	cmp	r3, #7
 8009ba2:	d9e7      	bls.n	8009b74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20004f90 	.word	0x20004f90

08009bb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009bc8:	f001 fba4 	bl	800b314 <vPortEnterCritical>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d103      	bne.n	8009be2 <vQueueWaitForMessageRestricted+0x2a>
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009be8:	b25b      	sxtb	r3, r3
 8009bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bee:	d103      	bne.n	8009bf8 <vQueueWaitForMessageRestricted+0x40>
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf8:	f001 fbbc 	bl	800b374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d106      	bne.n	8009c12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	3324      	adds	r3, #36	; 0x24
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fc3b 	bl	800a488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c12:	6978      	ldr	r0, [r7, #20]
 8009c14:	f7ff ff26 	bl	8009a64 <prvUnlockQueue>
	}
 8009c18:	bf00      	nop
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08e      	sub	sp, #56	; 0x38
 8009c24:	af04      	add	r7, sp, #16
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	623b      	str	r3, [r7, #32]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xTaskCreateStatic+0x46>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	61fb      	str	r3, [r7, #28]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c66:	235c      	movs	r3, #92	; 0x5c
 8009c68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c6e:	d00a      	beq.n	8009c86 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	61bb      	str	r3, [r7, #24]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01e      	beq.n	8009ccc <xTaskCreateStatic+0xac>
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d01b      	beq.n	8009ccc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9303      	str	r3, [sp, #12]
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	f107 0314 	add.w	r3, r7, #20
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	68b9      	ldr	r1, [r7, #8]
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 f850 	bl	8009d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cc6:	f000 f8dd 	bl	8009e84 <prvAddNewTaskToReadyList>
 8009cca:	e001      	b.n	8009cd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cd0:	697b      	ldr	r3, [r7, #20]
	}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3728      	adds	r7, #40	; 0x28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b08c      	sub	sp, #48	; 0x30
 8009cde:	af04      	add	r7, sp, #16
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	603b      	str	r3, [r7, #0]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 fc32 	bl	800b558 <pvPortMalloc>
 8009cf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00e      	beq.n	8009d1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cfc:	205c      	movs	r0, #92	; 0x5c
 8009cfe:	f001 fc2b 	bl	800b558 <pvPortMalloc>
 8009d02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8009d10:	e005      	b.n	8009d1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f001 fcec 	bl	800b6f0 <vPortFree>
 8009d18:	e001      	b.n	8009d1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	9303      	str	r3, [sp, #12]
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	9302      	str	r3, [sp, #8]
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 f80e 	bl	8009d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d48:	69f8      	ldr	r0, [r7, #28]
 8009d4a:	f000 f89b 	bl	8009e84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	e002      	b.n	8009d5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	21a5      	movs	r1, #165	; 0xa5
 8009d7e:	f008 fb99 	bl	80124b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	f023 0307 	bic.w	r3, r3, #7
 8009d9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	617b      	str	r3, [r7, #20]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d01f      	beq.n	8009e02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61fb      	str	r3, [r7, #28]
 8009dc6:	e012      	b.n	8009dee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	7819      	ldrb	r1, [r3, #0]
 8009dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	3334      	adds	r3, #52	; 0x34
 8009dd8:	460a      	mov	r2, r1
 8009dda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d006      	beq.n	8009df6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	3301      	adds	r3, #1
 8009dec:	61fb      	str	r3, [r7, #28]
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	2b0f      	cmp	r3, #15
 8009df2:	d9e9      	bls.n	8009dc8 <prvInitialiseNewTask+0x64>
 8009df4:	e000      	b.n	8009df8 <prvInitialiseNewTask+0x94>
			{
				break;
 8009df6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e00:	e003      	b.n	8009e0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0c:	2b37      	cmp	r3, #55	; 0x37
 8009e0e:	d901      	bls.n	8009e14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e10:	2337      	movs	r3, #55	; 0x37
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	2200      	movs	r2, #0
 8009e24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff f978 	bl	8009120 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	3318      	adds	r3, #24
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff f973 	bl	8009120 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	2200      	movs	r2, #0
 8009e54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	68f9      	ldr	r1, [r7, #12]
 8009e62:	69b8      	ldr	r0, [r7, #24]
 8009e64:	f001 f928 	bl	800b0b8 <pxPortInitialiseStack>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e7a:	bf00      	nop
 8009e7c:	3720      	adds	r7, #32
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e8c:	f001 fa42 	bl	800b314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e90:	4b2d      	ldr	r3, [pc, #180]	; (8009f48 <prvAddNewTaskToReadyList+0xc4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3301      	adds	r3, #1
 8009e96:	4a2c      	ldr	r2, [pc, #176]	; (8009f48 <prvAddNewTaskToReadyList+0xc4>)
 8009e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e9a:	4b2c      	ldr	r3, [pc, #176]	; (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ea8:	4b27      	ldr	r3, [pc, #156]	; (8009f48 <prvAddNewTaskToReadyList+0xc4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d110      	bne.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009eb0:	f000 fc16 	bl	800a6e0 <prvInitialiseTaskLists>
 8009eb4:	e00d      	b.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009eb6:	4b26      	ldr	r3, [pc, #152]	; (8009f50 <prvAddNewTaskToReadyList+0xcc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ebe:	4b23      	ldr	r3, [pc, #140]	; (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d802      	bhi.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ed2:	4b20      	ldr	r3, [pc, #128]	; (8009f54 <prvAddNewTaskToReadyList+0xd0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	4a1e      	ldr	r2, [pc, #120]	; (8009f54 <prvAddNewTaskToReadyList+0xd0>)
 8009eda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009edc:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <prvAddNewTaskToReadyList+0xd0>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee8:	4b1b      	ldr	r3, [pc, #108]	; (8009f58 <prvAddNewTaskToReadyList+0xd4>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d903      	bls.n	8009ef8 <prvAddNewTaskToReadyList+0x74>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	4a18      	ldr	r2, [pc, #96]	; (8009f58 <prvAddNewTaskToReadyList+0xd4>)
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4a15      	ldr	r2, [pc, #84]	; (8009f5c <prvAddNewTaskToReadyList+0xd8>)
 8009f06:	441a      	add	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f7ff f913 	bl	800913a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f14:	f001 fa2e 	bl	800b374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f18:	4b0d      	ldr	r3, [pc, #52]	; (8009f50 <prvAddNewTaskToReadyList+0xcc>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00e      	beq.n	8009f3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d207      	bcs.n	8009f3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <prvAddNewTaskToReadyList+0xdc>)
 8009f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200011a8 	.word	0x200011a8
 8009f4c:	20000cd4 	.word	0x20000cd4
 8009f50:	200011b4 	.word	0x200011b4
 8009f54:	200011c4 	.word	0x200011c4
 8009f58:	200011b0 	.word	0x200011b0
 8009f5c:	20000cd8 	.word	0x20000cd8
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d017      	beq.n	8009fa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f76:	4b13      	ldr	r3, [pc, #76]	; (8009fc4 <vTaskDelay+0x60>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <vTaskDelay+0x30>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f94:	f000 f880 	bl	800a098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fcea 	bl	800a974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fa0:	f000 f888 	bl	800a0b4 <xTaskResumeAll>
 8009fa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d107      	bne.n	8009fbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009fac:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <vTaskDelay+0x64>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	200011d0 	.word	0x200011d0
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	; 0x28
 8009fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fda:	463a      	mov	r2, r7
 8009fdc:	1d39      	adds	r1, r7, #4
 8009fde:	f107 0308 	add.w	r3, r7, #8
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff f848 	bl	8009078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	9202      	str	r2, [sp, #8]
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	460a      	mov	r2, r1
 8009ffa:	4921      	ldr	r1, [pc, #132]	; (800a080 <vTaskStartScheduler+0xb4>)
 8009ffc:	4821      	ldr	r0, [pc, #132]	; (800a084 <vTaskStartScheduler+0xb8>)
 8009ffe:	f7ff fe0f 	bl	8009c20 <xTaskCreateStatic>
 800a002:	4603      	mov	r3, r0
 800a004:	4a20      	ldr	r2, [pc, #128]	; (800a088 <vTaskStartScheduler+0xbc>)
 800a006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a008:	4b1f      	ldr	r3, [pc, #124]	; (800a088 <vTaskStartScheduler+0xbc>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a010:	2301      	movs	r3, #1
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	e001      	b.n	800a01a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d102      	bne.n	800a026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a020:	f000 fcfc 	bl	800aa1c <xTimerCreateTimerTask>
 800a024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d116      	bne.n	800a05a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	613b      	str	r3, [r7, #16]
}
 800a03e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a040:	4b12      	ldr	r3, [pc, #72]	; (800a08c <vTaskStartScheduler+0xc0>)
 800a042:	f04f 32ff 	mov.w	r2, #4294967295
 800a046:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a048:	4b11      	ldr	r3, [pc, #68]	; (800a090 <vTaskStartScheduler+0xc4>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a04e:	4b11      	ldr	r3, [pc, #68]	; (800a094 <vTaskStartScheduler+0xc8>)
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a054:	f001 f8bc 	bl	800b1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a058:	e00e      	b.n	800a078 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a060:	d10a      	bne.n	800a078 <vTaskStartScheduler+0xac>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	60fb      	str	r3, [r7, #12]
}
 800a074:	bf00      	nop
 800a076:	e7fe      	b.n	800a076 <vTaskStartScheduler+0xaa>
}
 800a078:	bf00      	nop
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	0801264c 	.word	0x0801264c
 800a084:	0800a6b1 	.word	0x0800a6b1
 800a088:	200011cc 	.word	0x200011cc
 800a08c:	200011c8 	.word	0x200011c8
 800a090:	200011b4 	.word	0x200011b4
 800a094:	200011ac 	.word	0x200011ac

0800a098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a098:	b480      	push	{r7}
 800a09a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a09c:	4b04      	ldr	r3, [pc, #16]	; (800a0b0 <vTaskSuspendAll+0x18>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	4a03      	ldr	r2, [pc, #12]	; (800a0b0 <vTaskSuspendAll+0x18>)
 800a0a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0a6:	bf00      	nop
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	200011d0 	.word	0x200011d0

0800a0b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0c2:	4b42      	ldr	r3, [pc, #264]	; (800a1cc <xTaskResumeAll+0x118>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	603b      	str	r3, [r7, #0]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0e0:	f001 f918 	bl	800b314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0e4:	4b39      	ldr	r3, [pc, #228]	; (800a1cc <xTaskResumeAll+0x118>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	4a38      	ldr	r2, [pc, #224]	; (800a1cc <xTaskResumeAll+0x118>)
 800a0ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ee:	4b37      	ldr	r3, [pc, #220]	; (800a1cc <xTaskResumeAll+0x118>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d162      	bne.n	800a1bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0f6:	4b36      	ldr	r3, [pc, #216]	; (800a1d0 <xTaskResumeAll+0x11c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d05e      	beq.n	800a1bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0fe:	e02f      	b.n	800a160 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a100:	4b34      	ldr	r3, [pc, #208]	; (800a1d4 <xTaskResumeAll+0x120>)
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3318      	adds	r3, #24
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff f871 	bl	80091f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3304      	adds	r3, #4
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff f86c 	bl	80091f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	4b2d      	ldr	r3, [pc, #180]	; (800a1d8 <xTaskResumeAll+0x124>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	429a      	cmp	r2, r3
 800a126:	d903      	bls.n	800a130 <xTaskResumeAll+0x7c>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	4a2a      	ldr	r2, [pc, #168]	; (800a1d8 <xTaskResumeAll+0x124>)
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4a27      	ldr	r2, [pc, #156]	; (800a1dc <xTaskResumeAll+0x128>)
 800a13e:	441a      	add	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7fe fff7 	bl	800913a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	4b23      	ldr	r3, [pc, #140]	; (800a1e0 <xTaskResumeAll+0x12c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	429a      	cmp	r2, r3
 800a158:	d302      	bcc.n	800a160 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a15a:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <xTaskResumeAll+0x130>)
 800a15c:	2201      	movs	r2, #1
 800a15e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a160:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <xTaskResumeAll+0x120>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1cb      	bne.n	800a100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a16e:	f000 fb55 	bl	800a81c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a172:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <xTaskResumeAll+0x134>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d010      	beq.n	800a1a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a17e:	f000 f847 	bl	800a210 <xTaskIncrementTick>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a188:	4b16      	ldr	r3, [pc, #88]	; (800a1e4 <xTaskResumeAll+0x130>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3b01      	subs	r3, #1
 800a192:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1f1      	bne.n	800a17e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a19a:	4b13      	ldr	r3, [pc, #76]	; (800a1e8 <xTaskResumeAll+0x134>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1a0:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <xTaskResumeAll+0x130>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d009      	beq.n	800a1bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1ac:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <xTaskResumeAll+0x138>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1bc:	f001 f8da 	bl	800b374 <vPortExitCritical>

	return xAlreadyYielded;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200011d0 	.word	0x200011d0
 800a1d0:	200011a8 	.word	0x200011a8
 800a1d4:	20001168 	.word	0x20001168
 800a1d8:	200011b0 	.word	0x200011b0
 800a1dc:	20000cd8 	.word	0x20000cd8
 800a1e0:	20000cd4 	.word	0x20000cd4
 800a1e4:	200011bc 	.word	0x200011bc
 800a1e8:	200011b8 	.word	0x200011b8
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1f6:	4b05      	ldr	r3, [pc, #20]	; (800a20c <xTaskGetTickCount+0x1c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1fc:	687b      	ldr	r3, [r7, #4]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	200011ac 	.word	0x200011ac

0800a210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a21a:	4b4f      	ldr	r3, [pc, #316]	; (800a358 <xTaskIncrementTick+0x148>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f040 808f 	bne.w	800a342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a224:	4b4d      	ldr	r3, [pc, #308]	; (800a35c <xTaskIncrementTick+0x14c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3301      	adds	r3, #1
 800a22a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a22c:	4a4b      	ldr	r2, [pc, #300]	; (800a35c <xTaskIncrementTick+0x14c>)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d120      	bne.n	800a27a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a238:	4b49      	ldr	r3, [pc, #292]	; (800a360 <xTaskIncrementTick+0x150>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <xTaskIncrementTick+0x48>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	603b      	str	r3, [r7, #0]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xTaskIncrementTick+0x46>
 800a258:	4b41      	ldr	r3, [pc, #260]	; (800a360 <xTaskIncrementTick+0x150>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	4b41      	ldr	r3, [pc, #260]	; (800a364 <xTaskIncrementTick+0x154>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a3f      	ldr	r2, [pc, #252]	; (800a360 <xTaskIncrementTick+0x150>)
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	4a3f      	ldr	r2, [pc, #252]	; (800a364 <xTaskIncrementTick+0x154>)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	4b3e      	ldr	r3, [pc, #248]	; (800a368 <xTaskIncrementTick+0x158>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3301      	adds	r3, #1
 800a272:	4a3d      	ldr	r2, [pc, #244]	; (800a368 <xTaskIncrementTick+0x158>)
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	f000 fad1 	bl	800a81c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a27a:	4b3c      	ldr	r3, [pc, #240]	; (800a36c <xTaskIncrementTick+0x15c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	429a      	cmp	r2, r3
 800a282:	d349      	bcc.n	800a318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a284:	4b36      	ldr	r3, [pc, #216]	; (800a360 <xTaskIncrementTick+0x150>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a28e:	4b37      	ldr	r3, [pc, #220]	; (800a36c <xTaskIncrementTick+0x15c>)
 800a290:	f04f 32ff 	mov.w	r2, #4294967295
 800a294:	601a      	str	r2, [r3, #0]
					break;
 800a296:	e03f      	b.n	800a318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a298:	4b31      	ldr	r3, [pc, #196]	; (800a360 <xTaskIncrementTick+0x150>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d203      	bcs.n	800a2b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2b0:	4a2e      	ldr	r2, [pc, #184]	; (800a36c <xTaskIncrementTick+0x15c>)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2b6:	e02f      	b.n	800a318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe ff99 	bl	80091f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d004      	beq.n	800a2d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	3318      	adds	r3, #24
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe ff90 	bl	80091f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d8:	4b25      	ldr	r3, [pc, #148]	; (800a370 <xTaskIncrementTick+0x160>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d903      	bls.n	800a2e8 <xTaskIncrementTick+0xd8>
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	4a22      	ldr	r2, [pc, #136]	; (800a370 <xTaskIncrementTick+0x160>)
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4a1f      	ldr	r2, [pc, #124]	; (800a374 <xTaskIncrementTick+0x164>)
 800a2f6:	441a      	add	r2, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7fe ff1b 	bl	800913a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a308:	4b1b      	ldr	r3, [pc, #108]	; (800a378 <xTaskIncrementTick+0x168>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30e:	429a      	cmp	r2, r3
 800a310:	d3b8      	bcc.n	800a284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a312:	2301      	movs	r3, #1
 800a314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a316:	e7b5      	b.n	800a284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a318:	4b17      	ldr	r3, [pc, #92]	; (800a378 <xTaskIncrementTick+0x168>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31e:	4915      	ldr	r1, [pc, #84]	; (800a374 <xTaskIncrementTick+0x164>)
 800a320:	4613      	mov	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d901      	bls.n	800a334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a330:	2301      	movs	r3, #1
 800a332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a334:	4b11      	ldr	r3, [pc, #68]	; (800a37c <xTaskIncrementTick+0x16c>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d007      	beq.n	800a34c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e004      	b.n	800a34c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a342:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <xTaskIncrementTick+0x170>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	4a0d      	ldr	r2, [pc, #52]	; (800a380 <xTaskIncrementTick+0x170>)
 800a34a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a34c:	697b      	ldr	r3, [r7, #20]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200011d0 	.word	0x200011d0
 800a35c:	200011ac 	.word	0x200011ac
 800a360:	20001160 	.word	0x20001160
 800a364:	20001164 	.word	0x20001164
 800a368:	200011c0 	.word	0x200011c0
 800a36c:	200011c8 	.word	0x200011c8
 800a370:	200011b0 	.word	0x200011b0
 800a374:	20000cd8 	.word	0x20000cd8
 800a378:	20000cd4 	.word	0x20000cd4
 800a37c:	200011bc 	.word	0x200011bc
 800a380:	200011b8 	.word	0x200011b8

0800a384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a38a:	4b28      	ldr	r3, [pc, #160]	; (800a42c <vTaskSwitchContext+0xa8>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a392:	4b27      	ldr	r3, [pc, #156]	; (800a430 <vTaskSwitchContext+0xac>)
 800a394:	2201      	movs	r2, #1
 800a396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a398:	e041      	b.n	800a41e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a39a:	4b25      	ldr	r3, [pc, #148]	; (800a430 <vTaskSwitchContext+0xac>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a0:	4b24      	ldr	r3, [pc, #144]	; (800a434 <vTaskSwitchContext+0xb0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60fb      	str	r3, [r7, #12]
 800a3a6:	e010      	b.n	800a3ca <vTaskSwitchContext+0x46>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	607b      	str	r3, [r7, #4]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <vTaskSwitchContext+0x3e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	491b      	ldr	r1, [pc, #108]	; (800a438 <vTaskSwitchContext+0xb4>)
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0e4      	beq.n	800a3a8 <vTaskSwitchContext+0x24>
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4a13      	ldr	r2, [pc, #76]	; (800a438 <vTaskSwitchContext+0xb4>)
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60bb      	str	r3, [r7, #8]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	605a      	str	r2, [r3, #4]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	3308      	adds	r3, #8
 800a400:	429a      	cmp	r2, r3
 800a402:	d104      	bne.n	800a40e <vTaskSwitchContext+0x8a>
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	4a09      	ldr	r2, [pc, #36]	; (800a43c <vTaskSwitchContext+0xb8>)
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	4a06      	ldr	r2, [pc, #24]	; (800a434 <vTaskSwitchContext+0xb0>)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6013      	str	r3, [r2, #0]
}
 800a41e:	bf00      	nop
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	200011d0 	.word	0x200011d0
 800a430:	200011bc 	.word	0x200011bc
 800a434:	200011b0 	.word	0x200011b0
 800a438:	20000cd8 	.word	0x20000cd8
 800a43c:	20000cd4 	.word	0x20000cd4

0800a440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	60fb      	str	r3, [r7, #12]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a466:	4b07      	ldr	r3, [pc, #28]	; (800a484 <vTaskPlaceOnEventList+0x44>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3318      	adds	r3, #24
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7fe fe87 	bl	8009182 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a474:	2101      	movs	r1, #1
 800a476:	6838      	ldr	r0, [r7, #0]
 800a478:	f000 fa7c 	bl	800a974 <prvAddCurrentTaskToDelayedList>
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20000cd4 	.word	0x20000cd4

0800a488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	617b      	str	r3, [r7, #20]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <vTaskPlaceOnEventListRestricted+0x54>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3318      	adds	r3, #24
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7fe fe3e 	bl	800913a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	68b8      	ldr	r0, [r7, #8]
 800a4ce:	f000 fa51 	bl	800a974 <prvAddCurrentTaskToDelayedList>
	}
 800a4d2:	bf00      	nop
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000cd4 	.word	0x20000cd4

0800a4e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60fb      	str	r3, [r7, #12]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	3318      	adds	r3, #24
 800a510:	4618      	mov	r0, r3
 800a512:	f7fe fe6f 	bl	80091f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a516:	4b1e      	ldr	r3, [pc, #120]	; (800a590 <xTaskRemoveFromEventList+0xb0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d11d      	bne.n	800a55a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	3304      	adds	r3, #4
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fe66 	bl	80091f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b19      	ldr	r3, [pc, #100]	; (800a594 <xTaskRemoveFromEventList+0xb4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <xTaskRemoveFromEventList+0x5c>
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	4a16      	ldr	r2, [pc, #88]	; (800a594 <xTaskRemoveFromEventList+0xb4>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a13      	ldr	r2, [pc, #76]	; (800a598 <xTaskRemoveFromEventList+0xb8>)
 800a54a:	441a      	add	r2, r3
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe fdf1 	bl	800913a <vListInsertEnd>
 800a558:	e005      	b.n	800a566 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	3318      	adds	r3, #24
 800a55e:	4619      	mov	r1, r3
 800a560:	480e      	ldr	r0, [pc, #56]	; (800a59c <xTaskRemoveFromEventList+0xbc>)
 800a562:	f7fe fdea 	bl	800913a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56a:	4b0d      	ldr	r3, [pc, #52]	; (800a5a0 <xTaskRemoveFromEventList+0xc0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	429a      	cmp	r2, r3
 800a572:	d905      	bls.n	800a580 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <xTaskRemoveFromEventList+0xc4>)
 800a57a:	2201      	movs	r2, #1
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e001      	b.n	800a584 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a584:	697b      	ldr	r3, [r7, #20]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	200011d0 	.word	0x200011d0
 800a594:	200011b0 	.word	0x200011b0
 800a598:	20000cd8 	.word	0x20000cd8
 800a59c:	20001168 	.word	0x20001168
 800a5a0:	20000cd4 	.word	0x20000cd4
 800a5a4:	200011bc 	.word	0x200011bc

0800a5a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5b0:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <vTaskInternalSetTimeOutState+0x24>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5b8:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <vTaskInternalSetTimeOutState+0x28>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	605a      	str	r2, [r3, #4]
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	200011c0 	.word	0x200011c0
 800a5d0:	200011ac 	.word	0x200011ac

0800a5d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	613b      	str	r3, [r7, #16]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	60fb      	str	r3, [r7, #12]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a616:	f000 fe7d 	bl	800b314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a61a:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <xTaskCheckForTimeOut+0xbc>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d102      	bne.n	800a63a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]
 800a638:	e023      	b.n	800a682 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b15      	ldr	r3, [pc, #84]	; (800a694 <xTaskCheckForTimeOut+0xc0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d007      	beq.n	800a656 <xTaskCheckForTimeOut+0x82>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d302      	bcc.n	800a656 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	e015      	b.n	800a682 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d20b      	bcs.n	800a678 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	1ad2      	subs	r2, r2, r3
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ff9b 	bl	800a5a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a672:	2300      	movs	r3, #0
 800a674:	61fb      	str	r3, [r7, #28]
 800a676:	e004      	b.n	800a682 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a67e:	2301      	movs	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a682:	f000 fe77 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800a686:	69fb      	ldr	r3, [r7, #28]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	200011ac 	.word	0x200011ac
 800a694:	200011c0 	.word	0x200011c0

0800a698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a69c:	4b03      	ldr	r3, [pc, #12]	; (800a6ac <vTaskMissedYield+0x14>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
}
 800a6a2:	bf00      	nop
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	200011bc 	.word	0x200011bc

0800a6b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6b8:	f000 f852 	bl	800a760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <prvIdleTask+0x28>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d9f9      	bls.n	800a6b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <prvIdleTask+0x2c>)
 800a6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6d4:	e7f0      	b.n	800a6b8 <prvIdleTask+0x8>
 800a6d6:	bf00      	nop
 800a6d8:	20000cd8 	.word	0x20000cd8
 800a6dc:	e000ed04 	.word	0xe000ed04

0800a6e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	e00c      	b.n	800a706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4a12      	ldr	r2, [pc, #72]	; (800a740 <prvInitialiseTaskLists+0x60>)
 800a6f8:	4413      	add	r3, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fcf0 	bl	80090e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3301      	adds	r3, #1
 800a704:	607b      	str	r3, [r7, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b37      	cmp	r3, #55	; 0x37
 800a70a:	d9ef      	bls.n	800a6ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a70c:	480d      	ldr	r0, [pc, #52]	; (800a744 <prvInitialiseTaskLists+0x64>)
 800a70e:	f7fe fce7 	bl	80090e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a712:	480d      	ldr	r0, [pc, #52]	; (800a748 <prvInitialiseTaskLists+0x68>)
 800a714:	f7fe fce4 	bl	80090e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a718:	480c      	ldr	r0, [pc, #48]	; (800a74c <prvInitialiseTaskLists+0x6c>)
 800a71a:	f7fe fce1 	bl	80090e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a71e:	480c      	ldr	r0, [pc, #48]	; (800a750 <prvInitialiseTaskLists+0x70>)
 800a720:	f7fe fcde 	bl	80090e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a724:	480b      	ldr	r0, [pc, #44]	; (800a754 <prvInitialiseTaskLists+0x74>)
 800a726:	f7fe fcdb 	bl	80090e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <prvInitialiseTaskLists+0x78>)
 800a72c:	4a05      	ldr	r2, [pc, #20]	; (800a744 <prvInitialiseTaskLists+0x64>)
 800a72e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a730:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <prvInitialiseTaskLists+0x7c>)
 800a732:	4a05      	ldr	r2, [pc, #20]	; (800a748 <prvInitialiseTaskLists+0x68>)
 800a734:	601a      	str	r2, [r3, #0]
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20000cd8 	.word	0x20000cd8
 800a744:	20001138 	.word	0x20001138
 800a748:	2000114c 	.word	0x2000114c
 800a74c:	20001168 	.word	0x20001168
 800a750:	2000117c 	.word	0x2000117c
 800a754:	20001194 	.word	0x20001194
 800a758:	20001160 	.word	0x20001160
 800a75c:	20001164 	.word	0x20001164

0800a760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a766:	e019      	b.n	800a79c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a768:	f000 fdd4 	bl	800b314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a76c:	4b10      	ldr	r3, [pc, #64]	; (800a7b0 <prvCheckTasksWaitingTermination+0x50>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fe fd3b 	bl	80091f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a77e:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <prvCheckTasksWaitingTermination+0x54>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3b01      	subs	r3, #1
 800a784:	4a0b      	ldr	r2, [pc, #44]	; (800a7b4 <prvCheckTasksWaitingTermination+0x54>)
 800a786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a788:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <prvCheckTasksWaitingTermination+0x58>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	4a0a      	ldr	r2, [pc, #40]	; (800a7b8 <prvCheckTasksWaitingTermination+0x58>)
 800a790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a792:	f000 fdef 	bl	800b374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f810 	bl	800a7bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <prvCheckTasksWaitingTermination+0x58>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e1      	bne.n	800a768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	2000117c 	.word	0x2000117c
 800a7b4:	200011a8 	.word	0x200011a8
 800a7b8:	20001190 	.word	0x20001190

0800a7bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d108      	bne.n	800a7e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 ff8c 	bl	800b6f0 <vPortFree>
				vPortFree( pxTCB );
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 ff89 	bl	800b6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7de:	e018      	b.n	800a812 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d103      	bne.n	800a7f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 ff80 	bl	800b6f0 <vPortFree>
	}
 800a7f0:	e00f      	b.n	800a812 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d00a      	beq.n	800a812 <prvDeleteTCB+0x56>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	60fb      	str	r3, [r7, #12]
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <prvDeleteTCB+0x54>
	}
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a822:	4b0c      	ldr	r3, [pc, #48]	; (800a854 <prvResetNextTaskUnblockTime+0x38>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d104      	bne.n	800a836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a82c:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <prvResetNextTaskUnblockTime+0x3c>)
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a834:	e008      	b.n	800a848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <prvResetNextTaskUnblockTime+0x38>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	4a04      	ldr	r2, [pc, #16]	; (800a858 <prvResetNextTaskUnblockTime+0x3c>)
 800a846:	6013      	str	r3, [r2, #0]
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	20001160 	.word	0x20001160
 800a858:	200011c8 	.word	0x200011c8

0800a85c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a862:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <xTaskGetSchedulerState+0x34>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a86a:	2301      	movs	r3, #1
 800a86c:	607b      	str	r3, [r7, #4]
 800a86e:	e008      	b.n	800a882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a870:	4b08      	ldr	r3, [pc, #32]	; (800a894 <xTaskGetSchedulerState+0x38>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a878:	2302      	movs	r3, #2
 800a87a:	607b      	str	r3, [r7, #4]
 800a87c:	e001      	b.n	800a882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a87e:	2300      	movs	r3, #0
 800a880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a882:	687b      	ldr	r3, [r7, #4]
	}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	200011b4 	.word	0x200011b4
 800a894:	200011d0 	.word	0x200011d0

0800a898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d056      	beq.n	800a95c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8ae:	4b2e      	ldr	r3, [pc, #184]	; (800a968 <xTaskPriorityDisinherit+0xd0>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d00a      	beq.n	800a8ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60fb      	str	r3, [r7, #12]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10a      	bne.n	800a8ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	60bb      	str	r3, [r7, #8]
}
 800a8e8:	bf00      	nop
 800a8ea:	e7fe      	b.n	800a8ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d02c      	beq.n	800a95c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a906:	2b00      	cmp	r3, #0
 800a908:	d128      	bne.n	800a95c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	3304      	adds	r3, #4
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe fc70 	bl	80091f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <xTaskPriorityDisinherit+0xd4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	429a      	cmp	r2, r3
 800a932:	d903      	bls.n	800a93c <xTaskPriorityDisinherit+0xa4>
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	4a0c      	ldr	r2, [pc, #48]	; (800a96c <xTaskPriorityDisinherit+0xd4>)
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a940:	4613      	mov	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <xTaskPriorityDisinherit+0xd8>)
 800a94a:	441a      	add	r2, r3
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	3304      	adds	r3, #4
 800a950:	4619      	mov	r1, r3
 800a952:	4610      	mov	r0, r2
 800a954:	f7fe fbf1 	bl	800913a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a958:	2301      	movs	r3, #1
 800a95a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a95c:	697b      	ldr	r3, [r7, #20]
	}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000cd4 	.word	0x20000cd4
 800a96c:	200011b0 	.word	0x200011b0
 800a970:	20000cd8 	.word	0x20000cd8

0800a974 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a97e:	4b21      	ldr	r3, [pc, #132]	; (800aa04 <prvAddCurrentTaskToDelayedList+0x90>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a984:	4b20      	ldr	r3, [pc, #128]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x94>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3304      	adds	r3, #4
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fc32 	bl	80091f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d10a      	bne.n	800a9ae <prvAddCurrentTaskToDelayedList+0x3a>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d007      	beq.n	800a9ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a99e:	4b1a      	ldr	r3, [pc, #104]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4819      	ldr	r0, [pc, #100]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x98>)
 800a9a8:	f7fe fbc7 	bl	800913a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9ac:	e026      	b.n	800a9fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9b6:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d209      	bcs.n	800a9da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9c6:	4b12      	ldr	r3, [pc, #72]	; (800aa10 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f7fe fbd5 	bl	8009182 <vListInsert>
}
 800a9d8:	e010      	b.n	800a9fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9da:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f7fe fbcb 	bl	8009182 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9ec:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d202      	bcs.n	800a9fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9f6:	4a08      	ldr	r2, [pc, #32]	; (800aa18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	6013      	str	r3, [r2, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200011ac 	.word	0x200011ac
 800aa08:	20000cd4 	.word	0x20000cd4
 800aa0c:	20001194 	.word	0x20001194
 800aa10:	20001164 	.word	0x20001164
 800aa14:	20001160 	.word	0x20001160
 800aa18:	200011c8 	.word	0x200011c8

0800aa1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa26:	f000 fb07 	bl	800b038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa2a:	4b1c      	ldr	r3, [pc, #112]	; (800aa9c <xTimerCreateTimerTask+0x80>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d021      	beq.n	800aa76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa3a:	1d3a      	adds	r2, r7, #4
 800aa3c:	f107 0108 	add.w	r1, r7, #8
 800aa40:	f107 030c 	add.w	r3, r7, #12
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fb31 	bl	80090ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	9202      	str	r2, [sp, #8]
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	2302      	movs	r3, #2
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	460a      	mov	r2, r1
 800aa5c:	4910      	ldr	r1, [pc, #64]	; (800aaa0 <xTimerCreateTimerTask+0x84>)
 800aa5e:	4811      	ldr	r0, [pc, #68]	; (800aaa4 <xTimerCreateTimerTask+0x88>)
 800aa60:	f7ff f8de 	bl	8009c20 <xTaskCreateStatic>
 800aa64:	4603      	mov	r3, r0
 800aa66:	4a10      	ldr	r2, [pc, #64]	; (800aaa8 <xTimerCreateTimerTask+0x8c>)
 800aa68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa6a:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <xTimerCreateTimerTask+0x8c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa72:	2301      	movs	r3, #1
 800aa74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	613b      	str	r3, [r7, #16]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa92:	697b      	ldr	r3, [r7, #20]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20001204 	.word	0x20001204
 800aaa0:	08012654 	.word	0x08012654
 800aaa4:	0800abe1 	.word	0x0800abe1
 800aaa8:	20001208 	.word	0x20001208

0800aaac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xTimerGenericCommand+0x2e>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	623b      	str	r3, [r7, #32]
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aada:	4b1a      	ldr	r3, [pc, #104]	; (800ab44 <xTimerGenericCommand+0x98>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d02a      	beq.n	800ab38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b05      	cmp	r3, #5
 800aaf2:	dc18      	bgt.n	800ab26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaf4:	f7ff feb2 	bl	800a85c <xTaskGetSchedulerState>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d109      	bne.n	800ab12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aafe:	4b11      	ldr	r3, [pc, #68]	; (800ab44 <xTimerGenericCommand+0x98>)
 800ab00:	6818      	ldr	r0, [r3, #0]
 800ab02:	f107 0110 	add.w	r1, r7, #16
 800ab06:	2300      	movs	r3, #0
 800ab08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab0a:	f7fe fca1 	bl	8009450 <xQueueGenericSend>
 800ab0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ab10:	e012      	b.n	800ab38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab12:	4b0c      	ldr	r3, [pc, #48]	; (800ab44 <xTimerGenericCommand+0x98>)
 800ab14:	6818      	ldr	r0, [r3, #0]
 800ab16:	f107 0110 	add.w	r1, r7, #16
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f7fe fc97 	bl	8009450 <xQueueGenericSend>
 800ab22:	6278      	str	r0, [r7, #36]	; 0x24
 800ab24:	e008      	b.n	800ab38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab26:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <xTimerGenericCommand+0x98>)
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f107 0110 	add.w	r1, r7, #16
 800ab2e:	2300      	movs	r3, #0
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	f7fe fd8b 	bl	800964c <xQueueGenericSendFromISR>
 800ab36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3728      	adds	r7, #40	; 0x28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20001204 	.word	0x20001204

0800ab48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab52:	4b22      	ldr	r3, [pc, #136]	; (800abdc <prvProcessExpiredTimer+0x94>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fb47 	bl	80091f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d022      	beq.n	800abba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	18d1      	adds	r1, r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	6978      	ldr	r0, [r7, #20]
 800ab82:	f000 f8d1 	bl	800ad28 <prvInsertTimerInActiveList>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d01f      	beq.n	800abcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	2300      	movs	r3, #0
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	2100      	movs	r1, #0
 800ab96:	6978      	ldr	r0, [r7, #20]
 800ab98:	f7ff ff88 	bl	800aaac <xTimerGenericCommand>
 800ab9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d113      	bne.n	800abcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	60fb      	str	r3, [r7, #12]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abc0:	f023 0301 	bic.w	r3, r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	6978      	ldr	r0, [r7, #20]
 800abd2:	4798      	blx	r3
}
 800abd4:	bf00      	nop
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200011fc 	.word	0x200011fc

0800abe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	4618      	mov	r0, r3
 800abee:	f000 f857 	bl	800aca0 <prvGetNextExpireTime>
 800abf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4619      	mov	r1, r3
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 f803 	bl	800ac04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800abfe:	f000 f8d5 	bl	800adac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac02:	e7f1      	b.n	800abe8 <prvTimerTask+0x8>

0800ac04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac0e:	f7ff fa43 	bl	800a098 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac12:	f107 0308 	add.w	r3, r7, #8
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f866 	bl	800ace8 <prvSampleTimeNow>
 800ac1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d130      	bne.n	800ac86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <prvProcessTimerOrBlockTask+0x3c>
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d806      	bhi.n	800ac40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac32:	f7ff fa3f 	bl	800a0b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac36:	68f9      	ldr	r1, [r7, #12]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff ff85 	bl	800ab48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac3e:	e024      	b.n	800ac8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d008      	beq.n	800ac58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <prvProcessTimerOrBlockTask+0x90>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <prvProcessTimerOrBlockTask+0x50>
 800ac50:	2301      	movs	r3, #1
 800ac52:	e000      	b.n	800ac56 <prvProcessTimerOrBlockTask+0x52>
 800ac54:	2300      	movs	r3, #0
 800ac56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac58:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <prvProcessTimerOrBlockTask+0x94>)
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	4619      	mov	r1, r3
 800ac66:	f7fe ffa7 	bl	8009bb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac6a:	f7ff fa23 	bl	800a0b4 <xTaskResumeAll>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac74:	4b09      	ldr	r3, [pc, #36]	; (800ac9c <prvProcessTimerOrBlockTask+0x98>)
 800ac76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	f3bf 8f6f 	isb	sy
}
 800ac84:	e001      	b.n	800ac8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac86:	f7ff fa15 	bl	800a0b4 <xTaskResumeAll>
}
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20001200 	.word	0x20001200
 800ac98:	20001204 	.word	0x20001204
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aca8:	4b0e      	ldr	r3, [pc, #56]	; (800ace4 <prvGetNextExpireTime+0x44>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <prvGetNextExpireTime+0x16>
 800acb2:	2201      	movs	r2, #1
 800acb4:	e000      	b.n	800acb8 <prvGetNextExpireTime+0x18>
 800acb6:	2200      	movs	r2, #0
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d105      	bne.n	800acd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acc4:	4b07      	ldr	r3, [pc, #28]	; (800ace4 <prvGetNextExpireTime+0x44>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	e001      	b.n	800acd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800acd4:	68fb      	ldr	r3, [r7, #12]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	200011fc 	.word	0x200011fc

0800ace8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800acf0:	f7ff fa7e 	bl	800a1f0 <xTaskGetTickCount>
 800acf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acf6:	4b0b      	ldr	r3, [pc, #44]	; (800ad24 <prvSampleTimeNow+0x3c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d205      	bcs.n	800ad0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad00:	f000 f936 	bl	800af70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	e002      	b.n	800ad12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad12:	4a04      	ldr	r2, [pc, #16]	; (800ad24 <prvSampleTimeNow+0x3c>)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad18:	68fb      	ldr	r3, [r7, #12]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	2000120c 	.word	0x2000120c

0800ad28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d812      	bhi.n	800ad74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	1ad2      	subs	r2, r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d302      	bcc.n	800ad62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	617b      	str	r3, [r7, #20]
 800ad60:	e01b      	b.n	800ad9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad62:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <prvInsertTimerInActiveList+0x7c>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	f7fe fa08 	bl	8009182 <vListInsert>
 800ad72:	e012      	b.n	800ad9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d206      	bcs.n	800ad8a <prvInsertTimerInActiveList+0x62>
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d302      	bcc.n	800ad8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
 800ad88:	e007      	b.n	800ad9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad8a:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <prvInsertTimerInActiveList+0x80>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3304      	adds	r3, #4
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7fe f9f4 	bl	8009182 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad9a:	697b      	ldr	r3, [r7, #20]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	20001200 	.word	0x20001200
 800ada8:	200011fc 	.word	0x200011fc

0800adac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08e      	sub	sp, #56	; 0x38
 800adb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adb2:	e0ca      	b.n	800af4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da18      	bge.n	800adec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	3304      	adds	r3, #4
 800adbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10a      	bne.n	800addc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	61fb      	str	r3, [r7, #28]
}
 800add8:	bf00      	nop
 800adda:	e7fe      	b.n	800adda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade2:	6850      	ldr	r0, [r2, #4]
 800ade4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade6:	6892      	ldr	r2, [r2, #8]
 800ade8:	4611      	mov	r1, r2
 800adea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f2c0 80aa 	blt.w	800af48 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	3304      	adds	r3, #4
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fe f9f5 	bl	80091f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff ff6b 	bl	800ace8 <prvSampleTimeNow>
 800ae12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b09      	cmp	r3, #9
 800ae18:	f200 8097 	bhi.w	800af4a <prvProcessReceivedCommands+0x19e>
 800ae1c:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <prvProcessReceivedCommands+0x78>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800ae4d 	.word	0x0800ae4d
 800ae28:	0800ae4d 	.word	0x0800ae4d
 800ae2c:	0800ae4d 	.word	0x0800ae4d
 800ae30:	0800aec1 	.word	0x0800aec1
 800ae34:	0800aed5 	.word	0x0800aed5
 800ae38:	0800af1f 	.word	0x0800af1f
 800ae3c:	0800ae4d 	.word	0x0800ae4d
 800ae40:	0800ae4d 	.word	0x0800ae4d
 800ae44:	0800aec1 	.word	0x0800aec1
 800ae48:	0800aed5 	.word	0x0800aed5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	18d1      	adds	r1, r2, r3
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae6c:	f7ff ff5c 	bl	800ad28 <prvInsertTimerInActiveList>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d069      	beq.n	800af4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d05e      	beq.n	800af4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	441a      	add	r2, r3
 800ae94:	2300      	movs	r3, #0
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae9e:	f7ff fe05 	bl	800aaac <xTimerGenericCommand>
 800aea2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d14f      	bne.n	800af4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	61bb      	str	r3, [r7, #24]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aec6:	f023 0301 	bic.w	r3, r3, #1
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aed2:	e03a      	b.n	800af4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	617b      	str	r3, [r7, #20]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	18d1      	adds	r1, r2, r3
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af18:	f7ff ff06 	bl	800ad28 <prvInsertTimerInActiveList>
					break;
 800af1c:	e015      	b.n	800af4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d103      	bne.n	800af34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2e:	f000 fbdf 	bl	800b6f0 <vPortFree>
 800af32:	e00a      	b.n	800af4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af3a:	f023 0301 	bic.w	r3, r3, #1
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af46:	e000      	b.n	800af4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af4a:	4b08      	ldr	r3, [pc, #32]	; (800af6c <prvProcessReceivedCommands+0x1c0>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	1d39      	adds	r1, r7, #4
 800af50:	2200      	movs	r2, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe fc16 	bl	8009784 <xQueueReceive>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f47f af2a 	bne.w	800adb4 <prvProcessReceivedCommands+0x8>
	}
}
 800af60:	bf00      	nop
 800af62:	bf00      	nop
 800af64:	3730      	adds	r7, #48	; 0x30
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20001204 	.word	0x20001204

0800af70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af76:	e048      	b.n	800b00a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af78:	4b2d      	ldr	r3, [pc, #180]	; (800b030 <prvSwitchTimerLists+0xc0>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af82:	4b2b      	ldr	r3, [pc, #172]	; (800b030 <prvSwitchTimerLists+0xc0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3304      	adds	r3, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe f92f 	bl	80091f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d02e      	beq.n	800b00a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	4413      	add	r3, r2
 800afb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d90e      	bls.n	800afdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afca:	4b19      	ldr	r3, [pc, #100]	; (800b030 <prvSwitchTimerLists+0xc0>)
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f7fe f8d4 	bl	8009182 <vListInsert>
 800afda:	e016      	b.n	800b00a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afdc:	2300      	movs	r3, #0
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	2300      	movs	r3, #0
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	2100      	movs	r1, #0
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7ff fd60 	bl	800aaac <xTimerGenericCommand>
 800afec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	603b      	str	r3, [r7, #0]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b00a:	4b09      	ldr	r3, [pc, #36]	; (800b030 <prvSwitchTimerLists+0xc0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1b1      	bne.n	800af78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b014:	4b06      	ldr	r3, [pc, #24]	; (800b030 <prvSwitchTimerLists+0xc0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <prvSwitchTimerLists+0xc4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a04      	ldr	r2, [pc, #16]	; (800b030 <prvSwitchTimerLists+0xc0>)
 800b020:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b022:	4a04      	ldr	r2, [pc, #16]	; (800b034 <prvSwitchTimerLists+0xc4>)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	6013      	str	r3, [r2, #0]
}
 800b028:	bf00      	nop
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	200011fc 	.word	0x200011fc
 800b034:	20001200 	.word	0x20001200

0800b038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b03e:	f000 f969 	bl	800b314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b042:	4b15      	ldr	r3, [pc, #84]	; (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d120      	bne.n	800b08c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b04a:	4814      	ldr	r0, [pc, #80]	; (800b09c <prvCheckForValidListAndQueue+0x64>)
 800b04c:	f7fe f848 	bl	80090e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b050:	4813      	ldr	r0, [pc, #76]	; (800b0a0 <prvCheckForValidListAndQueue+0x68>)
 800b052:	f7fe f845 	bl	80090e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b056:	4b13      	ldr	r3, [pc, #76]	; (800b0a4 <prvCheckForValidListAndQueue+0x6c>)
 800b058:	4a10      	ldr	r2, [pc, #64]	; (800b09c <prvCheckForValidListAndQueue+0x64>)
 800b05a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b05c:	4b12      	ldr	r3, [pc, #72]	; (800b0a8 <prvCheckForValidListAndQueue+0x70>)
 800b05e:	4a10      	ldr	r2, [pc, #64]	; (800b0a0 <prvCheckForValidListAndQueue+0x68>)
 800b060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b062:	2300      	movs	r3, #0
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	4b11      	ldr	r3, [pc, #68]	; (800b0ac <prvCheckForValidListAndQueue+0x74>)
 800b068:	4a11      	ldr	r2, [pc, #68]	; (800b0b0 <prvCheckForValidListAndQueue+0x78>)
 800b06a:	2110      	movs	r1, #16
 800b06c:	200a      	movs	r0, #10
 800b06e:	f7fe f953 	bl	8009318 <xQueueGenericCreateStatic>
 800b072:	4603      	mov	r3, r0
 800b074:	4a08      	ldr	r2, [pc, #32]	; (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b078:	4b07      	ldr	r3, [pc, #28]	; (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b080:	4b05      	ldr	r3, [pc, #20]	; (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	490b      	ldr	r1, [pc, #44]	; (800b0b4 <prvCheckForValidListAndQueue+0x7c>)
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fd6c 	bl	8009b64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b08c:	f000 f972 	bl	800b374 <vPortExitCritical>
}
 800b090:	bf00      	nop
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20001204 	.word	0x20001204
 800b09c:	200011d4 	.word	0x200011d4
 800b0a0:	200011e8 	.word	0x200011e8
 800b0a4:	200011fc 	.word	0x200011fc
 800b0a8:	20001200 	.word	0x20001200
 800b0ac:	200012b0 	.word	0x200012b0
 800b0b0:	20001210 	.word	0x20001210
 800b0b4:	0801265c 	.word	0x0801265c

0800b0b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3b04      	subs	r3, #4
 800b0c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3b04      	subs	r3, #4
 800b0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f023 0201 	bic.w	r2, r3, #1
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0e8:	4a0c      	ldr	r2, [pc, #48]	; (800b11c <pxPortInitialiseStack+0x64>)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3b14      	subs	r3, #20
 800b0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3b04      	subs	r3, #4
 800b0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f06f 0202 	mvn.w	r2, #2
 800b106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3b20      	subs	r3, #32
 800b10c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b10e:	68fb      	ldr	r3, [r7, #12]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	0800b121 	.word	0x0800b121

0800b120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b12a:	4b12      	ldr	r3, [pc, #72]	; (800b174 <prvTaskExitError+0x54>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b132:	d00a      	beq.n	800b14a <prvTaskExitError+0x2a>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	60fb      	str	r3, [r7, #12]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <prvTaskExitError+0x28>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	60bb      	str	r3, [r7, #8]
}
 800b15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b15e:	bf00      	nop
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0fc      	beq.n	800b160 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	2000009c 	.word	0x2000009c
	...

0800b180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b180:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <pxCurrentTCBConst2>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	f380 8809 	msr	PSP, r0
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f04f 0000 	mov.w	r0, #0
 800b196:	f380 8811 	msr	BASEPRI, r0
 800b19a:	4770      	bx	lr
 800b19c:	f3af 8000 	nop.w

0800b1a0 <pxCurrentTCBConst2>:
 800b1a0:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1a8:	4808      	ldr	r0, [pc, #32]	; (800b1cc <prvPortStartFirstTask+0x24>)
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	6800      	ldr	r0, [r0, #0]
 800b1ae:	f380 8808 	msr	MSP, r0
 800b1b2:	f04f 0000 	mov.w	r0, #0
 800b1b6:	f380 8814 	msr	CONTROL, r0
 800b1ba:	b662      	cpsie	i
 800b1bc:	b661      	cpsie	f
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	df00      	svc	0
 800b1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed08 	.word	0xe000ed08

0800b1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1d6:	4b46      	ldr	r3, [pc, #280]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a46      	ldr	r2, [pc, #280]	; (800b2f4 <xPortStartScheduler+0x124>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d10a      	bne.n	800b1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	613b      	str	r3, [r7, #16]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1f6:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a3f      	ldr	r2, [pc, #252]	; (800b2f8 <xPortStartScheduler+0x128>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d10a      	bne.n	800b216 <xPortStartScheduler+0x46>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60fb      	str	r3, [r7, #12]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b216:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <xPortStartScheduler+0x12c>)
 800b218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	4b31      	ldr	r3, [pc, #196]	; (800b300 <xPortStartScheduler+0x130>)
 800b23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b23e:	4b31      	ldr	r3, [pc, #196]	; (800b304 <xPortStartScheduler+0x134>)
 800b240:	2207      	movs	r2, #7
 800b242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b244:	e009      	b.n	800b25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b246:	4b2f      	ldr	r3, [pc, #188]	; (800b304 <xPortStartScheduler+0x134>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	4a2d      	ldr	r2, [pc, #180]	; (800b304 <xPortStartScheduler+0x134>)
 800b24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b2db      	uxtb	r3, r3
 800b258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b262:	2b80      	cmp	r3, #128	; 0x80
 800b264:	d0ef      	beq.n	800b246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b266:	4b27      	ldr	r3, [pc, #156]	; (800b304 <xPortStartScheduler+0x134>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f1c3 0307 	rsb	r3, r3, #7
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d00a      	beq.n	800b288 <xPortStartScheduler+0xb8>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b288:	4b1e      	ldr	r3, [pc, #120]	; (800b304 <xPortStartScheduler+0x134>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <xPortStartScheduler+0x134>)
 800b290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <xPortStartScheduler+0x134>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b29a:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <xPortStartScheduler+0x134>)
 800b29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <xPortStartScheduler+0x138>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <xPortStartScheduler+0x138>)
 800b2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a14      	ldr	r2, [pc, #80]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2be:	f000 f8dd 	bl	800b47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2c2:	4b12      	ldr	r3, [pc, #72]	; (800b30c <xPortStartScheduler+0x13c>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2c8:	f000 f8fc 	bl	800b4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2cc:	4b10      	ldr	r3, [pc, #64]	; (800b310 <xPortStartScheduler+0x140>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <xPortStartScheduler+0x140>)
 800b2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2d8:	f7ff ff66 	bl	800b1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2dc:	f7ff f852 	bl	800a384 <vTaskSwitchContext>
	prvTaskExitError();
 800b2e0:	f7ff ff1e 	bl	800b120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	e000ed00 	.word	0xe000ed00
 800b2f4:	410fc271 	.word	0x410fc271
 800b2f8:	410fc270 	.word	0x410fc270
 800b2fc:	e000e400 	.word	0xe000e400
 800b300:	20001300 	.word	0x20001300
 800b304:	20001304 	.word	0x20001304
 800b308:	e000ed20 	.word	0xe000ed20
 800b30c:	2000009c 	.word	0x2000009c
 800b310:	e000ef34 	.word	0xe000ef34

0800b314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	607b      	str	r3, [r7, #4]
}
 800b32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <vPortEnterCritical+0x58>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a0d      	ldr	r2, [pc, #52]	; (800b36c <vPortEnterCritical+0x58>)
 800b336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <vPortEnterCritical+0x58>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d10f      	bne.n	800b360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <vPortEnterCritical+0x5c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <vPortEnterCritical+0x4c>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	603b      	str	r3, [r7, #0]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <vPortEnterCritical+0x4a>
	}
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	2000009c 	.word	0x2000009c
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b37a:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <vPortExitCritical+0x50>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <vPortExitCritical+0x24>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	607b      	str	r3, [r7, #4]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <vPortExitCritical+0x50>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <vPortExitCritical+0x42>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	f383 8811 	msr	BASEPRI, r3
}
 800b3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	2000009c 	.word	0x2000009c
	...

0800b3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3d0:	f3ef 8009 	mrs	r0, PSP
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4b15      	ldr	r3, [pc, #84]	; (800b430 <pxCurrentTCBConst>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f01e 0f10 	tst.w	lr, #16
 800b3e0:	bf08      	it	eq
 800b3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3f4:	f380 8811 	msr	BASEPRI, r0
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f7fe ffc0 	bl	800a384 <vTaskSwitchContext>
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f380 8811 	msr	BASEPRI, r0
 800b40c:	bc09      	pop	{r0, r3}
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b416:	f01e 0f10 	tst.w	lr, #16
 800b41a:	bf08      	it	eq
 800b41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b420:	f380 8809 	msr	PSP, r0
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst>:
 800b430:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b452:	f7fe fedd 	bl	800a210 <xTaskIncrementTick>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <xPortSysTickHandler+0x40>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	2300      	movs	r3, #0
 800b466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f383 8811 	msr	BASEPRI, r3
}
 800b46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b480:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b486:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <vPortSetupTimerInterrupt+0x38>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <vPortSetupTimerInterrupt+0x3c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a0a      	ldr	r2, [pc, #40]	; (800b4bc <vPortSetupTimerInterrupt+0x40>)
 800b492:	fba2 2303 	umull	r2, r3, r2, r3
 800b496:	099b      	lsrs	r3, r3, #6
 800b498:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <vPortSetupTimerInterrupt+0x44>)
 800b49a:	3b01      	subs	r3, #1
 800b49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b49e:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	e000e010 	.word	0xe000e010
 800b4b4:	e000e018 	.word	0xe000e018
 800b4b8:	20000000 	.word	0x20000000
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	e000e014 	.word	0xe000e014

0800b4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4d4 <vPortEnableVFP+0x10>
 800b4c8:	6801      	ldr	r1, [r0, #0]
 800b4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4ce:	6001      	str	r1, [r0, #0]
 800b4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4d2:	bf00      	nop
 800b4d4:	e000ed88 	.word	0xe000ed88

0800b4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4de:	f3ef 8305 	mrs	r3, IPSR
 800b4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b0f      	cmp	r3, #15
 800b4e8:	d914      	bls.n	800b514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4ea:	4a17      	ldr	r2, [pc, #92]	; (800b548 <vPortValidateInterruptPriority+0x70>)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4f4:	4b15      	ldr	r3, [pc, #84]	; (800b54c <vPortValidateInterruptPriority+0x74>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	7afa      	ldrb	r2, [r7, #11]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d20a      	bcs.n	800b514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b514:	4b0e      	ldr	r3, [pc, #56]	; (800b550 <vPortValidateInterruptPriority+0x78>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <vPortValidateInterruptPriority+0x7c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	429a      	cmp	r2, r3
 800b522:	d90a      	bls.n	800b53a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	603b      	str	r3, [r7, #0]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <vPortValidateInterruptPriority+0x60>
	}
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	e000e3f0 	.word	0xe000e3f0
 800b54c:	20001300 	.word	0x20001300
 800b550:	e000ed0c 	.word	0xe000ed0c
 800b554:	20001304 	.word	0x20001304

0800b558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b560:	2300      	movs	r3, #0
 800b562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b564:	f7fe fd98 	bl	800a098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b568:	4b5b      	ldr	r3, [pc, #364]	; (800b6d8 <pvPortMalloc+0x180>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b570:	f000 f920 	bl	800b7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b574:	4b59      	ldr	r3, [pc, #356]	; (800b6dc <pvPortMalloc+0x184>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f040 8093 	bne.w	800b6a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01d      	beq.n	800b5c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b588:	2208      	movs	r2, #8
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f003 0307 	and.w	r3, r3, #7
 800b596:	2b00      	cmp	r3, #0
 800b598:	d014      	beq.n	800b5c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f023 0307 	bic.w	r3, r3, #7
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	617b      	str	r3, [r7, #20]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d06e      	beq.n	800b6a8 <pvPortMalloc+0x150>
 800b5ca:	4b45      	ldr	r3, [pc, #276]	; (800b6e0 <pvPortMalloc+0x188>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d869      	bhi.n	800b6a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5d4:	4b43      	ldr	r3, [pc, #268]	; (800b6e4 <pvPortMalloc+0x18c>)
 800b5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5d8:	4b42      	ldr	r3, [pc, #264]	; (800b6e4 <pvPortMalloc+0x18c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5de:	e004      	b.n	800b5ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <pvPortMalloc+0xa4>
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f1      	bne.n	800b5e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5fc:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <pvPortMalloc+0x180>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	429a      	cmp	r2, r3
 800b604:	d050      	beq.n	800b6a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2208      	movs	r2, #8
 800b60c:	4413      	add	r3, r2
 800b60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	2308      	movs	r3, #8
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	d91f      	bls.n	800b668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	f003 0307 	and.w	r3, r3, #7
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <pvPortMalloc+0xf8>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	613b      	str	r3, [r7, #16]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	1ad2      	subs	r2, r2, r3
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b662:	69b8      	ldr	r0, [r7, #24]
 800b664:	f000 f908 	bl	800b878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b668:	4b1d      	ldr	r3, [pc, #116]	; (800b6e0 <pvPortMalloc+0x188>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	4a1b      	ldr	r2, [pc, #108]	; (800b6e0 <pvPortMalloc+0x188>)
 800b674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b676:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <pvPortMalloc+0x188>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <pvPortMalloc+0x190>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d203      	bcs.n	800b68a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <pvPortMalloc+0x188>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a18      	ldr	r2, [pc, #96]	; (800b6e8 <pvPortMalloc+0x190>)
 800b688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <pvPortMalloc+0x184>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	431a      	orrs	r2, r3
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <pvPortMalloc+0x194>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	4a11      	ldr	r2, [pc, #68]	; (800b6ec <pvPortMalloc+0x194>)
 800b6a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6a8:	f7fe fd04 	bl	800a0b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <pvPortMalloc+0x174>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	60fb      	str	r3, [r7, #12]
}
 800b6c8:	bf00      	nop
 800b6ca:	e7fe      	b.n	800b6ca <pvPortMalloc+0x172>
	return pvReturn;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20004f10 	.word	0x20004f10
 800b6dc:	20004f24 	.word	0x20004f24
 800b6e0:	20004f14 	.word	0x20004f14
 800b6e4:	20004f08 	.word	0x20004f08
 800b6e8:	20004f18 	.word	0x20004f18
 800b6ec:	20004f1c 	.word	0x20004f1c

0800b6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d04d      	beq.n	800b79e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b702:	2308      	movs	r3, #8
 800b704:	425b      	negs	r3, r3
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4413      	add	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <vPortFree+0xb8>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4013      	ands	r3, r2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <vPortFree+0x44>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60fb      	str	r3, [r7, #12]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00a      	beq.n	800b752 <vPortFree+0x62>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	60bb      	str	r3, [r7, #8]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <vPortFree+0xb8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01e      	beq.n	800b79e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d11a      	bne.n	800b79e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <vPortFree+0xb8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	43db      	mvns	r3, r3
 800b772:	401a      	ands	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b778:	f7fe fc8e 	bl	800a098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <vPortFree+0xbc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4413      	add	r3, r2
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <vPortFree+0xbc>)
 800b788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b78a:	6938      	ldr	r0, [r7, #16]
 800b78c:	f000 f874 	bl	800b878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <vPortFree+0xc0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <vPortFree+0xc0>)
 800b798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b79a:	f7fe fc8b 	bl	800a0b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b79e:	bf00      	nop
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20004f24 	.word	0x20004f24
 800b7ac:	20004f14 	.word	0x20004f14
 800b7b0:	20004f20 	.word	0x20004f20

0800b7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7c0:	4b27      	ldr	r3, [pc, #156]	; (800b860 <prvHeapInit+0xac>)
 800b7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00c      	beq.n	800b7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <prvHeapInit+0xac>)
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	; (800b864 <prvHeapInit+0xb0>)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7f2:	4b1c      	ldr	r3, [pc, #112]	; (800b864 <prvHeapInit+0xb0>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b800:	2208      	movs	r2, #8
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0307 	bic.w	r3, r3, #7
 800b80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4a15      	ldr	r2, [pc, #84]	; (800b868 <prvHeapInit+0xb4>)
 800b814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b816:	4b14      	ldr	r3, [pc, #80]	; (800b868 <prvHeapInit+0xb4>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2200      	movs	r2, #0
 800b81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b81e:	4b12      	ldr	r3, [pc, #72]	; (800b868 <prvHeapInit+0xb4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b834:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <prvHeapInit+0xb4>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <prvHeapInit+0xb8>)
 800b842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4a09      	ldr	r2, [pc, #36]	; (800b870 <prvHeapInit+0xbc>)
 800b84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b84c:	4b09      	ldr	r3, [pc, #36]	; (800b874 <prvHeapInit+0xc0>)
 800b84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b852:	601a      	str	r2, [r3, #0]
}
 800b854:	bf00      	nop
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	20001308 	.word	0x20001308
 800b864:	20004f08 	.word	0x20004f08
 800b868:	20004f10 	.word	0x20004f10
 800b86c:	20004f18 	.word	0x20004f18
 800b870:	20004f14 	.word	0x20004f14
 800b874:	20004f24 	.word	0x20004f24

0800b878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b880:	4b28      	ldr	r3, [pc, #160]	; (800b924 <prvInsertBlockIntoFreeList+0xac>)
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e002      	b.n	800b88c <prvInsertBlockIntoFreeList+0x14>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d8f7      	bhi.n	800b886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d108      	bne.n	800b8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d118      	bne.n	800b900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <prvInsertBlockIntoFreeList+0xb0>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d00d      	beq.n	800b8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	e008      	b.n	800b908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <prvInsertBlockIntoFreeList+0xb0>)
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	e003      	b.n	800b908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d002      	beq.n	800b916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20004f08 	.word	0x20004f08
 800b928:	20004f10 	.word	0x20004f10

0800b92c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b930:	2200      	movs	r2, #0
 800b932:	490e      	ldr	r1, [pc, #56]	; (800b96c <MX_USB_DEVICE_Init+0x40>)
 800b934:	480e      	ldr	r0, [pc, #56]	; (800b970 <MX_USB_DEVICE_Init+0x44>)
 800b936:	f7fc f8ed 	bl	8007b14 <USBD_Init>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b940:	f7f5 ff0a 	bl	8001758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b944:	490b      	ldr	r1, [pc, #44]	; (800b974 <MX_USB_DEVICE_Init+0x48>)
 800b946:	480a      	ldr	r0, [pc, #40]	; (800b970 <MX_USB_DEVICE_Init+0x44>)
 800b948:	f7fc f914 	bl	8007b74 <USBD_RegisterClass>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b952:	f7f5 ff01 	bl	8001758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b956:	4806      	ldr	r0, [pc, #24]	; (800b970 <MX_USB_DEVICE_Init+0x44>)
 800b958:	f7fc f933 	bl	8007bc2 <USBD_Start>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b962:	f7f5 fef9 	bl	8001758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b966:	bf00      	nop
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	200000a0 	.word	0x200000a0
 800b970:	20004fd0 	.word	0x20004fd0
 800b974:	2000000c 	.word	0x2000000c

0800b978 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	4603      	mov	r3, r0
 800b980:	6039      	str	r1, [r7, #0]
 800b982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	2212      	movs	r2, #18
 800b988:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b98a:	4b03      	ldr	r3, [pc, #12]	; (800b998 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	200000c0 	.word	0x200000c0

0800b99c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	6039      	str	r1, [r7, #0]
 800b9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2204      	movs	r2, #4
 800b9ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9ae:	4b03      	ldr	r3, [pc, #12]	; (800b9bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	200000e0 	.word	0x200000e0

0800b9c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	6039      	str	r1, [r7, #0]
 800b9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d105      	bne.n	800b9de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	4907      	ldr	r1, [pc, #28]	; (800b9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9d6:	4808      	ldr	r0, [pc, #32]	; (800b9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9d8:	f7fd f94f 	bl	8008c7a <USBD_GetString>
 800b9dc:	e004      	b.n	800b9e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	4904      	ldr	r1, [pc, #16]	; (800b9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9e2:	4805      	ldr	r0, [pc, #20]	; (800b9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9e4:	f7fd f949 	bl	8008c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200052a0 	.word	0x200052a0
 800b9f8:	08012664 	.word	0x08012664

0800b9fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	6039      	str	r1, [r7, #0]
 800ba06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	4904      	ldr	r1, [pc, #16]	; (800ba1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba0c:	4804      	ldr	r0, [pc, #16]	; (800ba20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba0e:	f7fd f934 	bl	8008c7a <USBD_GetString>
  return USBD_StrDesc;
 800ba12:	4b02      	ldr	r3, [pc, #8]	; (800ba1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	200052a0 	.word	0x200052a0
 800ba20:	0801267c 	.word	0x0801267c

0800ba24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	6039      	str	r1, [r7, #0]
 800ba2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	221a      	movs	r2, #26
 800ba34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba36:	f000 f855 	bl	800bae4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba3a:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	200000e4 	.word	0x200000e4

0800ba48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	4603      	mov	r3, r0
 800ba50:	6039      	str	r1, [r7, #0]
 800ba52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	4907      	ldr	r1, [pc, #28]	; (800ba7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba5e:	4808      	ldr	r0, [pc, #32]	; (800ba80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba60:	f7fd f90b 	bl	8008c7a <USBD_GetString>
 800ba64:	e004      	b.n	800ba70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4904      	ldr	r1, [pc, #16]	; (800ba7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba6c:	f7fd f905 	bl	8008c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba70:	4b02      	ldr	r3, [pc, #8]	; (800ba7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	200052a0 	.word	0x200052a0
 800ba80:	08012690 	.word	0x08012690

0800ba84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	6039      	str	r1, [r7, #0]
 800ba8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba90:	79fb      	ldrb	r3, [r7, #7]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	4907      	ldr	r1, [pc, #28]	; (800bab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba9a:	4808      	ldr	r0, [pc, #32]	; (800babc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba9c:	f7fd f8ed 	bl	8008c7a <USBD_GetString>
 800baa0:	e004      	b.n	800baac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	4904      	ldr	r1, [pc, #16]	; (800bab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800baa6:	4805      	ldr	r0, [pc, #20]	; (800babc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800baa8:	f7fd f8e7 	bl	8008c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800baac:	4b02      	ldr	r3, [pc, #8]	; (800bab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	200052a0 	.word	0x200052a0
 800babc:	0801269c 	.word	0x0801269c

0800bac0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	6039      	str	r1, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	220c      	movs	r2, #12
 800bad0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bad2:	4b03      	ldr	r3, [pc, #12]	; (800bae0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	200000d4 	.word	0x200000d4

0800bae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800baea:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <Get_SerialNum+0x44>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800baf0:	4b0e      	ldr	r3, [pc, #56]	; (800bb2c <Get_SerialNum+0x48>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800baf6:	4b0e      	ldr	r3, [pc, #56]	; (800bb30 <Get_SerialNum+0x4c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d009      	beq.n	800bb1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	4909      	ldr	r1, [pc, #36]	; (800bb34 <Get_SerialNum+0x50>)
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 f814 	bl	800bb3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb14:	2204      	movs	r2, #4
 800bb16:	4908      	ldr	r1, [pc, #32]	; (800bb38 <Get_SerialNum+0x54>)
 800bb18:	68b8      	ldr	r0, [r7, #8]
 800bb1a:	f000 f80f 	bl	800bb3c <IntToUnicode>
  }
}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	1fff7a10 	.word	0x1fff7a10
 800bb2c:	1fff7a14 	.word	0x1fff7a14
 800bb30:	1fff7a18 	.word	0x1fff7a18
 800bb34:	200000e6 	.word	0x200000e6
 800bb38:	200000f6 	.word	0x200000f6

0800bb3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4613      	mov	r3, r2
 800bb48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb4e:	2300      	movs	r3, #0
 800bb50:	75fb      	strb	r3, [r7, #23]
 800bb52:	e027      	b.n	800bba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	0f1b      	lsrs	r3, r3, #28
 800bb58:	2b09      	cmp	r3, #9
 800bb5a:	d80b      	bhi.n	800bb74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	0f1b      	lsrs	r3, r3, #28
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	4619      	mov	r1, r3
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	440b      	add	r3, r1
 800bb6c:	3230      	adds	r2, #48	; 0x30
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	e00a      	b.n	800bb8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	0f1b      	lsrs	r3, r3, #28
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	005b      	lsls	r3, r3, #1
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	440b      	add	r3, r1
 800bb84:	3237      	adds	r2, #55	; 0x37
 800bb86:	b2d2      	uxtb	r2, r2
 800bb88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	011b      	lsls	r3, r3, #4
 800bb8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	3301      	adds	r3, #1
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	4413      	add	r3, r2
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
 800bba0:	3301      	adds	r3, #1
 800bba2:	75fb      	strb	r3, [r7, #23]
 800bba4:	7dfa      	ldrb	r2, [r7, #23]
 800bba6:	79fb      	ldrb	r3, [r7, #7]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3d3      	bcc.n	800bb54 <IntToUnicode+0x18>
  }
}
 800bbac:	bf00      	nop
 800bbae:	bf00      	nop
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
	...

0800bbbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbc4:	f107 0314 	add.w	r3, r7, #20
 800bbc8:	2200      	movs	r2, #0
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	605a      	str	r2, [r3, #4]
 800bbce:	609a      	str	r2, [r3, #8]
 800bbd0:	60da      	str	r2, [r3, #12]
 800bbd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbdc:	d13a      	bne.n	800bc54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbde:	2300      	movs	r3, #0
 800bbe0:	613b      	str	r3, [r7, #16]
 800bbe2:	4b1e      	ldr	r3, [pc, #120]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe6:	4a1d      	ldr	r2, [pc, #116]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bbe8:	f043 0301 	orr.w	r3, r3, #1
 800bbec:	6313      	str	r3, [r2, #48]	; 0x30
 800bbee:	4b1b      	ldr	r3, [pc, #108]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bbfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bbfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc00:	2302      	movs	r3, #2
 800bc02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc0c:	230a      	movs	r3, #10
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	4619      	mov	r1, r3
 800bc16:	4812      	ldr	r0, [pc, #72]	; (800bc60 <HAL_PCD_MspInit+0xa4>)
 800bc18:	f7f6 fa30 	bl	800207c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc1c:	4b0f      	ldr	r3, [pc, #60]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc20:	4a0e      	ldr	r2, [pc, #56]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc26:	6353      	str	r3, [r2, #52]	; 0x34
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	4b0b      	ldr	r3, [pc, #44]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bc2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc30:	4a0a      	ldr	r2, [pc, #40]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bc32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc36:	6453      	str	r3, [r2, #68]	; 0x44
 800bc38:	4b08      	ldr	r3, [pc, #32]	; (800bc5c <HAL_PCD_MspInit+0xa0>)
 800bc3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc44:	2200      	movs	r2, #0
 800bc46:	2105      	movs	r1, #5
 800bc48:	2043      	movs	r0, #67	; 0x43
 800bc4a:	f7f6 f9ed 	bl	8002028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc4e:	2043      	movs	r0, #67	; 0x43
 800bc50:	f7f6 fa06 	bl	8002060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc54:	bf00      	nop
 800bc56:	3728      	adds	r7, #40	; 0x28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	40023800 	.word	0x40023800
 800bc60:	40020000 	.word	0x40020000

0800bc64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7fb ffec 	bl	8007c58 <USBD_LL_SetupStage>
}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc9a:	78fa      	ldrb	r2, [r7, #3]
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	1a9b      	subs	r3, r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	78fb      	ldrb	r3, [r7, #3]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f7fc f826 	bl	8007d02 <USBD_LL_DataOutStage>
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bcd0:	78fa      	ldrb	r2, [r7, #3]
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	1a9b      	subs	r3, r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	440b      	add	r3, r1
 800bcde:	3348      	adds	r3, #72	; 0x48
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	78fb      	ldrb	r3, [r7, #3]
 800bce4:	4619      	mov	r1, r3
 800bce6:	f7fc f86f 	bl	8007dc8 <USBD_LL_DataInStage>
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fc f983 	bl	800800c <USBD_LL_SOF>
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd16:	2301      	movs	r3, #1
 800bd18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]
 800bd26:	e008      	b.n	800bd3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d102      	bne.n	800bd36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd30:	2301      	movs	r3, #1
 800bd32:	73fb      	strb	r3, [r7, #15]
 800bd34:	e001      	b.n	800bd3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd36:	f7f5 fd0f 	bl	8001758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd40:	7bfa      	ldrb	r2, [r7, #15]
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fc f923 	bl	8007f90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fc f8cf 	bl	8007ef4 <USBD_LL_Reset>
}
 800bd56:	bf00      	nop
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fc f91e 	bl	8007fb0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	6812      	ldr	r2, [r2, #0]
 800bd82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd86:	f043 0301 	orr.w	r3, r3, #1
 800bd8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a1b      	ldr	r3, [r3, #32]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d005      	beq.n	800bda0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd94:	4b04      	ldr	r3, [pc, #16]	; (800bda8 <HAL_PCD_SuspendCallback+0x48>)
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	4a03      	ldr	r2, [pc, #12]	; (800bda8 <HAL_PCD_SuspendCallback+0x48>)
 800bd9a:	f043 0306 	orr.w	r3, r3, #6
 800bd9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	e000ed00 	.word	0xe000ed00

0800bdac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fc f90e 	bl	8007fdc <USBD_LL_Resume>
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdda:	78fa      	ldrb	r2, [r7, #3]
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fc f95c 	bl	800809c <USBD_LL_IsoOUTIncomplete>
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdfe:	78fa      	ldrb	r2, [r7, #3]
 800be00:	4611      	mov	r1, r2
 800be02:	4618      	mov	r0, r3
 800be04:	f7fc f924 	bl	8008050 <USBD_LL_IsoINIncomplete>
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fc f962 	bl	80080e8 <USBD_LL_DevConnected>
}
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fc f95f 	bl	80080fe <USBD_LL_DevDisconnected>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d13c      	bne.n	800bed2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be58:	4a20      	ldr	r2, [pc, #128]	; (800bedc <USBD_LL_Init+0x94>)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a1e      	ldr	r2, [pc, #120]	; (800bedc <USBD_LL_Init+0x94>)
 800be64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be68:	4b1c      	ldr	r3, [pc, #112]	; (800bedc <USBD_LL_Init+0x94>)
 800be6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800be70:	4b1a      	ldr	r3, [pc, #104]	; (800bedc <USBD_LL_Init+0x94>)
 800be72:	2206      	movs	r2, #6
 800be74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be76:	4b19      	ldr	r3, [pc, #100]	; (800bedc <USBD_LL_Init+0x94>)
 800be78:	2202      	movs	r2, #2
 800be7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be7c:	4b17      	ldr	r3, [pc, #92]	; (800bedc <USBD_LL_Init+0x94>)
 800be7e:	2200      	movs	r2, #0
 800be80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be82:	4b16      	ldr	r3, [pc, #88]	; (800bedc <USBD_LL_Init+0x94>)
 800be84:	2202      	movs	r2, #2
 800be86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be88:	4b14      	ldr	r3, [pc, #80]	; (800bedc <USBD_LL_Init+0x94>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <USBD_LL_Init+0x94>)
 800be90:	2200      	movs	r2, #0
 800be92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be94:	4b11      	ldr	r3, [pc, #68]	; (800bedc <USBD_LL_Init+0x94>)
 800be96:	2200      	movs	r2, #0
 800be98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be9a:	4b10      	ldr	r3, [pc, #64]	; (800bedc <USBD_LL_Init+0x94>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bea0:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <USBD_LL_Init+0x94>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bea6:	480d      	ldr	r0, [pc, #52]	; (800bedc <USBD_LL_Init+0x94>)
 800bea8:	f7f6 faad 	bl	8002406 <HAL_PCD_Init>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800beb2:	f7f5 fc51 	bl	8001758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800beb6:	2180      	movs	r1, #128	; 0x80
 800beb8:	4808      	ldr	r0, [pc, #32]	; (800bedc <USBD_LL_Init+0x94>)
 800beba:	f7f7 fc26 	bl	800370a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bebe:	2240      	movs	r2, #64	; 0x40
 800bec0:	2100      	movs	r1, #0
 800bec2:	4806      	ldr	r0, [pc, #24]	; (800bedc <USBD_LL_Init+0x94>)
 800bec4:	f7f7 fbda 	bl	800367c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bec8:	2280      	movs	r2, #128	; 0x80
 800beca:	2101      	movs	r1, #1
 800becc:	4803      	ldr	r0, [pc, #12]	; (800bedc <USBD_LL_Init+0x94>)
 800bece:	f7f7 fbd5 	bl	800367c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	200054a0 	.word	0x200054a0

0800bee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f6 fba9 	bl	800264e <HAL_PCD_Start>
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f97e 	bl	800c204 <USBD_Get_USB_Status>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	461a      	mov	r2, r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	70fb      	strb	r3, [r7, #3]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70bb      	strb	r3, [r7, #2]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf3e:	78bb      	ldrb	r3, [r7, #2]
 800bf40:	883a      	ldrh	r2, [r7, #0]
 800bf42:	78f9      	ldrb	r1, [r7, #3]
 800bf44:	f7f6 ffba 	bl	8002ebc <HAL_PCD_EP_Open>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f958 	bl	800c204 <USBD_Get_USB_Status>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf7c:	78fa      	ldrb	r2, [r7, #3]
 800bf7e:	4611      	mov	r1, r2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f7 f803 	bl	8002f8c <HAL_PCD_EP_Close>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f939 	bl	800c204 <USBD_Get_USB_Status>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfba:	78fa      	ldrb	r2, [r7, #3]
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7f7 f8c3 	bl	800314a <HAL_PCD_EP_SetStall>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 f91a 	bl	800c204 <USBD_Get_USB_Status>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bff8:	78fa      	ldrb	r2, [r7, #3]
 800bffa:	4611      	mov	r1, r2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f7 f908 	bl	8003212 <HAL_PCD_EP_ClrStall>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 f8fb 	bl	800c204 <USBD_Get_USB_Status>
 800c00e:	4603      	mov	r3, r0
 800c010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c012:	7bbb      	ldrb	r3, [r7, #14]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c02e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c034:	2b00      	cmp	r3, #0
 800c036:	da0b      	bge.n	800c050 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c038:	78fb      	ldrb	r3, [r7, #3]
 800c03a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	4613      	mov	r3, r2
 800c042:	00db      	lsls	r3, r3, #3
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	333e      	adds	r3, #62	; 0x3e
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	e00b      	b.n	800c068 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c050:	78fb      	ldrb	r3, [r7, #3]
 800c052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c056:	68f9      	ldr	r1, [r7, #12]
 800c058:	4613      	mov	r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c066:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c08e:	78fa      	ldrb	r2, [r7, #3]
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7f6 feed 	bl	8002e72 <HAL_PCD_SetAddress>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 f8b0 	bl	800c204 <USBD_Get_USB_Status>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b086      	sub	sp, #24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	607a      	str	r2, [r7, #4]
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	460b      	mov	r3, r1
 800c0c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0d0:	7af9      	ldrb	r1, [r7, #11]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	f7f6 ffee 	bl	80030b6 <HAL_PCD_EP_Transmit>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0de:	7dfb      	ldrb	r3, [r7, #23]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f88f 	bl	800c204 <USBD_Get_USB_Status>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	607a      	str	r2, [r7, #4]
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	460b      	mov	r3, r1
 800c102:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c112:	7af9      	ldrb	r1, [r7, #11]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	f7f6 ff82 	bl	8003020 <HAL_PCD_EP_Receive>
 800c11c:	4603      	mov	r3, r0
 800c11e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f86e 	bl	800c204 <USBD_Get_USB_Status>
 800c128:	4603      	mov	r3, r0
 800c12a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c12c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c144:	78fb      	ldrb	r3, [r7, #3]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d002      	beq.n	800c150 <HAL_PCDEx_LPM_Callback+0x18>
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d01f      	beq.n	800c18e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c14e:	e03b      	b.n	800c1c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d007      	beq.n	800c168 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c158:	f7f4 fe10 	bl	8000d7c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c15c:	4b1c      	ldr	r3, [pc, #112]	; (800c1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c162:	f023 0306 	bic.w	r3, r3, #6
 800c166:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6812      	ldr	r2, [r2, #0]
 800c176:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c17a:	f023 0301 	bic.w	r3, r3, #1
 800c17e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c186:	4618      	mov	r0, r3
 800c188:	f7fb ff28 	bl	8007fdc <USBD_LL_Resume>
    break;
 800c18c:	e01c      	b.n	800c1c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	6812      	ldr	r2, [r2, #0]
 800c19c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1a0:	f043 0301 	orr.w	r3, r3, #1
 800c1a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fb feff 	bl	8007fb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1ba:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	4a04      	ldr	r2, [pc, #16]	; (800c1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1c0:	f043 0306 	orr.w	r3, r3, #6
 800c1c4:	6113      	str	r3, [r2, #16]
    break;
 800c1c6:	bf00      	nop
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	e000ed00 	.word	0xe000ed00

0800c1d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1dc:	4b03      	ldr	r3, [pc, #12]	; (800c1ec <USBD_static_malloc+0x18>)
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	20004f28 	.word	0x20004f28

0800c1f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]

}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	4603      	mov	r3, r0
 800c20c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c212:	79fb      	ldrb	r3, [r7, #7]
 800c214:	2b03      	cmp	r3, #3
 800c216:	d817      	bhi.n	800c248 <USBD_Get_USB_Status+0x44>
 800c218:	a201      	add	r2, pc, #4	; (adr r2, 800c220 <USBD_Get_USB_Status+0x1c>)
 800c21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21e:	bf00      	nop
 800c220:	0800c231 	.word	0x0800c231
 800c224:	0800c237 	.word	0x0800c237
 800c228:	0800c23d 	.word	0x0800c23d
 800c22c:	0800c243 	.word	0x0800c243
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	73fb      	strb	r3, [r7, #15]
    break;
 800c234:	e00b      	b.n	800c24e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c236:	2303      	movs	r3, #3
 800c238:	73fb      	strb	r3, [r7, #15]
    break;
 800c23a:	e008      	b.n	800c24e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c23c:	2301      	movs	r3, #1
 800c23e:	73fb      	strb	r3, [r7, #15]
    break;
 800c240:	e005      	b.n	800c24e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c242:	2303      	movs	r3, #3
 800c244:	73fb      	strb	r3, [r7, #15]
    break;
 800c246:	e002      	b.n	800c24e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c248:	2303      	movs	r3, #3
 800c24a:	73fb      	strb	r3, [r7, #15]
    break;
 800c24c:	bf00      	nop
  }
  return usb_status;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	4608      	mov	r0, r1
 800c266:	4611      	mov	r1, r2
 800c268:	461a      	mov	r2, r3
 800c26a:	4603      	mov	r3, r0
 800c26c:	70fb      	strb	r3, [r7, #3]
 800c26e:	460b      	mov	r3, r1
 800c270:	70bb      	strb	r3, [r7, #2]
 800c272:	4613      	mov	r3, r2
 800c274:	707b      	strb	r3, [r7, #1]
                return 0;
 800c276:	2300      	movs	r3, #0
        }
 800c278:	4618      	mov	r0, r3
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	461a      	mov	r2, r3
 800c292:	4603      	mov	r3, r0
 800c294:	70fb      	strb	r3, [r7, #3]
 800c296:	460b      	mov	r3, r1
 800c298:	70bb      	strb	r3, [r7, #2]
 800c29a:	4613      	mov	r3, r2
 800c29c:	707b      	strb	r3, [r7, #1]
                return 0;
 800c29e:	2300      	movs	r3, #0
        }
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
                return 0;
 800c2b4:	2300      	movs	r3, #0
        }
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c2c2:	b480      	push	{r7}
 800c2c4:	b083      	sub	sp, #12
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
                return 0;
 800c2ca:	2300      	movs	r3, #0
        }
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
                return 0;
 800c2e0:	2300      	movs	r3, #0
        }
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	70fb      	strb	r3, [r7, #3]
                return;
 800c2fa:	bf00      	nop
        } // Note used for hubs only!
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c306:	b480      	push	{r7}
 800c308:	b083      	sub	sp, #12
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	460b      	mov	r3, r1
 800c310:	807b      	strh	r3, [r7, #2]
 800c312:	4613      	mov	r3, r2
 800c314:	803b      	strh	r3, [r7, #0]
                return false;
 800c316:	2300      	movs	r3, #0
        }
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c330:	2300      	movs	r3, #0
        }
 800c332:	4618      	mov	r0, r3
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	460b      	mov	r3, r1
 800c348:	70fb      	strb	r3, [r7, #3]
                return true;
 800c34a:	2301      	movs	r3, #1
        }
 800c34c:	4618      	mov	r0, r3
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c360:	687b      	ldr	r3, [r7, #4]
        };
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c36e:	b480      	push	{r7}
 800c370:	b085      	sub	sp, #20
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	2b0f      	cmp	r3, #15
 800c380:	d812      	bhi.n	800c3a8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c382:	7bfa      	ldrb	r2, [r7, #15]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	321e      	adds	r2, #30
 800c388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d107      	bne.n	800c3a0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c390:	7bfa      	ldrb	r2, [r7, #15]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	321e      	adds	r2, #30
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	e004      	b.n	800c3aa <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	73fb      	strb	r3, [r7, #15]
 800c3a6:	e7e9      	b.n	800c37c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c3a8:	23d3      	movs	r3, #211	; 0xd3
        };
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	701a      	strb	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	705a      	strb	r2, [r3, #1]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	709a      	strb	r2, [r3, #2]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	70da      	strb	r2, [r3, #3]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	711a      	strb	r2, [r3, #4]
        };
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	711a      	strb	r2, [r3, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	715a      	strb	r2, [r3, #5]
        };
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781a      	ldrb	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	715a      	strb	r2, [r3, #5]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	795a      	ldrb	r2, [r3, #5]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	711a      	strb	r2, [r3, #4]
        };
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	711a      	strb	r2, [r3, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	80da      	strh	r2, [r3, #6]
        };
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	80da      	strh	r2, [r3, #6]
        };
 800c47e:	bf00      	nop
 800c480:	370c      	adds	r7, #12
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c48a:	b480      	push	{r7}
 800c48c:	b085      	sub	sp, #20
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
 800c496:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	791b      	ldrb	r3, [r3, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d009      	beq.n	800c4b8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c4a4:	e029      	b.n	800c4fa <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	887a      	ldrh	r2, [r7, #2]
 800c4aa:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	791b      	ldrb	r3, [r3, #4]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	88db      	ldrh	r3, [r3, #6]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d015      	beq.n	800c4ec <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d011      	beq.n	800c4ec <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	88db      	ldrh	r3, [r3, #6]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	80da      	strh	r2, [r3, #6]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	801a      	strh	r2, [r3, #0]
 800c4ea:	e7e5      	b.n	800c4b8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	88db      	ldrh	r3, [r3, #6]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d102      	bne.n	800c4fa <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	88db      	ldrh	r3, [r3, #6]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bf0c      	ite	eq
 800c502:	2301      	moveq	r3, #1
 800c504:	2300      	movne	r3, #0
 800c506:	b2db      	uxtb	r3, r3
        };
 800c508:	4618      	mov	r0, r3
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	4608      	mov	r0, r1
 800c51e:	4611      	mov	r1, r2
 800c520:	461a      	mov	r2, r3
 800c522:	4603      	mov	r3, r0
 800c524:	70fb      	strb	r3, [r7, #3]
 800c526:	460b      	mov	r3, r1
 800c528:	70bb      	strb	r3, [r7, #2]
 800c52a:	4613      	mov	r3, r2
 800c52c:	707b      	strb	r3, [r7, #1]
        };
 800c52e:	bf00      	nop
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
	...

0800c53c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	4a04      	ldr	r2, [pc, #16]	; (800c558 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	08012880 	.word	0x08012880

0800c55c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	4a04      	ldr	r2, [pc, #16]	; (800c578 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4618      	mov	r0, r3
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	08012868 	.word	0x08012868

0800c57c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c58a:	4618      	mov	r0, r3
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c596:	b480      	push	{r7}
 800c598:	b083      	sub	sp, #12
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	2be0      	cmp	r3, #224	; 0xe0
 800c5c0:	bf0c      	ite	eq
 800c5c2:	2301      	moveq	r3, #1
 800c5c4:	2300      	movne	r3, #0
 800c5c6:	b2db      	uxtb	r3, r3
        };
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	807b      	strh	r3, [r7, #2]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c5e4:	887b      	ldrh	r3, [r7, #2]
 800c5e6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d104      	bne.n	800c5f8 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c5ee:	883b      	ldrh	r3, [r7, #0]
 800c5f0:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d009      	beq.n	800c60c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c5f8:	887b      	ldrh	r3, [r7, #2]
 800c5fa:	f240 520d 	movw	r2, #1293	; 0x50d
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d106      	bne.n	800c610 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c602:	883b      	ldrh	r3, [r7, #0]
 800c604:	f240 625a 	movw	r2, #1626	; 0x65a
 800c608:	4293      	cmp	r3, r2
 800c60a:	d101      	bne.n	800c610 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e02d      	b.n	800c66c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7d1b      	ldrb	r3, [r3, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d113      	bne.n	800c640 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7d5b      	ldrb	r3, [r3, #21]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10f      	bne.n	800c640 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7d9b      	ldrb	r3, [r3, #22]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10b      	bne.n	800c640 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7ddb      	ldrb	r3, [r3, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d107      	bne.n	800c640 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7e1b      	ldrb	r3, [r3, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7e5b      	ldrb	r3, [r3, #25]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d014      	beq.n	800c66a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c640:	887b      	ldrh	r3, [r7, #2]
 800c642:	f240 524c 	movw	r2, #1356	; 0x54c
 800c646:	4293      	cmp	r3, r2
 800c648:	d10f      	bne.n	800c66a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c64a:	883b      	ldrh	r3, [r7, #0]
 800c64c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c650:	d009      	beq.n	800c666 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c652:	883b      	ldrh	r3, [r7, #0]
 800c654:	f240 422f 	movw	r2, #1071	; 0x42f
 800c658:	4293      	cmp	r3, r2
 800c65a:	d004      	beq.n	800c666 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c65c:	883b      	ldrh	r3, [r7, #0]
 800c65e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c662:	4293      	cmp	r3, r2
 800c664:	d101      	bne.n	800c66a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c666:	2301      	movs	r3, #1
 800c668:	e000      	b.n	800c66c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c66a:	2300      	movs	r3, #0
        };
 800c66c:	4618      	mov	r0, r3
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff ff59 	bl	800c53c <_ZN15USBDeviceConfigC1Ev>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff ff64 	bl	800c55c <_ZN17UsbConfigXtracterC1Ev>
 800c694:	4a2b      	ldr	r2, [pc, #172]	; (800c744 <_ZN3BTDC1EP3USB+0xcc>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	4a2b      	ldr	r2, [pc, #172]	; (800c748 <_ZN3BTDC1EP3USB+0xd0>)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	605a      	str	r2, [r3, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	64da      	str	r2, [r3, #76]	; 0x4c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	661a      	str	r2, [r3, #96]	; 0x60
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	73fb      	strb	r3, [r7, #15]
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	2b03      	cmp	r3, #3
 800c704:	d80a      	bhi.n	800c71c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	3318      	adds	r3, #24
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	4413      	add	r3, r2
 800c710:	2200      	movs	r2, #0
 800c712:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	3301      	adds	r3, #1
 800c718:	73fb      	strb	r3, [r7, #15]
 800c71a:	e7f1      	b.n	800c700 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 fa7d 	bl	800cc1c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d006      	beq.n	800c738 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff fe1b 	bl	800c36e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	08012828 	.word	0x08012828
 800c748:	0801285c 	.word	0x0801285c

0800c74c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c74c:	b590      	push	{r4, r7, lr}
 800c74e:	b08f      	sub	sp, #60	; 0x3c
 800c750:	af02      	add	r7, sp, #8
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	4608      	mov	r0, r1
 800c756:	4611      	mov	r1, r2
 800c758:	461a      	mov	r2, r3
 800c75a:	4603      	mov	r3, r0
 800c75c:	70fb      	strb	r3, [r7, #3]
 800c75e:	460b      	mov	r3, r1
 800c760:	70bb      	strb	r3, [r7, #2]
 800c762:	4613      	mov	r3, r2
 800c764:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c766:	2312      	movs	r3, #18
 800c768:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c76c:	f107 0308 	add.w	r3, r7, #8
 800c770:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c772:	2300      	movs	r3, #0
 800c774:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fa4e 	bl	800cc1c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff fde7 	bl	800c358 <_ZN3USB14GetAddressPoolEv>
 800c78a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c796:	23d9      	movs	r3, #217	; 0xd9
 800c798:	e087      	b.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	69f8      	ldr	r0, [r7, #28]
 800c7a4:	4798      	blx	r3
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c7ae:	23d6      	movs	r3, #214	; 0xd6
 800c7b0:	e07b      	b.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c7ba:	23d7      	movs	r3, #215	; 0xd7
 800c7bc:	e075      	b.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7cc:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	787a      	ldrb	r2, [r7, #1]
 800c7d2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c7d8:	f107 0308 	add.w	r3, r7, #8
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	2312      	movs	r3, #18
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	f005 fa13 	bl	8011c0e <_ZN3USB11getDevDescrEhhtPh>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	6a3a      	ldr	r2, [r7, #32]
 800c7f2:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c7f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d146      	bne.n	800c88a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3304      	adds	r3, #4
 800c802:	681c      	ldr	r4, [r3, #0]
 800c804:	78bb      	ldrb	r3, [r7, #2]
 800c806:	78f9      	ldrb	r1, [r7, #3]
 800c808:	2200      	movs	r2, #0
 800c80a:	69f8      	ldr	r0, [r7, #28]
 800c80c:	47a0      	blx	r4
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c822:	23d4      	movs	r3, #212	; 0xd4
 800c824:	e041      	b.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	791b      	ldrb	r3, [r3, #4]
 800c82a:	2b09      	cmp	r3, #9
 800c82c:	d017      	beq.n	800c85e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	79da      	ldrb	r2, [r3, #7]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83a:	7c5a      	ldrb	r2, [r3, #17]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	891b      	ldrh	r3, [r3, #8]
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	895b      	ldrh	r3, [r3, #10]
 800c852:	b29a      	uxth	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c85a:	23e0      	movs	r3, #224	; 0xe0
 800c85c:	e025      	b.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c85e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c86a:	2300      	movs	r3, #0
 800c86c:	2200      	movs	r2, #0
 800c86e:	f005 fa6b 	bl	8011d48 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c872:	23d1      	movs	r3, #209	; 0xd1
 800c874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3308      	adds	r3, #8
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	4798      	blx	r3
        return rcode;
 800c884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c888:	e00f      	b.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c88a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c88c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c890:	2b0d      	cmp	r3, #13
 800c892:	d002      	beq.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c894:	23e1      	movs	r3, #225	; 0xe1
 800c896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3308      	adds	r3, #8
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	4798      	blx	r3
        return rcode;
 800c8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3734      	adds	r7, #52	; 0x34
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd90      	pop	{r4, r7, pc}

0800c8b2 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b096      	sub	sp, #88	; 0x58
 800c8b6:	af02      	add	r7, sp, #8
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	4611      	mov	r1, r2
 800c8be:	461a      	mov	r2, r3
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	70fb      	strb	r3, [r7, #3]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70bb      	strb	r3, [r7, #2]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c8d2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7ff fd38 	bl	800c358 <_ZN3USB14GetAddressPoolEv>
 800c8e8:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c8fa:	4798      	blx	r3
 800c8fc:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800c8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c904:	23d6      	movs	r3, #214	; 0xd6
 800c906:	e185      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800c908:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c90c:	f7f5 fab0 	bl	8001e70 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c91a:	2200      	movs	r2, #0
 800c91c:	2100      	movs	r1, #0
 800c91e:	f005 fa13 	bl	8011d48 <_ZN3USB7setAddrEhhh>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800c928:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800c930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c932:	2200      	movs	r2, #0
 800c934:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800c936:	e165      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800c938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93a:	2200      	movs	r2, #0
 800c93c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c94a:	4611      	mov	r1, r2
 800c94c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c94e:	4798      	blx	r3
 800c950:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800c952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c958:	23d6      	movs	r3, #214	; 0xd6
 800c95a:	e15b      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800c95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c95e:	787a      	ldrb	r2, [r7, #1]
 800c960:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3351      	adds	r3, #81	; 0x51
 800c970:	2201      	movs	r2, #1
 800c972:	f004 f8dc 	bl	8010b2e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c976:	4603      	mov	r3, r0
 800c978:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800c97c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c980:	2b00      	cmp	r3, #0
 800c982:	f040 8128 	bne.w	800cbd6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c98c:	f240 524c 	movw	r2, #1356	; 0x54c
 800c990:	4293      	cmp	r3, r2
 800c992:	d177      	bne.n	800ca84 <_ZN3BTD4InitEhhb+0x1d2>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c99a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c99e:	d00d      	beq.n	800c9bc <_ZN3BTD4InitEhhb+0x10a>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9a6:	f240 422f 	movw	r2, #1071	; 0x42f
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d006      	beq.n	800c9bc <_ZN3BTD4InitEhhb+0x10a>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9b4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d163      	bne.n	800ca84 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800c9bc:	2064      	movs	r0, #100	; 0x64
 800c9be:	f7f5 fa57 	bl	8001e70 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	f005 f9e6 	bl	8011da4 <_ZN3USB7setConfEhhh>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800c9de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f040 80f9 	bne.w	800cbda <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7d1b      	ldrb	r3, [r3, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d113      	bne.n	800ca18 <_ZN3BTD4InitEhhb+0x166>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7d5b      	ldrb	r3, [r3, #21]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10f      	bne.n	800ca18 <_ZN3BTD4InitEhhb+0x166>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d9b      	ldrb	r3, [r3, #22]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10b      	bne.n	800ca18 <_ZN3BTD4InitEhhb+0x166>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	7ddb      	ldrb	r3, [r3, #23]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d107      	bne.n	800ca18 <_ZN3BTD4InitEhhb+0x166>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7e1b      	ldrb	r3, [r3, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d103      	bne.n	800ca18 <_ZN3BTD4InitEhhb+0x166>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7e5b      	ldrb	r3, [r3, #25]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d019      	beq.n	800ca4c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca1e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ca22:	d006      	beq.n	800ca32 <_ZN3BTD4InitEhhb+0x180>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca2a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d106      	bne.n	800ca40 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3314      	adds	r3, #20
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f002 f8b0 	bl	800eb9e <_ZN3BTD9setBdaddrEPh>
 800ca3e:	e005      	b.n	800ca4c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	3314      	adds	r3, #20
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f002 f8e9 	bl	800ec1e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f005 f9a1 	bl	8011da4 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f005 f96a 	bl	8011d48 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800ca80:	23d1      	movs	r3, #209	; 0xd1
 800ca82:	e0c7      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ca8a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ca8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d25e      	bcs.n	800cb54 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ca9c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d106      	bne.n	800cab2 <_ZN3BTD4InitEhhb+0x200>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800caaa:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800caae:	4293      	cmp	r3, r2
 800cab0:	d00d      	beq.n	800cace <_ZN3BTD4InitEhhb+0x21c>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cab8:	f240 520d 	movw	r2, #1293	; 0x50d
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d120      	bne.n	800cb02 <_ZN3BTD4InitEhhb+0x250>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cac6:	f240 625a 	movw	r2, #1626	; 0x65a
 800caca:	4293      	cmp	r3, r2
 800cacc:	d119      	bne.n	800cb02 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	f107 0308 	add.w	r3, r7, #8
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f002 f8f3 	bl	800ecc4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cae8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800caec:	f107 0308 	add.w	r3, r7, #8
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	4613      	mov	r3, r2
 800caf4:	2200      	movs	r2, #0
 800caf6:	f005 f8da 	bl	8011cae <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb00:	e018      	b.n	800cb34 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	1d1a      	adds	r2, r3, #4
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f002 f927 	bl	800ed60 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb1c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb20:	f107 0308 	add.w	r3, r7, #8
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	4613      	mov	r3, r2
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f005 f8c0 	bl	8011cae <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800cb34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d150      	bne.n	800cbde <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d805      	bhi.n	800cb52 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cb46:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cb50:	e79b      	b.n	800ca8a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800cb52:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d945      	bls.n	800cbea <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	3351      	adds	r3, #81	; 0x51
 800cb72:	f003 ffdc 	bl	8010b2e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cb7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d12e      	bne.n	800cbe2 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb9a:	f005 f903 	bl	8011da4 <_ZN3USB7setConfEhhh>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cba4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d11c      	bne.n	800cbe6 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2264      	movs	r2, #100	; 0x64
 800cbb0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e01e      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800cbd6:	bf00      	nop
 800cbd8:	e014      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cbda:	bf00      	nop
 800cbdc:	e012      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800cbde:	bf00      	nop
 800cbe0:	e010      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800cbe2:	bf00      	nop
 800cbe4:	e00e      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cbe6:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800cbe8:	e00c      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800cbea:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f005 f8a5 	bl	8011d48 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800cbfe:	23d1      	movs	r3, #209	; 0xd1
 800cc00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3308      	adds	r3, #8
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	4798      	blx	r3
        return rcode;
 800cc10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3750      	adds	r7, #80	; 0x50
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cc24:	2300      	movs	r3, #0
 800cc26:	73fb      	strb	r3, [r7, #15]
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d845      	bhi.n	800ccba <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800cc2e:	7bfa      	ldrb	r2, [r7, #15]
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	4613      	mov	r3, r2
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4413      	add	r3, r2
 800cc38:	440b      	add	r3, r1
 800cc3a:	3351      	adds	r3, #81	; 0x51
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <_ZN3BTD10InitializeEv+0x2e>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e000      	b.n	800cc4c <_ZN3BTD10InitializeEv+0x30>
 800cc4a:	2008      	movs	r0, #8
 800cc4c:	7bfa      	ldrb	r2, [r7, #15]
 800cc4e:	6879      	ldr	r1, [r7, #4]
 800cc50:	4613      	mov	r3, r2
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	4413      	add	r3, r2
 800cc56:	440b      	add	r3, r1
 800cc58:	3352      	adds	r3, #82	; 0x52
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800cc5e:	7bfa      	ldrb	r2, [r7, #15]
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	440b      	add	r3, r1
 800cc6a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc6e:	78d3      	ldrb	r3, [r2, #3]
 800cc70:	f36f 0300 	bfc	r3, #0, #1
 800cc74:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800cc76:	7bfa      	ldrb	r2, [r7, #15]
 800cc78:	6879      	ldr	r1, [r7, #4]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	4413      	add	r3, r2
 800cc80:	440b      	add	r3, r1
 800cc82:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc86:	78d3      	ldrb	r3, [r2, #3]
 800cc88:	f36f 0341 	bfc	r3, #1, #1
 800cc8c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <_ZN3BTD10InitializeEv+0x7c>
 800cc94:	2101      	movs	r1, #1
 800cc96:	e000      	b.n	800cc9a <_ZN3BTD10InitializeEv+0x7e>
 800cc98:	210f      	movs	r1, #15
 800cc9a:	7bfa      	ldrb	r2, [r7, #15]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	4413      	add	r3, r2
 800cca4:	4403      	add	r3, r0
 800cca6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccaa:	78d3      	ldrb	r3, [r2, #3]
 800ccac:	f361 0387 	bfi	r3, r1, #2, #6
 800ccb0:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	73fb      	strb	r3, [r7, #15]
 800ccb8:	e7b6      	b.n	800cc28 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ccba:	2300      	movs	r3, #0
 800ccbc:	73fb      	strb	r3, [r7, #15]
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	2b03      	cmp	r3, #3
 800ccc2:	d81c      	bhi.n	800ccfe <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	3318      	adds	r3, #24
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d010      	beq.n	800ccf6 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	3318      	adds	r3, #24
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	6859      	ldr	r1, [r3, #4]
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	3318      	adds	r3, #24
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3308      	adds	r3, #8
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	73fb      	strb	r3, [r7, #15]
 800ccfc:	e7df      	b.n	800ccbe <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800cd54:	bf00      	nop
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	4608      	mov	r0, r1
 800cd66:	4611      	mov	r1, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	70fb      	strb	r3, [r7, #3]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	70bb      	strb	r3, [r7, #2]
 800cd72:	4613      	mov	r3, r2
 800cd74:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cd76:	787b      	ldrb	r3, [r7, #1]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d15d      	bne.n	800ce38 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	78fa      	ldrb	r2, [r7, #3]
 800cd80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	78db      	ldrb	r3, [r3, #3]
 800cd88:	f003 0303 	and.w	r3, r3, #3
 800cd8c:	2b03      	cmp	r3, #3
 800cd8e:	d114      	bne.n	800cdba <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	789b      	ldrb	r3, [r3, #2]
 800cd94:	b25b      	sxtb	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	da0f      	bge.n	800cdba <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cd9e:	7bfa      	ldrb	r2, [r7, #15]
 800cda0:	6879      	ldr	r1, [r7, #4]
 800cda2:	4613      	mov	r3, r2
 800cda4:	005b      	lsls	r3, r3, #1
 800cda6:	4413      	add	r3, r2
 800cda8:	440b      	add	r3, r1
 800cdaa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cdae:	78d3      	ldrb	r3, [r2, #3]
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	f361 0387 	bfi	r3, r1, #2, #6
 800cdb6:	70d3      	strb	r3, [r2, #3]
 800cdb8:	e00e      	b.n	800cdd8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	78db      	ldrb	r3, [r3, #3]
 800cdbe:	f003 0303 	and.w	r3, r3, #3
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d13a      	bne.n	800ce3c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	789b      	ldrb	r3, [r3, #2]
 800cdca:	b25b      	sxtb	r3, r3
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	da01      	bge.n	800cdd4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	e000      	b.n	800cdd6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	789b      	ldrb	r3, [r3, #2]
 800cddc:	7bfa      	ldrb	r2, [r7, #15]
 800cdde:	f003 030f 	and.w	r3, r3, #15
 800cde2:	b2d8      	uxtb	r0, r3
 800cde4:	6879      	ldr	r1, [r7, #4]
 800cde6:	4613      	mov	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4413      	add	r3, r2
 800cdec:	440b      	add	r3, r1
 800cdee:	3351      	adds	r3, #81	; 0x51
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	889b      	ldrh	r3, [r3, #4]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	7bfa      	ldrb	r2, [r7, #15]
 800cdfc:	b2d8      	uxtb	r0, r3
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	4613      	mov	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4413      	add	r3, r2
 800ce06:	440b      	add	r3, r1
 800ce08:	3352      	adds	r3, #82	; 0x52
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	799b      	ldrb	r3, [r3, #6]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d204      	bcs.n	800ce26 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	799a      	ldrb	r2, [r3, #6]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800ce36:	e002      	b.n	800ce3e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800ce38:	bf00      	nop
 800ce3a:	e000      	b.n	800ce3e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800ce3c:	bf00      	nop
}
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800ce48:	f1a0 0004 	sub.w	r0, r0, #4
 800ce4c:	f7ff bf86 	b.w	800cd5c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800ce50 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff fedf 	bl	800cc1c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff fa78 	bl	800c358 <_ZN3USB14GetAddressPoolEv>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	3208      	adds	r2, #8
 800ce6e:	6812      	ldr	r2, [r2, #0]
 800ce70:	6879      	ldr	r1, [r7, #4]
 800ce72:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800ce76:	4618      	mov	r0, r3
 800ce78:	4790      	blx	r2
        return 0;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800ce92:	f083 0301 	eor.w	r3, r3, #1
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e01d      	b.n	800cedc <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800cea0:	f7f4 ffda 	bl	8001e58 <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	43db      	mvns	r3, r3
 800ceae:	0fdb      	lsrs	r3, r3, #31
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d011      	beq.n	800ceda <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800ceb6:	f7f4 ffcf 	bl	8001e58 <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cec2:	441a      	add	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f80b 	bl	800cee4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fb22 	bl	800d518 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fe4b 	bl	800db70 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800cee4:	b5b0      	push	{r4, r5, r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800ceec:	2340      	movs	r3, #64	; 0x40
 800ceee:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3389      	adds	r3, #137	; 0x89
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800cf0a:	f107 050c 	add.w	r5, r7, #12
 800cf0e:	9201      	str	r2, [sp, #4]
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	462b      	mov	r3, r5
 800cf14:	4622      	mov	r2, r4
 800cf16:	f003 ff72 	bl	8010dfe <_ZN3USB10inTransferEhhPtPhh>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d003      	beq.n	800cf2c <_ZN3BTD14HCI_event_taskEv+0x48>
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	f040 82f1 	bne.w	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cf32:	3b01      	subs	r3, #1
 800cf34:	2b35      	cmp	r3, #53	; 0x35
 800cf36:	f200 82ea 	bhi.w	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800cf3a:	a201      	add	r2, pc, #4	; (adr r2, 800cf40 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800cf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf40:	0800d121 	.word	0x0800d121
 800cf44:	0800d181 	.word	0x0800d181
 800cf48:	0800d2d9 	.word	0x0800d2d9
 800cf4c:	0800d3c3 	.word	0x0800d3c3
 800cf50:	0800d335 	.word	0x0800d335
 800cf54:	0800d481 	.word	0x0800d481
 800cf58:	0800d367 	.word	0x0800d367
 800cf5c:	0800d4f9 	.word	0x0800d4f9
 800cf60:	0800d4f9 	.word	0x0800d4f9
 800cf64:	0800d50f 	.word	0x0800d50f
 800cf68:	0800d50f 	.word	0x0800d50f
 800cf6c:	0800d4f9 	.word	0x0800d4f9
 800cf70:	0800d4f9 	.word	0x0800d4f9
 800cf74:	0800d019 	.word	0x0800d019
 800cf78:	0800d4f9 	.word	0x0800d4f9
 800cf7c:	0800d50f 	.word	0x0800d50f
 800cf80:	0800d50f 	.word	0x0800d50f
 800cf84:	0800d4f9 	.word	0x0800d4f9
 800cf88:	0800d4f9 	.word	0x0800d4f9
 800cf8c:	0800d50f 	.word	0x0800d50f
 800cf90:	0800d50f 	.word	0x0800d50f
 800cf94:	0800d44f 	.word	0x0800d44f
 800cf98:	0800d479 	.word	0x0800d479
 800cf9c:	0800d4f9 	.word	0x0800d4f9
 800cfa0:	0800d4f9 	.word	0x0800d4f9
 800cfa4:	0800d4f9 	.word	0x0800d4f9
 800cfa8:	0800d4f9 	.word	0x0800d4f9
 800cfac:	0800d50f 	.word	0x0800d50f
 800cfb0:	0800d50f 	.word	0x0800d50f
 800cfb4:	0800d50f 	.word	0x0800d50f
 800cfb8:	0800d50f 	.word	0x0800d50f
 800cfbc:	0800d4f9 	.word	0x0800d4f9
 800cfc0:	0800d50f 	.word	0x0800d50f
 800cfc4:	0800d50f 	.word	0x0800d50f
 800cfc8:	0800d50f 	.word	0x0800d50f
 800cfcc:	0800d50f 	.word	0x0800d50f
 800cfd0:	0800d50f 	.word	0x0800d50f
 800cfd4:	0800d50f 	.word	0x0800d50f
 800cfd8:	0800d50f 	.word	0x0800d50f
 800cfdc:	0800d50f 	.word	0x0800d50f
 800cfe0:	0800d50f 	.word	0x0800d50f
 800cfe4:	0800d50f 	.word	0x0800d50f
 800cfe8:	0800d50f 	.word	0x0800d50f
 800cfec:	0800d50f 	.word	0x0800d50f
 800cff0:	0800d50f 	.word	0x0800d50f
 800cff4:	0800d50f 	.word	0x0800d50f
 800cff8:	0800d50f 	.word	0x0800d50f
 800cffc:	0800d50f 	.word	0x0800d50f
 800d000:	0800d4e9 	.word	0x0800d4e9
 800d004:	0800d4f9 	.word	0x0800d4f9
 800d008:	0800d4f1 	.word	0x0800d4f1
 800d00c:	0800d50f 	.word	0x0800d50f
 800d010:	0800d50f 	.word	0x0800d50f
 800d014:	0800d4f9 	.word	0x0800d4f9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f040 826c 	bne.w	800d4fc <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d02a:	f043 0301 	orr.w	r3, r3, #1
 800d02e:	b29a      	uxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d114      	bne.n	800d06a <_ZN3BTD14HCI_event_taskEv+0x186>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d046:	2b10      	cmp	r3, #16
 800d048:	d10f      	bne.n	800d06a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d060:	b29a      	uxth	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d068:	e059      	b.n	800d11e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d070:	2b04      	cmp	r3, #4
 800d072:	d12a      	bne.n	800d0ca <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d07a:	2b10      	cmp	r3, #16
 800d07c:	d125      	bne.n	800d0ca <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d114      	bne.n	800d0b6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10f      	bne.n	800d0b6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d09c:	f003 0308 	and.w	r3, r3, #8
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d0ac:	e003      	b.n	800d0b6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d0c8:	e029      	b.n	800d11e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d0d0:	2b09      	cmp	r3, #9
 800d0d2:	f040 8213 	bne.w	800d4fc <_ZN3BTD14HCI_event_taskEv+0x618>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d0dc:	2b10      	cmp	r3, #16
 800d0de:	f040 820d 	bne.w	800d4fc <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	75fb      	strb	r3, [r7, #23]
 800d0e6:	7dfb      	ldrb	r3, [r7, #23]
 800d0e8:	2b05      	cmp	r3, #5
 800d0ea:	d80e      	bhi.n	800d10a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d0ec:	7dfb      	ldrb	r3, [r7, #23]
 800d0ee:	1d9a      	adds	r2, r3, #6
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	440a      	add	r2, r1
 800d0f6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	460a      	mov	r2, r1
 800d100:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800d102:	7dfb      	ldrb	r3, [r7, #23]
 800d104:	3301      	adds	r3, #1
 800d106:	75fb      	strb	r3, [r7, #23]
 800d108:	e7ed      	b.n	800d0e6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d110:	f043 0320 	orr.w	r3, r3, #32
 800d114:	b29a      	uxth	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800d11c:	e1ee      	b.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x618>
 800d11e:	e1ed      	b.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d126:	2b04      	cmp	r3, #4
 800d128:	d921      	bls.n	800d16e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d130:	2b00      	cmp	r3, #0
 800d132:	d104      	bne.n	800d13e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d017      	beq.n	800d16e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	220a      	movs	r2, #10
 800d16a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d174:	3301      	adds	r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800d17e:	e1c6      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 81ba 	beq.w	800d500 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d18c:	2300      	movs	r3, #0
 800d18e:	75bb      	strb	r3, [r7, #22]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d196:	7dba      	ldrb	r2, [r7, #22]
 800d198:	429a      	cmp	r2, r3
 800d19a:	f080 81b1 	bcs.w	800d500 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	7dbb      	ldrb	r3, [r7, #22]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	0049      	lsls	r1, r1, #1
 800d1ae:	440b      	add	r3, r1
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	4413      	add	r3, r2
 800d1b4:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	757b      	strb	r3, [r7, #21]
 800d1ba:	7d7b      	ldrb	r3, [r7, #21]
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d811      	bhi.n	800d1e4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800d1c0:	7d7b      	ldrb	r3, [r7, #21]
 800d1c2:	1d1a      	adds	r2, r3, #4
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	441a      	add	r2, r3
 800d1c8:	7d7b      	ldrb	r3, [r7, #21]
 800d1ca:	6879      	ldr	r1, [r7, #4]
 800d1cc:	440a      	add	r2, r1
 800d1ce:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	460a      	mov	r2, r1
 800d1d8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800d1dc:	7d7b      	ldrb	r3, [r7, #21]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	757b      	strb	r3, [r7, #21]
 800d1e2:	e7ea      	b.n	800d1ba <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d038      	beq.n	800d260 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d133      	bne.n	800d260 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d1fe:	2b05      	cmp	r3, #5
 800d200:	d12e      	bne.n	800d260 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d208:	f003 030c 	and.w	r3, r3, #12
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d027      	beq.n	800d260 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800d218:	2300      	movs	r3, #0
 800d21a:	753b      	strb	r3, [r7, #20]
 800d21c:	7d3b      	ldrb	r3, [r7, #20]
 800d21e:	2b05      	cmp	r3, #5
 800d220:	d814      	bhi.n	800d24c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d222:	7d3b      	ldrb	r3, [r7, #20]
 800d224:	1cd9      	adds	r1, r3, #3
 800d226:	7dba      	ldrb	r2, [r7, #22]
 800d228:	4613      	mov	r3, r2
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	4413      	add	r3, r2
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	18ca      	adds	r2, r1, r3
 800d232:	7d3b      	ldrb	r3, [r7, #20]
 800d234:	6879      	ldr	r1, [r7, #4]
 800d236:	440a      	add	r2, r1
 800d238:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	4413      	add	r3, r2
 800d240:	460a      	mov	r2, r1
 800d242:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d244:	7d3b      	ldrb	r3, [r7, #20]
 800d246:	3301      	adds	r3, #1
 800d248:	753b      	strb	r3, [r7, #20]
 800d24a:	e7e7      	b.n	800d21c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d256:	b29a      	uxth	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d25e:	e03a      	b.n	800d2d6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d266:	2b00      	cmp	r3, #0
 800d268:	d031      	beq.n	800d2ce <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d270:	f003 030f 	and.w	r3, r3, #15
 800d274:	2b05      	cmp	r3, #5
 800d276:	d12a      	bne.n	800d2ce <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d27e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d282:	2b00      	cmp	r3, #0
 800d284:	d023      	beq.n	800d2ce <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800d286:	2300      	movs	r3, #0
 800d288:	74fb      	strb	r3, [r7, #19]
 800d28a:	7cfb      	ldrb	r3, [r7, #19]
 800d28c:	2b05      	cmp	r3, #5
 800d28e:	d814      	bhi.n	800d2ba <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d290:	7cfb      	ldrb	r3, [r7, #19]
 800d292:	1cd9      	adds	r1, r3, #3
 800d294:	7dba      	ldrb	r2, [r7, #22]
 800d296:	4613      	mov	r3, r2
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4413      	add	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	18ca      	adds	r2, r1, r3
 800d2a0:	7cfb      	ldrb	r3, [r7, #19]
 800d2a2:	6879      	ldr	r1, [r7, #4]
 800d2a4:	440a      	add	r2, r1
 800d2a6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	460a      	mov	r2, r1
 800d2b0:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d2b2:	7cfb      	ldrb	r3, [r7, #19]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	74fb      	strb	r3, [r7, #19]
 800d2b8:	e7e7      	b.n	800d28a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d2cc:	e003      	b.n	800d2d6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	75bb      	strb	r3, [r7, #22]
 800d2d4:	e75c      	b.n	800d190 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d2d6:	e113      	b.n	800d500 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d11a      	bne.n	800d32a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d2fa:	b21a      	sxth	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d302:	021b      	lsls	r3, r3, #8
 800d304:	b21b      	sxth	r3, r3
 800d306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d30a:	b21b      	sxth	r3, r3
 800d30c:	4313      	orrs	r3, r2
 800d30e:	b21b      	sxth	r3, r3
 800d310:	b29a      	uxth	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d31c:	f043 0302 	orr.w	r3, r3, #2
 800d320:	b29a      	uxth	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d328:	e0f1      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2206      	movs	r2, #6
 800d32e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d332:	e0ec      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f040 80e2 	bne.w	800d504 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d346:	f043 0304 	orr.w	r3, r3, #4
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d358:	f023 0302 	bic.w	r3, r3, #2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d364:	e0ce      	b.n	800d504 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f040 80cb 	bne.w	800d508 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d372:	2300      	movs	r3, #0
 800d374:	74bb      	strb	r3, [r7, #18]
 800d376:	7cbb      	ldrb	r3, [r7, #18]
 800d378:	2b1d      	cmp	r3, #29
 800d37a:	d818      	bhi.n	800d3ae <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d37c:	7cbb      	ldrb	r3, [r7, #18]
 800d37e:	f103 0209 	add.w	r2, r3, #9
 800d382:	7cbb      	ldrb	r3, [r7, #18]
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	440a      	add	r2, r1
 800d388:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	4413      	add	r3, r2
 800d390:	460a      	mov	r2, r1
 800d392:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d396:	7cbb      	ldrb	r3, [r7, #18]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	4413      	add	r3, r2
 800d39c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d3a4:	7cbb      	ldrb	r3, [r7, #18]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	74bb      	strb	r3, [r7, #18]
 800d3aa:	e7e4      	b.n	800d376 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d3ac:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3b4:	f043 0308 	orr.w	r3, r3, #8
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d3c0:	e0a2      	b.n	800d508 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	747b      	strb	r3, [r7, #17]
 800d3c6:	7c7b      	ldrb	r3, [r7, #17]
 800d3c8:	2b05      	cmp	r3, #5
 800d3ca:	d80e      	bhi.n	800d3ea <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d3cc:	7c7b      	ldrb	r3, [r7, #17]
 800d3ce:	1c9a      	adds	r2, r3, #2
 800d3d0:	7c7b      	ldrb	r3, [r7, #17]
 800d3d2:	6879      	ldr	r1, [r7, #4]
 800d3d4:	440a      	add	r2, r1
 800d3d6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	4413      	add	r3, r2
 800d3de:	460a      	mov	r2, r1
 800d3e0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d3e2:	7c7b      	ldrb	r3, [r7, #17]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	747b      	strb	r3, [r7, #17]
 800d3e8:	e7ed      	b.n	800d3c6 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	743b      	strb	r3, [r7, #16]
 800d3ee:	7c3b      	ldrb	r3, [r7, #16]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d810      	bhi.n	800d416 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d3f4:	7c3b      	ldrb	r3, [r7, #16]
 800d3f6:	f103 0208 	add.w	r2, r3, #8
 800d3fa:	7c3b      	ldrb	r3, [r7, #16]
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	440a      	add	r2, r1
 800d400:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	4413      	add	r3, r2
 800d408:	460a      	mov	r2, r1
 800d40a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d40e:	7c3b      	ldrb	r3, [r7, #16]
 800d410:	3301      	adds	r3, #1
 800d412:	743b      	strb	r3, [r7, #16]
 800d414:	e7eb      	b.n	800d3ee <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d41c:	f003 030f 	and.w	r3, r3, #15
 800d420:	2b05      	cmp	r3, #5
 800d422:	d10a      	bne.n	800d43a <_ZN3BTD14HCI_event_taskEv+0x556>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d42a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d440:	f043 0310 	orr.w	r3, r3, #16
 800d444:	b29a      	uxth	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d44c:	e05f      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 feec 	bl	800e236 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d45e:	e056      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 fee4 	bl	800e236 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d46e:	e04e      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 ff93 	bl	800e39c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d476:	e04a      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 ffca 	bl	800e412 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d47e:	e046      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d486:	2b00      	cmp	r3, #0
 800d488:	d123      	bne.n	800d4d2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00c      	beq.n	800d4ae <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d49a:	f083 0301 	eor.w	r3, r3, #1
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d4ac:	e02e      	b.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d029      	beq.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x628>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d4be:	f083 0301 	eor.w	r3, r3, #1
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d021      	beq.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d4d0:	e01c      	b.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	8b5b      	ldrh	r3, [r3, #26]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f001 f882 	bl	800e5e2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2210      	movs	r2, #16
 800d4e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d4e6:	e011      	b.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 ffcd 	bl	800e488 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d4ee:	e00e      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f001 f810 	bl	800e516 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d4f6:	e00a      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d4f8:	bf00      	nop
 800d4fa:	e008      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d4fc:	bf00      	nop
 800d4fe:	e006      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d500:	bf00      	nop
 800d502:	e004      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d504:	bf00      	nop
 800d506:	e002      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d508:	bf00      	nop
 800d50a:	e000      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d50c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d50e:	bf00      	nop
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bdb0      	pop	{r4, r5, r7, pc}
 800d516:	bf00      	nop

0800d518 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d526:	2b13      	cmp	r3, #19
 800d528:	f200 82ef 	bhi.w	800db0a <_ZN3BTD8HCI_taskEv+0x5f2>
 800d52c:	a201      	add	r2, pc, #4	; (adr r2, 800d534 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d532:	bf00      	nop
 800d534:	0800d585 	.word	0x0800d585
 800d538:	0800d5bf 	.word	0x0800d5bf
 800d53c:	0800d645 	.word	0x0800d645
 800d540:	0800d665 	.word	0x0800d665
 800d544:	0800d685 	.word	0x0800d685
 800d548:	0800d6d9 	.word	0x0800d6d9
 800d54c:	0800d77f 	.word	0x0800d77f
 800d550:	0800d7ad 	.word	0x0800d7ad
 800d554:	0800d7e7 	.word	0x0800d7e7
 800d558:	0800d80f 	.word	0x0800d80f
 800d55c:	0800d845 	.word	0x0800d845
 800d560:	0800d8a3 	.word	0x0800d8a3
 800d564:	0800d8e1 	.word	0x0800d8e1
 800d568:	0800da07 	.word	0x0800da07
 800d56c:	0800db0b 	.word	0x0800db0b
 800d570:	0800da4d 	.word	0x0800da4d
 800d574:	0800da7b 	.word	0x0800da7b
 800d578:	0800d70f 	.word	0x0800d70f
 800d57c:	0800d745 	.word	0x0800d745
 800d580:	0800d765 	.word	0x0800d765
                case HCI_INIT_STATE:
                        hci_counter++;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d58a:	3301      	adds	r3, #1
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	f240 82b4 	bls.w	800db0e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fb7d 	bl	800dca6 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d5bc:	e2a7      	b.n	800db0e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00b      	beq.n	800d5f4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f001 f830 	bl	800e652 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d5f2:	e28e      	b.n	800db12 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d600:	429a      	cmp	r2, r3
 800d602:	f240 8286 	bls.w	800db12 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d60c:	461a      	mov	r2, r3
 800d60e:	0092      	lsls	r2, r2, #2
 800d610:	4413      	add	r3, r2
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	b29a      	uxth	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d622:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d626:	d904      	bls.n	800d632 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d62e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d642:	e266      	b.n	800db12 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8261 	beq.w	800db16 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2203      	movs	r2, #3
 800d658:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fb72 	bl	800dd46 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d662:	e258      	b.n	800db16 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f000 8253 	beq.w	800db1a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fb8a 	bl	800dd8e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2204      	movs	r2, #4
 800d67e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d682:	e24a      	b.n	800db1a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 8245 	beq.w	800db1e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00a      	beq.n	800d6b2 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fc5d 	bl	800df62 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2205      	movs	r2, #5
 800d6ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d6b0:	e235      	b.n	800db1e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d008      	beq.n	800d6ce <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d6bc:	2100      	movs	r1, #0
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fb89 	bl	800ddd6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2211      	movs	r2, #17
 800d6c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6cc:	e227      	b.n	800db1e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2206      	movs	r2, #6
 800d6d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6d6:	e222      	b.n	800db1e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f000 821d 	beq.w	800db22 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d008      	beq.n	800d704 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fb6e 	bl	800ddd6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2211      	movs	r2, #17
 800d6fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d702:	e20e      	b.n	800db22 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2206      	movs	r2, #6
 800d708:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d70c:	e209      	b.n	800db22 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 8204 	beq.w	800db26 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d724:	2b00      	cmp	r3, #0
 800d726:	d008      	beq.n	800d73a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d728:	2101      	movs	r1, #1
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 fc9d 	bl	800e06a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2212      	movs	r2, #18
 800d734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d738:	e1f5      	b.n	800db26 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2206      	movs	r2, #6
 800d73e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d742:	e1f0      	b.n	800db26 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 81eb 	beq.w	800db2a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fc4d 	bl	800dff4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2213      	movs	r2, #19
 800d75e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d762:	e1e2      	b.n	800db2a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 81dd 	beq.w	800db2e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2206      	movs	r2, #6
 800d778:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d77c:	e1d7      	b.n	800db2e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d784:	2b00      	cmp	r3, #0
 800d786:	d104      	bne.n	800d792 <_ZN3BTD8HCI_taskEv+0x27a>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d007      	beq.n	800d7a2 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 fc8f 	bl	800e0b6 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2207      	movs	r2, #7
 800d79c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d7a0:	e1d8      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	220a      	movs	r2, #10
 800d7a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7aa:	e1d3      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f000 81bb 	beq.w	800db32 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fcb2 	bl	800e126 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d007      	beq.n	800d7dc <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 fb74 	bl	800deba <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	220c      	movs	r2, #12
 800d7d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d7da:	e1aa      	b.n	800db32 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2208      	movs	r2, #8
 800d7e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7e4:	e1a5      	b.n	800db32 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 81a0 	beq.w	800db36 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 fcac 	bl	800e15c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2209      	movs	r2, #9
 800d808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d80c:	e193      	b.n	800db36 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 818e 	beq.w	800db3a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d007      	beq.n	800d83c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fead 	bl	800e58c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	220a      	movs	r2, #10
 800d836:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d83a:	e17e      	b.n	800db3a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fc8d 	bl	800e15c <_ZN3BTD11hci_connectEv>
                        break;
 800d842:	e17a      	b.n	800db3a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d84a:	f083 0301 	eor.w	r3, r3, #1
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b00      	cmp	r3, #0
 800d852:	f000 8174 	beq.w	800db3e <_ZN3BTD8HCI_taskEv+0x626>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d85c:	f083 0301 	eor.w	r3, r3, #1
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 816b 	beq.w	800db3e <_ZN3BTD8HCI_taskEv+0x626>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d86e:	f083 0301 	eor.w	r3, r3, #1
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 8162 	beq.w	800db3e <_ZN3BTD8HCI_taskEv+0x626>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d880:	f083 0301 	eor.w	r3, r3, #1
 800d884:	b2db      	uxtb	r3, r3
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 8159 	beq.w	800db3e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fa29 	bl	800dce4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	220b      	movs	r2, #11
 800d89c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d8a0:	e14d      	b.n	800db3e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8a8:	f003 0310 	and.w	r3, r3, #16
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00a      	beq.n	800d8c6 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 faff 	bl	800deba <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	220c      	movs	r2, #12
 800d8c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d8c4:	e13d      	b.n	800db42 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8cc:	f003 0304 	and.w	r3, r3, #4
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 8136 	beq.w	800db42 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2210      	movs	r2, #16
 800d8da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d8de:	e130      	b.n	800db42 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8e6:	f003 0308 	and.w	r3, r3, #8
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 812b 	beq.w	800db46 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	3322      	adds	r3, #34	; 0x22
 800d8f4:	2208      	movs	r2, #8
 800d8f6:	4999      	ldr	r1, [pc, #612]	; (800db5c <_ZN3BTD8HCI_taskEv+0x644>)
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f004 fe27 	bl	801254c <strncmp>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d147      	bne.n	800d994 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3322      	adds	r3, #34	; 0x22
 800d928:	2216      	movs	r2, #22
 800d92a:	498d      	ldr	r1, [pc, #564]	; (800db60 <_ZN3BTD8HCI_taskEv+0x648>)
 800d92c:	4618      	mov	r0, r3
 800d92e:	f004 fe0d 	bl	801254c <strncmp>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d104      	bne.n	800d942 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d940:	e028      	b.n	800d994 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	3322      	adds	r3, #34	; 0x22
 800d946:	2216      	movs	r2, #22
 800d948:	4986      	ldr	r1, [pc, #536]	; (800db64 <_ZN3BTD8HCI_taskEv+0x64c>)
 800d94a:	4618      	mov	r0, r3
 800d94c:	f004 fdfe 	bl	801254c <strncmp>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d110      	bne.n	800d978 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d976:	e00d      	b.n	800d994 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	3322      	adds	r3, #34	; 0x22
 800d97c:	2213      	movs	r2, #19
 800d97e:	497a      	ldr	r1, [pc, #488]	; (800db68 <_ZN3BTD8HCI_taskEv+0x650>)
 800d980:	4618      	mov	r0, r3
 800d982:	f004 fde3 	bl	801254c <strncmp>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d103      	bne.n	800d994 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d117      	bne.n	800d9ce <_ZN3BTD8HCI_taskEv+0x4b6>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d9a4:	2b25      	cmp	r3, #37	; 0x25
 800d9a6:	d112      	bne.n	800d9ce <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d9ae:	2b08      	cmp	r3, #8
 800d9b0:	d10d      	bne.n	800d9ce <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	3322      	adds	r3, #34	; 0x22
 800d9b6:	2213      	movs	r2, #19
 800d9b8:	496c      	ldr	r1, [pc, #432]	; (800db6c <_ZN3BTD8HCI_taskEv+0x654>)
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f004 fdc6 	bl	801254c <strncmp>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d103      	bne.n	800d9ce <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d104      	bne.n	800d9e2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d009      	beq.n	800d9f6 <_ZN3BTD8HCI_taskEv+0x4de>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2208      	movs	r2, #8
 800d9f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800d9f4:	e0a7      	b.n	800db46 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fa17 	bl	800de2a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	220d      	movs	r2, #13
 800da00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800da04:	e09f      	b.n	800db46 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da0c:	f003 0302 	and.w	r3, r3, #2
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 809a 	beq.w	800db4a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	220f      	movs	r2, #15
 800da46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da4a:	e07e      	b.n	800db4a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800da52:	3301      	adds	r3, #1
 800da54:	b29a      	uxth	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800da62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da66:	d972      	bls.n	800db4e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	220a      	movs	r2, #10
 800da74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da78:	e069      	b.n	800db4e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da80:	f003 0304 	and.w	r3, r3, #4
 800da84:	2b00      	cmp	r3, #0
 800da86:	d064      	beq.n	800db52 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3389      	adds	r3, #137	; 0x89
 800da94:	2240      	movs	r2, #64	; 0x40
 800da96:	2100      	movs	r1, #0
 800da98:	4618      	mov	r0, r3
 800da9a:	f004 fd0b 	bl	80124b4 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	33c9      	adds	r3, #201	; 0xc9
 800daa2:	2240      	movs	r2, #64	; 0x40
 800daa4:	2100      	movs	r1, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f004 fd04 	bl	80124b4 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	220a      	movs	r2, #10
 800db04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800db08:	e023      	b.n	800db52 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800db0a:	bf00      	nop
 800db0c:	e022      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db0e:	bf00      	nop
 800db10:	e020      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db12:	bf00      	nop
 800db14:	e01e      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db16:	bf00      	nop
 800db18:	e01c      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db1a:	bf00      	nop
 800db1c:	e01a      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db1e:	bf00      	nop
 800db20:	e018      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db22:	bf00      	nop
 800db24:	e016      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db26:	bf00      	nop
 800db28:	e014      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db2a:	bf00      	nop
 800db2c:	e012      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db2e:	bf00      	nop
 800db30:	e010      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db32:	bf00      	nop
 800db34:	e00e      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db36:	bf00      	nop
 800db38:	e00c      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db3a:	bf00      	nop
 800db3c:	e00a      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db3e:	bf00      	nop
 800db40:	e008      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db42:	bf00      	nop
 800db44:	e006      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db46:	bf00      	nop
 800db48:	e004      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db4a:	bf00      	nop
 800db4c:	e002      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db4e:	bf00      	nop
 800db50:	e000      	b.n	800db54 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db52:	bf00      	nop
        }
}
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	080126ac 	.word	0x080126ac
 800db60:	080126b8 	.word	0x080126b8
 800db64:	080126d0 	.word	0x080126d0
 800db68:	080126e8 	.word	0x080126e8
 800db6c:	080126fc 	.word	0x080126fc

0800db70 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800db70:	b5b0      	push	{r4, r5, r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af02      	add	r7, sp, #8
 800db76:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800db78:	2340      	movs	r3, #64	; 0x40
 800db7a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	33c9      	adds	r3, #201	; 0xc9
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800db96:	f107 050a 	add.w	r5, r7, #10
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	462b      	mov	r3, r5
 800dba0:	4622      	mov	r2, r4
 800dba2:	f003 f92c 	bl	8010dfe <_ZN3USB10inTransferEhhPtPhh>
 800dba6:	4603      	mov	r3, r0
 800dba8:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800dbaa:	7b7b      	ldrb	r3, [r7, #13]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d125      	bne.n	800dbfc <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800dbb0:	897b      	ldrh	r3, [r7, #10]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d022      	beq.n	800dbfc <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	2b03      	cmp	r3, #3
 800dbbe:	d81d      	bhi.n	800dbfc <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	3318      	adds	r3, #24
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d011      	beq.n	800dbf4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	3318      	adds	r3, #24
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	6858      	ldr	r0, [r3, #4]
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	3318      	adds	r3, #24
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	32c9      	adds	r2, #201	; 0xc9
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	73fb      	strb	r3, [r7, #15]
 800dbfa:	e7de      	b.n	800dbba <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73bb      	strb	r3, [r7, #14]
 800dc00:	7bbb      	ldrb	r3, [r7, #14]
 800dc02:	2b03      	cmp	r3, #3
 800dc04:	d81c      	bhi.n	800dc40 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	3318      	adds	r3, #24
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d010      	beq.n	800dc38 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	3318      	adds	r3, #24
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	6859      	ldr	r1, [r3, #4]
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	3318      	adds	r3, #24
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3304      	adds	r3, #4
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4608      	mov	r0, r1
 800dc36:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	73bb      	strb	r3, [r7, #14]
 800dc3e:	e7df      	b.n	800dc00 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800dc40:	bf00      	nop
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bdb0      	pop	{r4, r5, r7, pc}

0800dc48 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08c      	sub	sp, #48	; 0x30
 800dc4c:	af08      	add	r7, sp, #32
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	4613      	mov	r3, r2
 800dc54:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dc5c:	f023 0301 	bic.w	r3, r3, #1
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dc78:	2300      	movs	r3, #0
 800dc7a:	9307      	str	r3, [sp, #28]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	9306      	str	r3, [sp, #24]
 800dc80:	88fb      	ldrh	r3, [r7, #6]
 800dc82:	9305      	str	r3, [sp, #20]
 800dc84:	88fb      	ldrh	r3, [r7, #6]
 800dc86:	9304      	str	r3, [sp, #16]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	9303      	str	r3, [sp, #12]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	9302      	str	r3, [sp, #8]
 800dc90:	2300      	movs	r3, #0
 800dc92:	9301      	str	r3, [sp, #4]
 800dc94:	2300      	movs	r3, #0
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	2320      	movs	r3, #32
 800dc9a:	f002 ffd8 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2203      	movs	r2, #3
 800dcba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	220c      	movs	r2, #12
 800dcc2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3389      	adds	r3, #137	; 0x89
 800dcd2:	2203      	movs	r2, #3
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff ffb6 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dcf2:	f023 0310 	bic.w	r3, r3, #16
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	221a      	movs	r2, #26
 800dd02:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	220c      	movs	r2, #12
 800dd0a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d004      	beq.n	800dd28 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2203      	movs	r2, #3
 800dd22:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dd26:	e003      	b.n	800dd30 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	3389      	adds	r3, #137	; 0x89
 800dd34:	2204      	movs	r2, #4
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f7ff ff85 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800dd3e:	bf00      	nop
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b082      	sub	sp, #8
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd54:	f023 0320 	bic.w	r3, r3, #32
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2209      	movs	r2, #9
 800dd64:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2210      	movs	r2, #16
 800dd6c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	3389      	adds	r3, #137	; 0x89
 800dd7c:	2203      	movs	r2, #3
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ff61 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b082      	sub	sp, #8
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2210      	movs	r2, #16
 800ddb4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	3389      	adds	r3, #137	; 0x89
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7ff ff3d 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800ddce:	bf00      	nop
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b082      	sub	sp, #8
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	460b      	mov	r3, r1
 800dde0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dde8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2204      	movs	r2, #4
 800ddf8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2210      	movs	r2, #16
 800de00:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	78fa      	ldrb	r2, [r7, #3]
 800de10:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3389      	adds	r3, #137	; 0x89
 800de18:	2204      	movs	r2, #4
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7ff ff13 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800de22:	bf00      	nop
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b082      	sub	sp, #8
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de38:	f023 0302 	bic.w	r3, r3, #2
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2209      	movs	r2, #9
 800de48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2204      	movs	r2, #4
 800de50:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2207      	movs	r2, #7
 800de58:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	7f1a      	ldrb	r2, [r3, #28]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	7f5a      	ldrb	r2, [r3, #29]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	7f9a      	ldrb	r2, [r3, #30]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	7fda      	ldrb	r2, [r3, #31]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 2020 	ldrb.w	r2, [r3, #32]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3389      	adds	r3, #137	; 0x89
 800dea8:	220a      	movs	r2, #10
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7ff fecb 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800deb2:	bf00      	nop
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800deba:	b580      	push	{r7, lr}
 800debc:	b082      	sub	sp, #8
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dec8:	f023 0308 	bic.w	r3, r3, #8
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2219      	movs	r2, #25
 800ded8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2204      	movs	r2, #4
 800dee0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	220a      	movs	r2, #10
 800dee8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	7f1a      	ldrb	r2, [r3, #28]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	7f5a      	ldrb	r2, [r3, #29]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	7f9a      	ldrb	r2, [r3, #30]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7fda      	ldrb	r2, [r3, #31]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	3389      	adds	r3, #137	; 0x89
 800df50:	220d      	movs	r2, #13
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff fe77 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800df5a:	bf00      	nop
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800df62:	b590      	push	{r4, r7, lr}
 800df64:	b085      	sub	sp, #20
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2213      	movs	r2, #19
 800df70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	220c      	movs	r2, #12
 800df78:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800df7c:	6838      	ldr	r0, [r7, #0]
 800df7e:	f7f2 f947 	bl	8000210 <strlen>
 800df82:	4603      	mov	r3, r0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	3301      	adds	r3, #1
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800df90:	2300      	movs	r3, #0
 800df92:	73fb      	strb	r3, [r7, #15]
 800df94:	7bfc      	ldrb	r4, [r7, #15]
 800df96:	6838      	ldr	r0, [r7, #0]
 800df98:	f7f2 f93a 	bl	8000210 <strlen>
 800df9c:	4603      	mov	r3, r0
 800df9e:	429c      	cmp	r4, r3
 800dfa0:	d20e      	bcs.n	800dfc0 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	441a      	add	r2, r3
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	3303      	adds	r3, #3
 800dfac:	7811      	ldrb	r1, [r2, #0]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	460a      	mov	r2, r1
 800dfb4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	73fb      	strb	r3, [r7, #15]
 800dfbe:	e7e9      	b.n	800df94 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
 800dfc2:	3303      	adds	r3, #3
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800dfd4:	6838      	ldr	r0, [r7, #0]
 800dfd6:	f7f2 f91b 	bl	8000210 <strlen>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	3304      	adds	r3, #4
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff fe2e 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800dfec:	bf00      	nop
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd90      	pop	{r4, r7, pc}

0800dff4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	220c      	movs	r2, #12
 800e008:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2208      	movs	r2, #8
 800e010:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	22ff      	movs	r2, #255	; 0xff
 800e018:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	22ff      	movs	r2, #255	; 0xff
 800e020:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	22ff      	movs	r2, #255	; 0xff
 800e028:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	22ff      	movs	r2, #255	; 0xff
 800e030:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	22ff      	movs	r2, #255	; 0xff
 800e038:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	221f      	movs	r2, #31
 800e040:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	22ff      	movs	r2, #255	; 0xff
 800e048:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	3389      	adds	r3, #137	; 0x89
 800e058:	220b      	movs	r2, #11
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fdf3 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b082      	sub	sp, #8
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
 800e072:	460b      	mov	r3, r1
 800e074:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2256      	movs	r2, #86	; 0x56
 800e07a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	220c      	movs	r2, #12
 800e082:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800e08e:	78fb      	ldrb	r3, [r7, #3]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800e094:	2201      	movs	r2, #1
 800e096:	e000      	b.n	800e09a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800e098:	2200      	movs	r2, #0
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	3389      	adds	r3, #137	; 0x89
 800e0a4:	2204      	movs	r2, #4
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7ff fdcd 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e0ae:	bf00      	nop
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b082      	sub	sp, #8
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e0c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2204      	movs	r2, #4
 800e0dc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2205      	movs	r2, #5
 800e0e4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2233      	movs	r2, #51	; 0x33
 800e0ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	228b      	movs	r2, #139	; 0x8b
 800e0f4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	229e      	movs	r2, #158	; 0x9e
 800e0fc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2230      	movs	r2, #48	; 0x30
 800e104:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	220a      	movs	r2, #10
 800e10c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3389      	adds	r3, #137	; 0x89
 800e114:	2208      	movs	r2, #8
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff fd95 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e11e:	bf00      	nop
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2202      	movs	r2, #2
 800e132:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2204      	movs	r2, #4
 800e13a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	3389      	adds	r3, #137	; 0x89
 800e14a:	2203      	movs	r2, #3
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7ff fd7a 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	331c      	adds	r3, #28
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f804 	bl	800e178 <_ZN3BTD11hci_connectEPh>
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e188:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2205      	movs	r2, #5
 800e198:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2204      	movs	r2, #4
 800e1a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	220d      	movs	r2, #13
 800e1a8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	781a      	ldrb	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	785a      	ldrb	r2, [r3, #1]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	789a      	ldrb	r2, [r3, #2]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	78da      	ldrb	r2, [r3, #3]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	791a      	ldrb	r2, [r3, #4]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	795a      	ldrb	r2, [r3, #5]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2218      	movs	r2, #24
 800e1ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	22cc      	movs	r2, #204	; 0xcc
 800e1f4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3389      	adds	r3, #137	; 0x89
 800e224:	2210      	movs	r2, #16
 800e226:	4619      	mov	r1, r3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff fd0d 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800e236:	b590      	push	{r4, r7, lr}
 800e238:	b085      	sub	sp, #20
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	220d      	movs	r2, #13
 800e242:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2204      	movs	r2, #4
 800e24a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2217      	movs	r2, #23
 800e252:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7f1a      	ldrb	r2, [r3, #28]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	7f5a      	ldrb	r2, [r3, #29]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	7f9a      	ldrb	r2, [r3, #30]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	7fda      	ldrb	r2, [r3, #31]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d03f      	beq.n	800e320 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2206      	movs	r2, #6
 800e2a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d013      	beq.n	800e2da <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	73fb      	strb	r3, [r7, #15]
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
 800e2b8:	2b05      	cmp	r3, #5
 800e2ba:	d822      	bhi.n	800e302 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e2bc:	7bfa      	ldrb	r2, [r7, #15]
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	330a      	adds	r3, #10
 800e2c2:	6879      	ldr	r1, [r7, #4]
 800e2c4:	440a      	add	r2, r1
 800e2c6:	7d11      	ldrb	r1, [r2, #20]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	460a      	mov	r2, r1
 800e2ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]
 800e2d8:	e7ed      	b.n	800e2b6 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e2da:	2300      	movs	r3, #0
 800e2dc:	73bb      	strb	r3, [r7, #14]
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	2b05      	cmp	r3, #5
 800e2e2:	d80e      	bhi.n	800e302 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e2e4:	7bba      	ldrb	r2, [r7, #14]
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	330a      	adds	r3, #10
 800e2ea:	6879      	ldr	r1, [r7, #4]
 800e2ec:	440a      	add	r2, r1
 800e2ee:	7f11      	ldrb	r1, [r2, #28]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	460a      	mov	r2, r1
 800e2f6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e2fa:	7bbb      	ldrb	r3, [r7, #14]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	73bb      	strb	r3, [r7, #14]
 800e300:	e7ed      	b.n	800e2de <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e302:	2310      	movs	r3, #16
 800e304:	737b      	strb	r3, [r7, #13]
 800e306:	7b7b      	ldrb	r3, [r7, #13]
 800e308:	2b19      	cmp	r3, #25
 800e30a:	d83c      	bhi.n	800e386 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e30c:	7b7b      	ldrb	r3, [r7, #13]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	4413      	add	r3, r2
 800e312:	2200      	movs	r2, #0
 800e314:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e318:	7b7b      	ldrb	r3, [r7, #13]
 800e31a:	3301      	adds	r3, #1
 800e31c:	737b      	strb	r3, [r7, #13]
 800e31e:	e7f2      	b.n	800e306 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	4618      	mov	r0, r3
 800e326:	f7f1 ff73 	bl	8000210 <strlen>
 800e32a:	4603      	mov	r3, r0
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e334:	2300      	movs	r3, #0
 800e336:	733b      	strb	r3, [r7, #12]
 800e338:	7b3c      	ldrb	r4, [r7, #12]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	4618      	mov	r0, r3
 800e340:	f7f1 ff66 	bl	8000210 <strlen>
 800e344:	4603      	mov	r3, r0
 800e346:	429c      	cmp	r4, r3
 800e348:	d20f      	bcs.n	800e36a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	691a      	ldr	r2, [r3, #16]
 800e34e:	7b3b      	ldrb	r3, [r7, #12]
 800e350:	441a      	add	r2, r3
 800e352:	7b3b      	ldrb	r3, [r7, #12]
 800e354:	330a      	adds	r3, #10
 800e356:	7811      	ldrb	r1, [r2, #0]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	4413      	add	r3, r2
 800e35c:	460a      	mov	r2, r1
 800e35e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e362:	7b3b      	ldrb	r3, [r7, #12]
 800e364:	3301      	adds	r3, #1
 800e366:	733b      	strb	r3, [r7, #12]
 800e368:	e7e6      	b.n	800e338 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e36a:	7b3b      	ldrb	r3, [r7, #12]
 800e36c:	2b0f      	cmp	r3, #15
 800e36e:	d80a      	bhi.n	800e386 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e370:	7b3b      	ldrb	r3, [r7, #12]
 800e372:	330a      	adds	r3, #10
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4413      	add	r3, r2
 800e378:	2200      	movs	r2, #0
 800e37a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e37e:	7b3b      	ldrb	r3, [r7, #12]
 800e380:	3301      	adds	r3, #1
 800e382:	733b      	strb	r3, [r7, #12]
 800e384:	e7f1      	b.n	800e36a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3389      	adds	r3, #137	; 0x89
 800e38a:	221a      	movs	r2, #26
 800e38c:	4619      	mov	r1, r3
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7ff fc5a 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e394:	bf00      	nop
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd90      	pop	{r4, r7, pc}

0800e39c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	220e      	movs	r2, #14
 800e3a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2204      	movs	r2, #4
 800e3b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2206      	movs	r2, #6
 800e3b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7f1a      	ldrb	r2, [r3, #28]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	7f5a      	ldrb	r2, [r3, #29]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	7f9a      	ldrb	r2, [r3, #30]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	7fda      	ldrb	r2, [r3, #31]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3389      	adds	r3, #137	; 0x89
 800e400:	2209      	movs	r2, #9
 800e402:	4619      	mov	r1, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff fc1f 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e40a:	bf00      	nop
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e412:	b580      	push	{r7, lr}
 800e414:	b082      	sub	sp, #8
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	220c      	movs	r2, #12
 800e41e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2204      	movs	r2, #4
 800e426:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2206      	movs	r2, #6
 800e42e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7f1a      	ldrb	r2, [r3, #28]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	7f5a      	ldrb	r2, [r3, #29]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7f9a      	ldrb	r2, [r3, #30]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	7fda      	ldrb	r2, [r3, #31]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	3389      	adds	r3, #137	; 0x89
 800e476:	2209      	movs	r2, #9
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff fbe4 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	222b      	movs	r2, #43	; 0x2b
 800e494:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2204      	movs	r2, #4
 800e49c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2209      	movs	r2, #9
 800e4a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7f1a      	ldrb	r2, [r3, #28]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	7f5a      	ldrb	r2, [r3, #29]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	7f9a      	ldrb	r2, [r3, #30]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	7fda      	ldrb	r2, [r3, #31]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2203      	movs	r2, #3
 800e4ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3389      	adds	r3, #137	; 0x89
 800e504:	220c      	movs	r2, #12
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff fb9d 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e50e:	bf00      	nop
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e516:	b580      	push	{r7, lr}
 800e518:	b082      	sub	sp, #8
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	222c      	movs	r2, #44	; 0x2c
 800e522:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2204      	movs	r2, #4
 800e52a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2206      	movs	r2, #6
 800e532:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7f1a      	ldrb	r2, [r3, #28]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	7f5a      	ldrb	r2, [r3, #29]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	7f9a      	ldrb	r2, [r3, #30]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	7fda      	ldrb	r2, [r3, #31]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3389      	adds	r3, #137	; 0x89
 800e57a:	2209      	movs	r2, #9
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff fb62 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2211      	movs	r2, #17
 800e598:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2204      	movs	r2, #4
 800e5a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2202      	movs	r2, #2
 800e5a8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	8b5b      	ldrh	r3, [r3, #26]
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	8b5b      	ldrh	r3, [r3, #26]
 800e5bc:	121b      	asrs	r3, r3, #8
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	f003 030f 	and.w	r3, r3, #15
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	3389      	adds	r3, #137	; 0x89
 800e5d0:	2205      	movs	r2, #5
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff fb37 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e5da:	bf00      	nop
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b082      	sub	sp, #8
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5f4:	f023 0304 	bic.w	r3, r3, #4
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2206      	movs	r2, #6
 800e604:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2204      	movs	r2, #4
 800e60c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2203      	movs	r2, #3
 800e614:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e618:	887b      	ldrh	r3, [r7, #2]
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e622:	887b      	ldrh	r3, [r7, #2]
 800e624:	121b      	asrs	r3, r3, #8
 800e626:	b2db      	uxtb	r3, r3
 800e628:	f003 030f 	and.w	r3, r3, #15
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2213      	movs	r2, #19
 800e638:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3389      	adds	r3, #137	; 0x89
 800e640:	2206      	movs	r2, #6
 800e642:	4619      	mov	r1, r3
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff faff 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e64a:	bf00      	nop
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e652:	b580      	push	{r7, lr}
 800e654:	b082      	sub	sp, #8
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2224      	movs	r2, #36	; 0x24
 800e65e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	220c      	movs	r2, #12
 800e666:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2203      	movs	r2, #3
 800e66e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2204      	movs	r2, #4
 800e676:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2208      	movs	r2, #8
 800e67e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3389      	adds	r3, #137	; 0x89
 800e68e:	2206      	movs	r2, #6
 800e690:	4619      	mov	r1, r3
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff fad8 	bl	800dc48 <_ZN3BTD11HCI_CommandEPht>
}
 800e698:	bf00      	nop
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e6a0:	b5b0      	push	{r4, r5, r7, lr}
 800e6a2:	b08a      	sub	sp, #40	; 0x28
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	607a      	str	r2, [r7, #4]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	817b      	strh	r3, [r7, #10]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e6b4:	466b      	mov	r3, sp
 800e6b6:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e6b8:	7a7b      	ldrb	r3, [r7, #9]
 800e6ba:	1ddc      	adds	r4, r3, #7
 800e6bc:	61bc      	str	r4, [r7, #24]
 800e6be:	4623      	mov	r3, r4
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f04f 0100 	mov.w	r1, #0
 800e6c8:	f04f 0200 	mov.w	r2, #0
 800e6cc:	f04f 0300 	mov.w	r3, #0
 800e6d0:	00cb      	lsls	r3, r1, #3
 800e6d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e6d6:	00c2      	lsls	r2, r0, #3
 800e6d8:	4623      	mov	r3, r4
 800e6da:	3301      	adds	r3, #1
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f04f 0100 	mov.w	r1, #0
 800e6e2:	f04f 0200 	mov.w	r2, #0
 800e6e6:	f04f 0300 	mov.w	r3, #0
 800e6ea:	00cb      	lsls	r3, r1, #3
 800e6ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e6f0:	00c2      	lsls	r2, r0, #3
 800e6f2:	4623      	mov	r3, r4
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	3307      	adds	r3, #7
 800e6f8:	08db      	lsrs	r3, r3, #3
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	ebad 0d03 	sub.w	sp, sp, r3
 800e700:	ab02      	add	r3, sp, #8
 800e702:	3300      	adds	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e706:	897b      	ldrh	r3, [r7, #10]
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e70e:	897b      	ldrh	r3, [r7, #10]
 800e710:	121b      	asrs	r3, r3, #8
 800e712:	b25b      	sxtb	r3, r3
 800e714:	f003 030f 	and.w	r3, r3, #15
 800e718:	b25b      	sxtb	r3, r3
 800e71a:	f043 0320 	orr.w	r3, r3, #32
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	b2da      	uxtb	r2, r3
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e726:	7a7b      	ldrb	r3, [r7, #9]
 800e728:	3304      	adds	r3, #4
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e730:	7a7b      	ldrb	r3, [r7, #9]
 800e732:	3304      	adds	r3, #4
 800e734:	121b      	asrs	r3, r3, #8
 800e736:	b2da      	uxtb	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	7a7a      	ldrb	r2, [r7, #9]
 800e740:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e742:	7a7b      	ldrb	r3, [r7, #9]
 800e744:	121b      	asrs	r3, r3, #8
 800e746:	b2da      	uxtb	r2, r3
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e752:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e75a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e75c:	2300      	movs	r3, #0
 800e75e:	83fb      	strh	r3, [r7, #30]
 800e760:	7a7b      	ldrb	r3, [r7, #9]
 800e762:	b29b      	uxth	r3, r3
 800e764:	8bfa      	ldrh	r2, [r7, #30]
 800e766:	429a      	cmp	r2, r3
 800e768:	d20b      	bcs.n	800e782 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e76a:	8bfb      	ldrh	r3, [r7, #30]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	441a      	add	r2, r3
 800e770:	8bfb      	ldrh	r3, [r7, #30]
 800e772:	3308      	adds	r3, #8
 800e774:	7811      	ldrb	r1, [r2, #0]
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e77a:	8bfb      	ldrh	r3, [r7, #30]
 800e77c:	3301      	adds	r3, #1
 800e77e:	83fb      	strh	r3, [r7, #30]
 800e780:	e7ee      	b.n	800e760 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e792:	7a7b      	ldrb	r3, [r7, #9]
 800e794:	b29b      	uxth	r3, r3
 800e796:	3308      	adds	r3, #8
 800e798:	b29c      	uxth	r4, r3
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	4623      	mov	r3, r4
 800e7a0:	f002 fc34 	bl	801100c <_ZN3USB11outTransferEhhtPh>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e7a8:	7cfb      	ldrb	r3, [r7, #19]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d002      	beq.n	800e7b4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e7ae:	2064      	movs	r0, #100	; 0x64
 800e7b0:	f7f3 fb5e 	bl	8001e70 <HAL_Delay>
 800e7b4:	46ad      	mov	sp, r5
}
 800e7b6:	bf00      	nop
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bdb0      	pop	{r4, r5, r7, pc}

0800e7be <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b086      	sub	sp, #24
 800e7c2:	af02      	add	r7, sp, #8
 800e7c4:	60f8      	str	r0, [r7, #12]
 800e7c6:	607b      	str	r3, [r7, #4]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	817b      	strh	r3, [r7, #10]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	7a7a      	ldrb	r2, [r7, #9]
 800e7dc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2204      	movs	r2, #4
 800e7e4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e7f0:	8b3b      	ldrh	r3, [r7, #24]
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e7fa:	8b3b      	ldrh	r3, [r7, #24]
 800e7fc:	121b      	asrs	r3, r3, #8
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	781a      	ldrb	r2, [r3, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	785a      	ldrb	r2, [r3, #1]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e820:	8979      	ldrh	r1, [r7, #10]
 800e822:	2300      	movs	r3, #0
 800e824:	9301      	str	r3, [sp, #4]
 800e826:	2301      	movs	r3, #1
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	2308      	movs	r3, #8
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f7ff ff37 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e832:	bf00      	nop
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b086      	sub	sp, #24
 800e83e:	af02      	add	r7, sp, #8
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	607b      	str	r3, [r7, #4]
 800e844:	460b      	mov	r3, r1
 800e846:	817b      	strh	r3, [r7, #10]
 800e848:	4613      	mov	r3, r2
 800e84a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2203      	movs	r2, #3
 800e850:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	7a7a      	ldrb	r2, [r7, #9]
 800e858:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2208      	movs	r2, #8
 800e860:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	781a      	ldrb	r2, [r3, #0]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	785a      	ldrb	r2, [r3, #1]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	781a      	ldrb	r2, [r3, #0]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	785a      	ldrb	r2, [r3, #1]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	7f3a      	ldrb	r2, [r7, #28]
 800e898:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e8ba:	8979      	ldrh	r1, [r7, #10]
 800e8bc:	2300      	movs	r3, #0
 800e8be:	9301      	str	r3, [sp, #4]
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	230c      	movs	r3, #12
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	f7ff feea 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af02      	add	r7, sp, #8
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	607b      	str	r3, [r7, #4]
 800e8de:	460b      	mov	r3, r1
 800e8e0:	817b      	strh	r3, [r7, #10]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2204      	movs	r2, #4
 800e8ea:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	7a7a      	ldrb	r2, [r7, #9]
 800e8f2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2208      	movs	r2, #8
 800e8fa:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	785a      	ldrb	r2, [r3, #1]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2202      	movs	r2, #2
 800e936:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	22ff      	movs	r2, #255	; 0xff
 800e93e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	22ff      	movs	r2, #255	; 0xff
 800e946:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e950:	8979      	ldrh	r1, [r7, #10]
 800e952:	2300      	movs	r3, #0
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	2301      	movs	r3, #1
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	230c      	movs	r3, #12
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7ff fe9f 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b086      	sub	sp, #24
 800e96e:	af02      	add	r7, sp, #8
 800e970:	60f8      	str	r0, [r7, #12]
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	817b      	strh	r3, [r7, #10]
 800e978:	4613      	mov	r3, r2
 800e97a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2205      	movs	r2, #5
 800e980:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	7a7a      	ldrb	r2, [r7, #9]
 800e988:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	220a      	movs	r2, #10
 800e990:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	781a      	ldrb	r2, [r3, #0]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	785a      	ldrb	r2, [r3, #1]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	22a0      	movs	r2, #160	; 0xa0
 800e9e4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e9f6:	8979      	ldrh	r1, [r7, #10]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	230e      	movs	r3, #14
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f7ff fe4c 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea08:	bf00      	nop
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af02      	add	r7, sp, #8
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	607b      	str	r3, [r7, #4]
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	817b      	strh	r3, [r7, #10]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2206      	movs	r2, #6
 800ea26:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	7a7a      	ldrb	r2, [r7, #9]
 800ea2e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2204      	movs	r2, #4
 800ea36:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	781a      	ldrb	r2, [r3, #0]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	785a      	ldrb	r2, [r3, #1]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	781a      	ldrb	r2, [r3, #0]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	785a      	ldrb	r2, [r3, #1]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea70:	8979      	ldrh	r1, [r7, #10]
 800ea72:	2300      	movs	r3, #0
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	2301      	movs	r3, #1
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	2308      	movs	r3, #8
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff fe0f 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea82:	bf00      	nop
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b086      	sub	sp, #24
 800ea8e:	af02      	add	r7, sp, #8
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	607b      	str	r3, [r7, #4]
 800ea94:	460b      	mov	r3, r1
 800ea96:	817b      	strh	r3, [r7, #10]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2207      	movs	r2, #7
 800eaa0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	7a7a      	ldrb	r2, [r7, #9]
 800eaa8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2204      	movs	r2, #4
 800eab0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	781a      	ldrb	r2, [r3, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	785a      	ldrb	r2, [r3, #1]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	781a      	ldrb	r2, [r3, #0]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	785a      	ldrb	r2, [r3, #1]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eaea:	8979      	ldrh	r1, [r7, #10]
 800eaec:	2300      	movs	r3, #0
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	2308      	movs	r3, #8
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff fdd2 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eafc:	bf00      	nop
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	4608      	mov	r0, r1
 800eb0e:	4611      	mov	r1, r2
 800eb10:	461a      	mov	r2, r3
 800eb12:	4603      	mov	r3, r0
 800eb14:	807b      	strh	r3, [r7, #2]
 800eb16:	460b      	mov	r3, r1
 800eb18:	707b      	strb	r3, [r7, #1]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	220b      	movs	r2, #11
 800eb22:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	787a      	ldrb	r2, [r7, #1]
 800eb2a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2208      	movs	r2, #8
 800eb32:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	783a      	ldrb	r2, [r7, #0]
 800eb42:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7c3a      	ldrb	r2, [r7, #16]
 800eb4a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb84:	8879      	ldrh	r1, [r7, #2]
 800eb86:	2300      	movs	r3, #0
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	230c      	movs	r3, #12
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7ff fd85 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eb96:	bf00      	nop
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b08e      	sub	sp, #56	; 0x38
 800eba2:	af08      	add	r7, sp, #32
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800ebac:	2300      	movs	r3, #0
 800ebae:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	75fb      	strb	r3, [r7, #23]
 800ebb4:	7dfb      	ldrb	r3, [r7, #23]
 800ebb6:	2b05      	cmp	r3, #5
 800ebb8:	d811      	bhi.n	800ebde <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ebba:	7dfb      	ldrb	r3, [r7, #23]
 800ebbc:	f1c3 0305 	rsb	r3, r3, #5
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	441a      	add	r2, r3
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	3302      	adds	r3, #2
 800ebca:	7812      	ldrb	r2, [r2, #0]
 800ebcc:	f107 0118 	add.w	r1, r7, #24
 800ebd0:	440b      	add	r3, r1
 800ebd2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	75fb      	strb	r3, [r7, #23]
 800ebdc:	e7ea      	b.n	800ebb4 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ebee:	2300      	movs	r3, #0
 800ebf0:	9307      	str	r3, [sp, #28]
 800ebf2:	f107 030c 	add.w	r3, r7, #12
 800ebf6:	9306      	str	r3, [sp, #24]
 800ebf8:	2308      	movs	r3, #8
 800ebfa:	9305      	str	r3, [sp, #20]
 800ebfc:	2308      	movs	r3, #8
 800ebfe:	9304      	str	r3, [sp, #16]
 800ec00:	2300      	movs	r3, #0
 800ec02:	9303      	str	r3, [sp, #12]
 800ec04:	2303      	movs	r3, #3
 800ec06:	9302      	str	r3, [sp, #8]
 800ec08:	23f5      	movs	r3, #245	; 0xf5
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	2309      	movs	r3, #9
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	2321      	movs	r3, #33	; 0x21
 800ec12:	f002 f81c 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec16:	bf00      	nop
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b08e      	sub	sp, #56	; 0x38
 800ec22:	af08      	add	r7, sp, #32
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ec28:	2305      	movs	r3, #5
 800ec2a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ec30:	2301      	movs	r3, #1
 800ec32:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ec34:	2302      	movs	r3, #2
 800ec36:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ec38:	2312      	movs	r3, #18
 800ec3a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	75fb      	strb	r3, [r7, #23]
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	2b05      	cmp	r3, #5
 800ec44:	d80e      	bhi.n	800ec64 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	441a      	add	r2, r3
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	7812      	ldrb	r2, [r2, #0]
 800ec52:	f107 0118 	add.w	r1, r7, #24
 800ec56:	440b      	add	r3, r1
 800ec58:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	75fb      	strb	r3, [r7, #23]
 800ec62:	e7ed      	b.n	800ec40 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ec74:	2300      	movs	r3, #0
 800ec76:	9307      	str	r3, [sp, #28]
 800ec78:	f107 030c 	add.w	r3, r7, #12
 800ec7c:	9306      	str	r3, [sp, #24]
 800ec7e:	230b      	movs	r3, #11
 800ec80:	9305      	str	r3, [sp, #20]
 800ec82:	230b      	movs	r3, #11
 800ec84:	9304      	str	r3, [sp, #16]
 800ec86:	2300      	movs	r3, #0
 800ec88:	9303      	str	r3, [sp, #12]
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	9302      	str	r3, [sp, #8]
 800ec8e:	2305      	movs	r3, #5
 800ec90:	9301      	str	r3, [sp, #4]
 800ec92:	2309      	movs	r3, #9
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	2321      	movs	r3, #33	; 0x21
 800ec98:	f001 ffd9 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec9c:	bf00      	nop
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	4a04      	ldr	r2, [pc, #16]	; (800ecc0 <_ZN13USBReadParserC1Ev+0x1c>)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	601a      	str	r2, [r3, #0]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr
 800ecc0:	08012874 	.word	0x08012874

0800ecc4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff ffe7 	bl	800eca4 <_ZN13USBReadParserC1Ev>
 800ecd6:	4a21      	ldr	r2, [pc, #132]	; (800ed5c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	683a      	ldr	r2, [r7, #0]
 800ece0:	605a      	str	r2, [r3, #4]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3308      	adds	r3, #8
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd fb65 	bl	800c3b6 <_ZN16MultiValueBufferC1Ev>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3310      	adds	r3, #16
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd fb77 	bl	800c3e4 <_ZN20MultiByteValueParserC1Ev>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	3318      	adds	r3, #24
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd fb9e 	bl	800c43c <_ZN11ByteSkipperC1Ev>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f103 0220 	add.w	r2, r3, #32
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f103 0210 	add.w	r2, r3, #16
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3308      	adds	r3, #8
 800ed36:	4619      	mov	r1, r3
 800ed38:	4610      	mov	r0, r2
 800ed3a:	f7fd fb67 	bl	800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f103 0218 	add.w	r2, r3, #24
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3308      	adds	r3, #8
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7fd fb8a 	bl	800c464 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4618      	mov	r0, r3
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	0801281c 	.word	0x0801281c

0800ed60 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff ff99 	bl	800eca4 <_ZN13USBReadParserC1Ev>
 800ed72:	4a21      	ldr	r2, [pc, #132]	; (800edf8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	601a      	str	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	605a      	str	r2, [r3, #4]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3308      	adds	r3, #8
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fd fb17 	bl	800c3b6 <_ZN16MultiValueBufferC1Ev>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3310      	adds	r3, #16
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fd fb29 	bl	800c3e4 <_ZN20MultiByteValueParserC1Ev>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	3318      	adds	r3, #24
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fd fb50 	bl	800c43c <_ZN11ByteSkipperC1Ev>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f103 0220 	add.w	r2, r3, #32
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f103 0210 	add.w	r2, r3, #16
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	3308      	adds	r3, #8
 800edd2:	4619      	mov	r1, r3
 800edd4:	4610      	mov	r0, r2
 800edd6:	f7fd fb19 	bl	800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f103 0218 	add.w	r2, r3, #24
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3308      	adds	r3, #8
 800ede4:	4619      	mov	r1, r3
 800ede6:	4610      	mov	r0, r2
 800ede8:	f7fd fb3c 	bl	800c464 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4618      	mov	r0, r3
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	08012810 	.word	0x08012810

0800edfc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	607a      	str	r2, [r7, #4]
 800ee06:	603b      	str	r3, [r7, #0]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee0c:	897b      	ldrh	r3, [r7, #10]
 800ee0e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800ee14:	8afb      	ldrh	r3, [r7, #22]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00f      	beq.n	800ee3a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee1a:	f107 0216 	add.w	r2, r7, #22
 800ee1e:	f107 0310 	add.w	r3, r7, #16
 800ee22:	4619      	mov	r1, r3
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 f82d 	bl	800ee84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f083 0301 	eor.w	r3, r3, #1
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d100      	bne.n	800ee38 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee36:	e7ed      	b.n	800ee14 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee38:	bf00      	nop
}
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee50:	897b      	ldrh	r3, [r7, #10]
 800ee52:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800ee58:	8afb      	ldrh	r3, [r7, #22]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00f      	beq.n	800ee7e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee5e:	f107 0216 	add.w	r2, r7, #22
 800ee62:	f107 0310 	add.w	r3, r7, #16
 800ee66:	4619      	mov	r1, r3
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f000 f981 	bl	800f170 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f083 0301 	eor.w	r3, r3, #1
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d100      	bne.n	800ee7c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee7a:	e7ed      	b.n	800ee58 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee7c:	bf00      	nop
}
 800ee7e:	3718      	adds	r7, #24
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee86:	b089      	sub	sp, #36	; 0x24
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3320      	adds	r3, #32
 800ee94:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	3320      	adds	r3, #32
 800ee9a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	f200 815e 	bhi.w	800f164 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800eea8:	a201      	add	r2, pc, #4	; (adr r2, 800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800eeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeae:	bf00      	nop
 800eeb0:	0800eec5 	.word	0x0800eec5
 800eeb4:	0800eee5 	.word	0x0800eee5
 800eeb8:	0800ef27 	.word	0x0800ef27
 800eebc:	0800ef3b 	.word	0x0800ef3b
 800eec0:	0800efff 	.word	0x0800efff
                case 0:
                        theBuffer.valueSize = 2;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2202      	movs	r2, #2
 800eec8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f103 0210 	add.w	r2, r3, #16
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	3308      	adds	r3, #8
 800eed4:	4619      	mov	r1, r3
 800eed6:	4610      	mov	r0, r2
 800eed8:	f7fd fa98 	bl	800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	3310      	adds	r3, #16
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	68b9      	ldr	r1, [r7, #8]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f003 fa49 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f083 0301 	eor.w	r3, r3, #1
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800eefe:	2300      	movs	r3, #0
 800ef00:	e131      	b.n	800f166 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef08:	781a      	ldrb	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef16:	785a      	ldrb	r2, [r3, #1]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2202      	movs	r2, #2
 800ef22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	3320      	adds	r3, #32
 800ef2a:	1c9a      	adds	r2, r3, #2
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2203      	movs	r2, #3
 800ef36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef40:	3b02      	subs	r3, #2
 800ef42:	2b1f      	cmp	r3, #31
 800ef44:	d847      	bhi.n	800efd6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800ef46:	a201      	add	r2, pc, #4	; (adr r2, 800ef4c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800efd7 	.word	0x0800efd7
 800ef50:	0800efd7 	.word	0x0800efd7
 800ef54:	0800efcd 	.word	0x0800efcd
 800ef58:	0800efd7 	.word	0x0800efd7
 800ef5c:	0800efd7 	.word	0x0800efd7
 800ef60:	0800efd7 	.word	0x0800efd7
 800ef64:	0800efd7 	.word	0x0800efd7
 800ef68:	0800efd7 	.word	0x0800efd7
 800ef6c:	0800efd7 	.word	0x0800efd7
 800ef70:	0800efd7 	.word	0x0800efd7
 800ef74:	0800efd7 	.word	0x0800efd7
 800ef78:	0800efd7 	.word	0x0800efd7
 800ef7c:	0800efd7 	.word	0x0800efd7
 800ef80:	0800efd7 	.word	0x0800efd7
 800ef84:	0800efd7 	.word	0x0800efd7
 800ef88:	0800efd7 	.word	0x0800efd7
 800ef8c:	0800efd7 	.word	0x0800efd7
 800ef90:	0800efd7 	.word	0x0800efd7
 800ef94:	0800efd7 	.word	0x0800efd7
 800ef98:	0800efd7 	.word	0x0800efd7
 800ef9c:	0800efd7 	.word	0x0800efd7
 800efa0:	0800efd7 	.word	0x0800efd7
 800efa4:	0800efd7 	.word	0x0800efd7
 800efa8:	0800efd7 	.word	0x0800efd7
 800efac:	0800efd7 	.word	0x0800efd7
 800efb0:	0800efd7 	.word	0x0800efd7
 800efb4:	0800efd7 	.word	0x0800efd7
 800efb8:	0800efd7 	.word	0x0800efd7
 800efbc:	0800efd7 	.word	0x0800efd7
 800efc0:	0800efd7 	.word	0x0800efd7
 800efc4:	0800efd7 	.word	0x0800efd7
 800efc8:	0800efd7 	.word	0x0800efd7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800efd4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800efdc:	3b02      	subs	r3, #2
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f103 0210 	add.w	r2, r3, #16
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3308      	adds	r3, #8
 800efee:	4619      	mov	r1, r3
 800eff0:	4610      	mov	r0, r2
 800eff2:	f7fd fa0b 	bl	800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2204      	movs	r2, #4
 800effa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f004:	2b05      	cmp	r3, #5
 800f006:	d055      	beq.n	800f0b4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f008:	2b05      	cmp	r3, #5
 800f00a:	f300 8085 	bgt.w	800f118 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d002      	beq.n	800f018 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f012:	2b04      	cmp	r3, #4
 800f014:	d015      	beq.n	800f042 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f016:	e07f      	b.n	800f118 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	3310      	adds	r3, #16
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	68b9      	ldr	r1, [r7, #8]
 800f020:	4618      	mov	r0, r3
 800f022:	f003 f9af 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f026:	4603      	mov	r3, r0
 800f028:	f083 0301 	eor.w	r3, r3, #1
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f032:	2300      	movs	r3, #0
 800f034:	e097      	b.n	800f166 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	795a      	ldrb	r2, [r3, #5]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f040:	e086      	b.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3310      	adds	r3, #16
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	68b9      	ldr	r1, [r7, #8]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f003 f99a 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f050:	4603      	mov	r3, r0
 800f052:	f083 0301 	eor.w	r3, r3, #1
 800f056:	b2db      	uxtb	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f05c:	2300      	movs	r3, #0
 800f05e:	e082      	b.n	800f166 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	795b      	ldrb	r3, [r3, #5]
 800f064:	2be0      	cmp	r3, #224	; 0xe0
 800f066:	d16c      	bne.n	800f142 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	799b      	ldrb	r3, [r3, #6]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d16a      	bne.n	800f146 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f076:	2b00      	cmp	r3, #0
 800f078:	d004      	beq.n	800f084 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	79db      	ldrb	r3, [r3, #7]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d104      	bne.n	800f08c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f082:	e065      	b.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	79db      	ldrb	r3, [r3, #7]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d15e      	bne.n	800f14a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	789a      	ldrb	r2, [r3, #2]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	78da      	ldrb	r2, [r3, #3]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	79da      	ldrb	r2, [r3, #7]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f0b2:	e04d      	b.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	3310      	adds	r3, #16
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	68b9      	ldr	r1, [r7, #8]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f003 f961 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	f083 0301 	eor.w	r3, r3, #1
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e049      	b.n	800f166 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d038      	beq.n	800f14e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d034      	beq.n	800f14e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6858      	ldr	r0, [r3, #4]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681c      	ldr	r4, [r3, #0]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	3220      	adds	r2, #32
 800f10c:	9201      	str	r2, [sp, #4]
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	4633      	mov	r3, r6
 800f112:	462a      	mov	r2, r5
 800f114:	47a0      	blx	r4
                                        break;
 800f116:	e01a      	b.n	800f14e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f103 0018 	add.w	r0, r3, #24
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f124:	b29b      	uxth	r3, r3
 800f126:	3b02      	subs	r3, #2
 800f128:	b29b      	uxth	r3, r3
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	68b9      	ldr	r1, [r7, #8]
 800f12e:	f7fd f9ac 	bl	800c48a <_ZN11ByteSkipper4SkipEPPhPtt>
 800f132:	4603      	mov	r3, r0
 800f134:	f083 0301 	eor.w	r3, r3, #1
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d008      	beq.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f13e:	2300      	movs	r3, #0
 800f140:	e011      	b.n	800f166 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f142:	bf00      	nop
 800f144:	e004      	b.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f146:	bf00      	nop
 800f148:	e002      	b.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f14a:	bf00      	nop
 800f14c:	e000      	b.n	800f150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f14e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f103 0220 	add.w	r2, r3, #32
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800f164:	2301      	movs	r3, #1
}
 800f166:	4618      	mov	r0, r3
 800f168:	371c      	adds	r7, #28
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f16e:	bf00      	nop

0800f170 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800f170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f172:	b089      	sub	sp, #36	; 0x24
 800f174:	af02      	add	r7, sp, #8
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	3320      	adds	r3, #32
 800f180:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	3320      	adds	r3, #32
 800f186:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f18e:	2b04      	cmp	r3, #4
 800f190:	f200 815e 	bhi.w	800f450 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800f194:	a201      	add	r2, pc, #4	; (adr r2, 800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800f196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19a:	bf00      	nop
 800f19c:	0800f1b1 	.word	0x0800f1b1
 800f1a0:	0800f1d1 	.word	0x0800f1d1
 800f1a4:	0800f213 	.word	0x0800f213
 800f1a8:	0800f227 	.word	0x0800f227
 800f1ac:	0800f2eb 	.word	0x0800f2eb
                        theBuffer.valueSize = 2;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f103 0210 	add.w	r2, r3, #16
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	3308      	adds	r3, #8
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4610      	mov	r0, r2
 800f1c4:	f7fd f922 	bl	800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	3310      	adds	r3, #16
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f003 f8d3 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f083 0301 	eor.w	r3, r3, #1
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e131      	b.n	800f452 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f1f4:	781a      	ldrb	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f202:	785a      	ldrb	r2, [r3, #1]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2202      	movs	r2, #2
 800f20e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3320      	adds	r3, #32
 800f216:	1c9a      	adds	r2, r3, #2
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2203      	movs	r2, #3
 800f222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f22c:	3b02      	subs	r3, #2
 800f22e:	2b1f      	cmp	r3, #31
 800f230:	d847      	bhi.n	800f2c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f232:	a201      	add	r2, pc, #4	; (adr r2, 800f238 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f238:	0800f2c3 	.word	0x0800f2c3
 800f23c:	0800f2c3 	.word	0x0800f2c3
 800f240:	0800f2b9 	.word	0x0800f2b9
 800f244:	0800f2c3 	.word	0x0800f2c3
 800f248:	0800f2c3 	.word	0x0800f2c3
 800f24c:	0800f2c3 	.word	0x0800f2c3
 800f250:	0800f2c3 	.word	0x0800f2c3
 800f254:	0800f2c3 	.word	0x0800f2c3
 800f258:	0800f2c3 	.word	0x0800f2c3
 800f25c:	0800f2c3 	.word	0x0800f2c3
 800f260:	0800f2c3 	.word	0x0800f2c3
 800f264:	0800f2c3 	.word	0x0800f2c3
 800f268:	0800f2c3 	.word	0x0800f2c3
 800f26c:	0800f2c3 	.word	0x0800f2c3
 800f270:	0800f2c3 	.word	0x0800f2c3
 800f274:	0800f2c3 	.word	0x0800f2c3
 800f278:	0800f2c3 	.word	0x0800f2c3
 800f27c:	0800f2c3 	.word	0x0800f2c3
 800f280:	0800f2c3 	.word	0x0800f2c3
 800f284:	0800f2c3 	.word	0x0800f2c3
 800f288:	0800f2c3 	.word	0x0800f2c3
 800f28c:	0800f2c3 	.word	0x0800f2c3
 800f290:	0800f2c3 	.word	0x0800f2c3
 800f294:	0800f2c3 	.word	0x0800f2c3
 800f298:	0800f2c3 	.word	0x0800f2c3
 800f29c:	0800f2c3 	.word	0x0800f2c3
 800f2a0:	0800f2c3 	.word	0x0800f2c3
 800f2a4:	0800f2c3 	.word	0x0800f2c3
 800f2a8:	0800f2c3 	.word	0x0800f2c3
 800f2ac:	0800f2c3 	.word	0x0800f2c3
 800f2b0:	0800f2c3 	.word	0x0800f2c3
 800f2b4:	0800f2c3 	.word	0x0800f2c3
                                        isGoodInterface = false;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f2c0:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2c8:	3b02      	subs	r3, #2
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f103 0210 	add.w	r2, r3, #16
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	4619      	mov	r1, r3
 800f2dc:	4610      	mov	r0, r2
 800f2de:	f7fd f895 	bl	800c40c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2204      	movs	r2, #4
 800f2e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f2f0:	2b05      	cmp	r3, #5
 800f2f2:	d055      	beq.n	800f3a0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f2f4:	2b05      	cmp	r3, #5
 800f2f6:	f300 8085 	bgt.w	800f404 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d002      	beq.n	800f304 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f2fe:	2b04      	cmp	r3, #4
 800f300:	d015      	beq.n	800f32e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f302:	e07f      	b.n	800f404 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	3310      	adds	r3, #16
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	68b9      	ldr	r1, [r7, #8]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f003 f839 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f312:	4603      	mov	r3, r0
 800f314:	f083 0301 	eor.w	r3, r3, #1
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f31e:	2300      	movs	r3, #0
 800f320:	e097      	b.n	800f452 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	795a      	ldrb	r2, [r3, #5]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f32c:	e086      	b.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	3310      	adds	r3, #16
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	68b9      	ldr	r1, [r7, #8]
 800f336:	4618      	mov	r0, r3
 800f338:	f003 f824 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f33c:	4603      	mov	r3, r0
 800f33e:	f083 0301 	eor.w	r3, r3, #1
 800f342:	b2db      	uxtb	r3, r3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d001      	beq.n	800f34c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f348:	2300      	movs	r3, #0
 800f34a:	e082      	b.n	800f452 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	795b      	ldrb	r3, [r3, #5]
 800f350:	2bff      	cmp	r3, #255	; 0xff
 800f352:	d16c      	bne.n	800f42e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	799b      	ldrb	r3, [r3, #6]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d16a      	bne.n	800f432 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f362:	2b00      	cmp	r3, #0
 800f364:	d004      	beq.n	800f370 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	79db      	ldrb	r3, [r3, #7]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d104      	bne.n	800f378 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f36e:	e065      	b.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	79db      	ldrb	r3, [r3, #7]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d15e      	bne.n	800f436 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	789a      	ldrb	r2, [r3, #2]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	78da      	ldrb	r2, [r3, #3]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	79da      	ldrb	r2, [r3, #7]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f39e:	e04d      	b.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	3310      	adds	r3, #16
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	68b9      	ldr	r1, [r7, #8]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f002 ffeb 	bl	8012384 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	f083 0301 	eor.w	r3, r3, #1
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	e049      	b.n	800f452 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d038      	beq.n	800f43a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d034      	beq.n	800f43a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6858      	ldr	r0, [r3, #4]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681c      	ldr	r4, [r3, #0]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	3220      	adds	r2, #32
 800f3f8:	9201      	str	r2, [sp, #4]
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	4633      	mov	r3, r6
 800f3fe:	462a      	mov	r2, r5
 800f400:	47a0      	blx	r4
                                        break;
 800f402:	e01a      	b.n	800f43a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f103 0018 	add.w	r0, r3, #24
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f410:	b29b      	uxth	r3, r3
 800f412:	3b02      	subs	r3, #2
 800f414:	b29b      	uxth	r3, r3
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	68b9      	ldr	r1, [r7, #8]
 800f41a:	f7fd f836 	bl	800c48a <_ZN11ByteSkipper4SkipEPPhPtt>
 800f41e:	4603      	mov	r3, r0
 800f420:	f083 0301 	eor.w	r3, r3, #1
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d008      	beq.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f42a:	2300      	movs	r3, #0
 800f42c:	e011      	b.n	800f452 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f42e:	bf00      	nop
 800f430:	e004      	b.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f432:	bf00      	nop
 800f434:	e002      	b.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f436:	bf00      	nop
 800f438:	e000      	b.n	800f43c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f43a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f103 0220 	add.w	r2, r3, #32
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f450:	2301      	movs	r3, #1
}
 800f452:	4618      	mov	r0, r3
 800f454:	371c      	adds	r7, #28
 800f456:	46bd      	mov	sp, r7
 800f458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f45a:	bf00      	nop

0800f45c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f45c:	b480      	push	{r7}
 800f45e:	b085      	sub	sp, #20
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f466:	2300      	movs	r3, #0
 800f468:	73fb      	strb	r3, [r7, #15]
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d815      	bhi.n	800f49c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	3318      	adds	r3, #24
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4413      	add	r3, r2
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d109      	bne.n	800f494 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	3318      	adds	r3, #24
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	683a      	ldr	r2, [r7, #0]
 800f48c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f492:	e005      	b.n	800f4a0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f494:	7bfb      	ldrb	r3, [r7, #15]
 800f496:	3301      	adds	r3, #1
 800f498:	73fb      	strb	r3, [r7, #15]
 800f49a:	e7e6      	b.n	800f46a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f49c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
 800f4b6:	4a0a      	ldr	r2, [pc, #40]	; (800f4e0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	601a      	str	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d005      	beq.n	800f4d6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	6879      	ldr	r1, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff ffc3 	bl	800f45c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	080128d8 	.word	0x080128d8

0800f4e4 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d10b      	bne.n	800f518 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	3301      	adds	r3, #1
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	461a      	mov	r2, r3
 800f508:	88fb      	ldrh	r3, [r7, #6]
 800f50a:	121b      	asrs	r3, r3, #8
 800f50c:	f043 0320 	orr.w	r3, r3, #32
 800f510:	429a      	cmp	r2, r3
 800f512:	d101      	bne.n	800f518 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f514:	2301      	movs	r3, #1
 800f516:	e000      	b.n	800f51a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f518:	2300      	movs	r3, #0
        }
 800f51a:	4618      	mov	r0, r3
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f526:	b480      	push	{r7}
 800f528:	b085      	sub	sp, #20
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	460b      	mov	r3, r1
 800f530:	607a      	str	r2, [r7, #4]
 800f532:	72fb      	strb	r3, [r7, #11]
                return;
 800f534:	bf00      	nop
        };
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
                return;
 800f548:	bf00      	nop
        };
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
                return;
 800f55c:	bf00      	nop
        }
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	603b      	str	r3, [r7, #0]
 800f574:	4613      	mov	r3, r2
 800f576:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	68b9      	ldr	r1, [r7, #8]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7ff ff95 	bl	800f4ac <_ZN16BluetoothServiceC1EP3BTD>
 800f582:	4a1f      	ldr	r2, [pc, #124]	; (800f600 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	601a      	str	r2, [r3, #0]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f590:	2300      	movs	r3, #0
 800f592:	75fb      	strb	r3, [r7, #23]
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	2b01      	cmp	r3, #1
 800f598:	d809      	bhi.n	800f5ae <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f59a:	7dfa      	ldrb	r2, [r7, #23]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	3208      	adds	r2, #8
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f5a6:	7dfb      	ldrb	r3, [r7, #23]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	75fb      	strb	r3, [r7, #23]
 800f5ac:	e7f2      	b.n	800f594 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	79fa      	ldrb	r2, [r7, #7]
 800f5b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2250      	movs	r2, #80	; 0x50
 800f5c4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2270      	movs	r2, #112	; 0x70
 800f5d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2271      	movs	r2, #113	; 0x71
 800f5e4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 f807 	bl	800f604 <_ZN5BTHID5ResetEv>
}
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	080128ac 	.word	0x080128ac

0800f604 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
        connected = false;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	220a      	movs	r2, #10
 800f62c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	3320      	adds	r3, #32
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	4798      	blx	r3
}
 800f642:	bf00      	nop
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f64a:	b590      	push	{r4, r7, lr}
 800f64c:	b085      	sub	sp, #20
 800f64e:	af02      	add	r7, sp, #8
 800f650:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d014      	beq.n	800f686 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6898      	ldr	r0, [r3, #8]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	8999      	ldrh	r1, [r3, #12]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	7d1b      	ldrb	r3, [r3, #20]
 800f668:	3301      	adds	r3, #1
 800f66a:	b2da      	uxtb	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	751a      	strb	r2, [r3, #20]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	7d1a      	ldrb	r2, [r3, #20]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f103 041b 	add.w	r4, r3, #27
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	336f      	adds	r3, #111	; 0x6f
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	4623      	mov	r3, r4
 800f682:	f7ff f9c5 	bl	800ea10 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6898      	ldr	r0, [r3, #8]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	8999      	ldrh	r1, [r3, #12]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	7d1b      	ldrb	r3, [r3, #20]
 800f692:	3301      	adds	r3, #1
 800f694:	b2da      	uxtb	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	751a      	strb	r2, [r3, #20]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	7d1a      	ldrb	r2, [r3, #20]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f103 0418 	add.w	r4, r3, #24
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	336d      	adds	r3, #109	; 0x6d
 800f6a8:	9300      	str	r3, [sp, #0]
 800f6aa:	4623      	mov	r3, r4
 800f6ac:	f7ff f9b0 	bl	800ea10 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	3308      	adds	r3, #8
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	220e      	movs	r2, #14
 800f6c0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2209      	movs	r2, #9
 800f6c6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f6ca:	bf00      	nop
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd90      	pop	{r4, r7, pc}

0800f6d2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f6d2:	b590      	push	{r4, r7, lr}
 800f6d4:	b087      	sub	sp, #28
 800f6d6:	af02      	add	r7, sp, #8
 800f6d8:	6078      	str	r0, [r7, #4]
 800f6da:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7d5b      	ldrb	r3, [r3, #21]
 800f6e0:	f083 0301 	eor.w	r3, r3, #1
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d023      	beq.n	800f732 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	3308      	adds	r3, #8
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d11e      	bne.n	800f732 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	330c      	adds	r3, #12
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	330d      	adds	r3, #13
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	021b      	lsls	r3, r3, #8
 800f704:	4313      	orrs	r3, r2
 800f706:	2b01      	cmp	r3, #1
 800f708:	d113      	bne.n	800f732 <_ZN5BTHID7ACLDataEPh+0x60>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	7a9b      	ldrb	r3, [r3, #10]
 800f710:	f083 0301 	eor.w	r3, r3, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00b      	beq.n	800f732 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	2201      	movs	r2, #1
 800f720:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	8b5a      	ldrh	r2, [r3, #26]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	220a      	movs	r2, #10
 800f730:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	7a5b      	ldrb	r3, [r3, #9]
 800f738:	f083 0301 	eor.w	r3, r3, #1
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d03a      	beq.n	800f7b8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d034      	beq.n	800f7b8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	7d5b      	ldrb	r3, [r3, #21]
 800f752:	f083 0301 	eor.w	r3, r3, #1
 800f756:	b2db      	uxtb	r3, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d02d      	beq.n	800f7b8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f762:	f083 0301 	eor.w	r3, r3, #1
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d025      	beq.n	800f7b8 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	3308      	adds	r3, #8
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	2b02      	cmp	r3, #2
 800f774:	d120      	bne.n	800f7b8 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	330c      	adds	r3, #12
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	330d      	adds	r3, #13
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	021b      	lsls	r3, r3, #8
 800f786:	4313      	orrs	r3, r2
 800f788:	2b11      	cmp	r3, #17
 800f78a:	d115      	bne.n	800f7b8 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	2201      	movs	r2, #1
 800f79c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	8b5a      	ldrh	r2, [r3, #26]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	899b      	ldrh	r3, [r3, #12]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	f7ff fe8f 	bl	800f4e4 <_ZN16BluetoothService14checkHciHandleEPht>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 83d9 	beq.w	800ff80 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	3306      	adds	r3, #6
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	3307      	adds	r3, #7
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	021b      	lsls	r3, r3, #8
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	f040 829b 	bne.w	800fd1c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	3308      	adds	r3, #8
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	f000 83c1 	beq.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	3308      	adds	r3, #8
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	2b03      	cmp	r3, #3
 800f7fa:	f040 808d 	bne.w	800f918 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	3310      	adds	r3, #16
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	461a      	mov	r2, r3
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	3311      	adds	r3, #17
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	021b      	lsls	r3, r3, #8
 800f80e:	4313      	orrs	r3, r2
 800f810:	2b00      	cmp	r3, #0
 800f812:	f040 83af 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	3312      	adds	r3, #18
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	461a      	mov	r2, r3
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	3313      	adds	r3, #19
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	021b      	lsls	r3, r3, #8
 800f826:	4313      	orrs	r3, r2
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f040 83a3 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	330e      	adds	r3, #14
 800f832:	781a      	ldrb	r2, [r3, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d124      	bne.n	800f888 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	330f      	adds	r3, #15
 800f842:	781a      	ldrb	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d11c      	bne.n	800f888 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	7a5a      	ldrb	r2, [r3, #9]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	7b1a      	ldrb	r2, [r3, #12]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	7b5a      	ldrb	r2, [r3, #13]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	7d1b      	ldrb	r3, [r3, #20]
 800f86a:	3301      	adds	r3, #1
 800f86c:	b2da      	uxtb	r2, r3
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6898      	ldr	r0, [r3, #8]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	8999      	ldrh	r1, [r3, #12]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	7d1a      	ldrb	r2, [r3, #20]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	331b      	adds	r3, #27
 800f882:	f7ff f827 	bl	800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>
 800f886:	e375      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	330e      	adds	r3, #14
 800f88c:	781a      	ldrb	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f894:	429a      	cmp	r2, r3
 800f896:	d11a      	bne.n	800f8ce <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	330f      	adds	r3, #15
 800f89c:	781a      	ldrb	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d112      	bne.n	800f8ce <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	7a5a      	ldrb	r2, [r3, #9]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	7b1a      	ldrb	r2, [r3, #12]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	7b5a      	ldrb	r2, [r3, #13]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	f043 0204 	orr.w	r2, r3, #4
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	611a      	str	r2, [r3, #16]
 800f8cc:	e352      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	330e      	adds	r3, #14
 800f8d2:	781a      	ldrb	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	f040 834a 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	330f      	adds	r3, #15
 800f8e4:	781a      	ldrb	r2, [r3, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	f040 8341 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	7a5a      	ldrb	r2, [r3, #9]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	7b1a      	ldrb	r2, [r3, #12]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	7b5a      	ldrb	r2, [r3, #13]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	611a      	str	r2, [r3, #16]
 800f916:	e32d      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	3308      	adds	r3, #8
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d15a      	bne.n	800f9d8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	330c      	adds	r3, #12
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	461a      	mov	r2, r3
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	330d      	adds	r3, #13
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	021b      	lsls	r3, r3, #8
 800f932:	4313      	orrs	r3, r2
 800f934:	2b01      	cmp	r3, #1
 800f936:	d112      	bne.n	800f95e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	7a5a      	ldrb	r2, [r3, #9]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	7b9a      	ldrb	r2, [r3, #14]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	7bda      	ldrb	r2, [r3, #15]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	611a      	str	r2, [r3, #16]
 800f95c:	e30a      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	330c      	adds	r3, #12
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	330d      	adds	r3, #13
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	4313      	orrs	r3, r2
 800f970:	2b11      	cmp	r3, #17
 800f972:	d112      	bne.n	800f99a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	7a5a      	ldrb	r2, [r3, #9]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	7b9a      	ldrb	r2, [r3, #14]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	7bda      	ldrb	r2, [r3, #15]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	691b      	ldr	r3, [r3, #16]
 800f990:	f043 0201 	orr.w	r2, r3, #1
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	611a      	str	r2, [r3, #16]
 800f998:	e2ec      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	330c      	adds	r3, #12
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	330d      	adds	r3, #13
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	021b      	lsls	r3, r3, #8
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	2b13      	cmp	r3, #19
 800f9ae:	f040 82e1 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	7a5a      	ldrb	r2, [r3, #9]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	7b9a      	ldrb	r2, [r3, #14]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	7bda      	ldrb	r2, [r3, #15]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	f043 0210 	orr.w	r2, r3, #16
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	611a      	str	r2, [r3, #16]
 800f9d6:	e2cd      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2b05      	cmp	r3, #5
 800f9e0:	d15e      	bne.n	800faa0 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	3310      	adds	r3, #16
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	3311      	adds	r3, #17
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	021b      	lsls	r3, r3, #8
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f040 82bd 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	330c      	adds	r3, #12
 800f9fe:	781a      	ldrb	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d112      	bne.n	800fa30 <_ZN5BTHID7ACLDataEPh+0x35e>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	330d      	adds	r3, #13
 800fa0e:	781a      	ldrb	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d10a      	bne.n	800fa30 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	7a5a      	ldrb	r2, [r3, #9]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	691b      	ldr	r3, [r3, #16]
 800fa26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	611a      	str	r2, [r3, #16]
 800fa2e:	e2a1      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	330c      	adds	r3, #12
 800fa34:	781a      	ldrb	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d112      	bne.n	800fa66 <_ZN5BTHID7ACLDataEPh+0x394>
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	330d      	adds	r3, #13
 800fa44:	781a      	ldrb	r2, [r3, #0]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d10a      	bne.n	800fa66 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	7a5a      	ldrb	r2, [r3, #9]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	f043 0202 	orr.w	r2, r3, #2
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	611a      	str	r2, [r3, #16]
 800fa64:	e286      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	330c      	adds	r3, #12
 800fa6a:	781a      	ldrb	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fa72:	429a      	cmp	r2, r3
 800fa74:	f040 827e 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	330d      	adds	r3, #13
 800fa7c:	781a      	ldrb	r2, [r3, #0]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fa84:	429a      	cmp	r2, r3
 800fa86:	f040 8275 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	7a5a      	ldrb	r2, [r3, #9]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	691b      	ldr	r3, [r3, #16]
 800fa96:	f043 0220 	orr.w	r2, r3, #32
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	611a      	str	r2, [r3, #16]
 800fa9e:	e269      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	3308      	adds	r3, #8
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	2b04      	cmp	r3, #4
 800faa8:	d155      	bne.n	800fb56 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	330c      	adds	r3, #12
 800faae:	781a      	ldrb	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d113      	bne.n	800fae2 <_ZN5BTHID7ACLDataEPh+0x410>
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	330d      	adds	r3, #13
 800fabe:	781a      	ldrb	r2, [r3, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d10b      	bne.n	800fae2 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6898      	ldr	r0, [r3, #8]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	8999      	ldrh	r1, [r3, #12]
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	3309      	adds	r3, #9
 800fad6:	781a      	ldrb	r2, [r3, #0]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	331b      	adds	r3, #27
 800fadc:	f7fe ff45 	bl	800e96a <_ZN3BTD21l2cap_config_responseEthPh>
 800fae0:	e248      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	330c      	adds	r3, #12
 800fae6:	781a      	ldrb	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800faee:	429a      	cmp	r2, r3
 800faf0:	d113      	bne.n	800fb1a <_ZN5BTHID7ACLDataEPh+0x448>
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	330d      	adds	r3, #13
 800faf6:	781a      	ldrb	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d10b      	bne.n	800fb1a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6898      	ldr	r0, [r3, #8]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8999      	ldrh	r1, [r3, #12]
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	3309      	adds	r3, #9
 800fb0e:	781a      	ldrb	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3316      	adds	r3, #22
 800fb14:	f7fe ff29 	bl	800e96a <_ZN3BTD21l2cap_config_responseEthPh>
 800fb18:	e22c      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	330c      	adds	r3, #12
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fb26:	429a      	cmp	r2, r3
 800fb28:	f040 8224 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	330d      	adds	r3, #13
 800fb30:	781a      	ldrb	r2, [r3, #0]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	f040 821b 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6898      	ldr	r0, [r3, #8]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	8999      	ldrh	r1, [r3, #12]
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	3309      	adds	r3, #9
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3318      	adds	r3, #24
 800fb50:	f7fe ff0b 	bl	800e96a <_ZN3BTD21l2cap_config_responseEthPh>
 800fb54:	e20e      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	3308      	adds	r3, #8
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b06      	cmp	r3, #6
 800fb5e:	d170      	bne.n	800fc42 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	330c      	adds	r3, #12
 800fb64:	781a      	ldrb	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d112      	bne.n	800fb96 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	330d      	adds	r3, #13
 800fb74:	781a      	ldrb	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d10a      	bne.n	800fb96 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	7a5a      	ldrb	r2, [r3, #9]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	691b      	ldr	r3, [r3, #16]
 800fb8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	611a      	str	r2, [r3, #16]
 800fb94:	e1ee      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	330c      	adds	r3, #12
 800fb9a:	781a      	ldrb	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d121      	bne.n	800fbea <_ZN5BTHID7ACLDataEPh+0x518>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	330d      	adds	r3, #13
 800fbaa:	781a      	ldrb	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d119      	bne.n	800fbea <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	7a5a      	ldrb	r2, [r3, #9]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6898      	ldr	r0, [r3, #8]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8999      	ldrh	r1, [r3, #12]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	7d1a      	ldrb	r2, [r3, #20]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3316      	adds	r3, #22
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	4623      	mov	r3, r4
 800fbd8:	f7fe ff57 	bl	800ea8a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3308      	adds	r3, #8
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	4798      	blx	r3
 800fbe8:	e1c4      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	330c      	adds	r3, #12
 800fbee:	781a      	ldrb	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	f040 81bc 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	330d      	adds	r3, #13
 800fc00:	781a      	ldrb	r2, [r3, #0]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	f040 81b3 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	7a5a      	ldrb	r2, [r3, #9]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6898      	ldr	r0, [r3, #8]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	8999      	ldrh	r1, [r3, #12]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	7d1a      	ldrb	r2, [r3, #20]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	3318      	adds	r3, #24
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	4623      	mov	r3, r4
 800fc30:	f7fe ff2b 	bl	800ea8a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	3308      	adds	r3, #8
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	4798      	blx	r3
 800fc40:	e198      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	3308      	adds	r3, #8
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	2b07      	cmp	r3, #7
 800fc4a:	d14c      	bne.n	800fce6 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	330c      	adds	r3, #12
 800fc50:	781a      	ldrb	r2, [r3, #0]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	7edb      	ldrb	r3, [r3, #27]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d111      	bne.n	800fc7e <_ZN5BTHID7ACLDataEPh+0x5ac>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	330d      	adds	r3, #13
 800fc5e:	781a      	ldrb	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	7f1b      	ldrb	r3, [r3, #28]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d10a      	bne.n	800fc7e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	7a5a      	ldrb	r2, [r3, #9]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	611a      	str	r2, [r3, #16]
 800fc7c:	e17a      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	330c      	adds	r3, #12
 800fc82:	781a      	ldrb	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	7d9b      	ldrb	r3, [r3, #22]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d111      	bne.n	800fcb0 <_ZN5BTHID7ACLDataEPh+0x5de>
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	330d      	adds	r3, #13
 800fc90:	781a      	ldrb	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7ddb      	ldrb	r3, [r3, #23]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d10a      	bne.n	800fcb0 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	7a5a      	ldrb	r2, [r3, #9]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	f043 0208 	orr.w	r2, r3, #8
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	611a      	str	r2, [r3, #16]
 800fcae:	e161      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	330c      	adds	r3, #12
 800fcb4:	781a      	ldrb	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	7e1b      	ldrb	r3, [r3, #24]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	f040 815a 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	330d      	adds	r3, #13
 800fcc4:	781a      	ldrb	r2, [r3, #0]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	7e5b      	ldrb	r3, [r3, #25]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	f040 8152 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	7a5a      	ldrb	r2, [r3, #9]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	611a      	str	r2, [r3, #16]
 800fce4:	e146      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	3308      	adds	r3, #8
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2b0a      	cmp	r3, #10
 800fcee:	f040 8141 	bne.w	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	7a5a      	ldrb	r2, [r3, #9]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6898      	ldr	r0, [r3, #8]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	8999      	ldrh	r1, [r3, #12]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7d1a      	ldrb	r2, [r3, #20]
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	330c      	adds	r3, #12
 800fd0a:	781c      	ldrb	r4, [r3, #0]
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	330d      	adds	r3, #13
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	4623      	mov	r3, r4
 800fd16:	f7fe fef5 	bl	800eb04 <_ZN3BTD26l2cap_information_responseEthhh>
 800fd1a:	e12b      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	3306      	adds	r3, #6
 800fd20:	781a      	ldrb	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	f040 8087 	bne.w	800fe3c <_ZN5BTHID7ACLDataEPh+0x76a>
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	3307      	adds	r3, #7
 800fd32:	781a      	ldrb	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d17e      	bne.n	800fe3c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	3308      	adds	r3, #8
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d131      	bne.n	800fdac <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2203      	movs	r2, #3
 800fd4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	7a5a      	ldrb	r2, [r3, #9]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	7a9a      	ldrb	r2, [r3, #10]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2205      	movs	r2, #5
 800fd70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2200      	movs	r2, #0
 800fd98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3328      	adds	r3, #40	; 0x28
 800fda0:	220a      	movs	r2, #10
 800fda2:	4619      	mov	r1, r3
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fb6d 	bl	8010484 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fdaa:	e0e0      	b.n	800ff6e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	3308      	adds	r3, #8
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	2b04      	cmp	r3, #4
 800fdb4:	d131      	bne.n	800fe1a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2205      	movs	r2, #5
 800fdba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	7a5a      	ldrb	r2, [r3, #9]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	7a9a      	ldrb	r2, [r3, #10]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2205      	movs	r2, #5
 800fdde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2202      	movs	r2, #2
 800fdee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2235      	movs	r2, #53	; 0x35
 800fdf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2200      	movs	r2, #0
 800fe06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	3328      	adds	r3, #40	; 0x28
 800fe0e:	220a      	movs	r2, #10
 800fe10:	4619      	mov	r1, r3
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 fb36 	bl	8010484 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe18:	e0a9      	b.n	800ff6e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	2b06      	cmp	r3, #6
 800fe22:	f040 80a4 	bne.w	800ff6e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	3309      	adds	r3, #9
 800fe2a:	7819      	ldrb	r1, [r3, #0]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	330a      	adds	r3, #10
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 fb3f 	bl	80104b8 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe3a:	e098      	b.n	800ff6e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	3306      	adds	r3, #6
 800fe40:	781a      	ldrb	r2, [r3, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d162      	bne.n	800ff12 <_ZN5BTHID7ACLDataEPh+0x840>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	3307      	adds	r3, #7
 800fe50:	781a      	ldrb	r2, [r3, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d15a      	bne.n	800ff12 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	3308      	adds	r3, #8
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	2ba1      	cmp	r3, #161	; 0xa1
 800fe64:	f040 8085 	bne.w	800ff72 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800fe68:	f7f1 fff6 	bl	8001e58 <HAL_GetTick>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	3305      	adds	r3, #5
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	021b      	lsls	r3, r3, #8
 800fe7a:	b21a      	sxth	r2, r3
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	3304      	adds	r3, #4
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	b21b      	sxth	r3, r3
 800fe84:	4313      	orrs	r3, r2
 800fe86:	b21b      	sxth	r3, r3
 800fe88:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	3314      	adds	r3, #20
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	89fa      	ldrh	r2, [r7, #14]
 800fe94:	b2d2      	uxtb	r2, r2
 800fe96:	3a01      	subs	r2, #1
 800fe98:	b2d1      	uxtb	r1, r2
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	3209      	adds	r2, #9
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	3309      	adds	r3, #9
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d002      	beq.n	800feb2 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800feac:	2b02      	cmp	r3, #2
 800feae:	d016      	beq.n	800fede <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800feb0:	e05f      	b.n	800ff72 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a1b      	ldr	r3, [r3, #32]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d027      	beq.n	800ff0a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a18      	ldr	r0, [r3, #32]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	681c      	ldr	r4, [r3, #0]
 800fec6:	89fb      	ldrh	r3, [r7, #14]
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	3b02      	subs	r3, #2
 800fecc:	b2da      	uxtb	r2, r3
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	330a      	adds	r3, #10
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	4613      	mov	r3, r2
 800fed6:	2200      	movs	r2, #0
 800fed8:	6879      	ldr	r1, [r7, #4]
 800feda:	47a0      	blx	r4
                                                break;
 800fedc:	e015      	b.n	800ff0a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d013      	beq.n	800ff0e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	681c      	ldr	r4, [r3, #0]
 800fef2:	89fb      	ldrh	r3, [r7, #14]
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	3b02      	subs	r3, #2
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	330a      	adds	r3, #10
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	4613      	mov	r3, r2
 800ff02:	2200      	movs	r2, #0
 800ff04:	6879      	ldr	r1, [r7, #4]
 800ff06:	47a0      	blx	r4
                                                break;
 800ff08:	e001      	b.n	800ff0e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800ff0a:	bf00      	nop
 800ff0c:	e031      	b.n	800ff72 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800ff0e:	bf00      	nop
                        }
 800ff10:	e02f      	b.n	800ff72 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	3306      	adds	r3, #6
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d128      	bne.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3307      	adds	r3, #7
 800ff26:	781a      	ldrb	r2, [r3, #0]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d120      	bne.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	3308      	adds	r3, #8
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	2ba3      	cmp	r3, #163	; 0xa3
 800ff3a:	d11b      	bne.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	3305      	adds	r3, #5
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	021b      	lsls	r3, r3, #8
 800ff44:	b21a      	sxth	r2, r3
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	3304      	adds	r3, #4
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	b21b      	sxth	r3, r3
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	b21b      	sxth	r3, r3
 800ff52:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	3318      	adds	r3, #24
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	89ba      	ldrh	r2, [r7, #12]
 800ff5e:	b2d2      	uxtb	r2, r2
 800ff60:	3a01      	subs	r2, #1
 800ff62:	b2d1      	uxtb	r1, r2
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	3209      	adds	r2, #9
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	4798      	blx	r3
 800ff6c:	e002      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ff6e:	bf00      	nop
 800ff70:	e000      	b.n	800ff74 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800ff72:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f807 	bl	800ff88 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f8b4 	bl	80100e8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800ff80:	bf00      	nop
 800ff82:	3714      	adds	r7, #20
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd90      	pop	{r4, r7, pc}

0800ff88 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800ff88:	b5b0      	push	{r4, r5, r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	7e9b      	ldrb	r3, [r3, #26]
 800ff94:	2b0e      	cmp	r3, #14
 800ff96:	f000 8084 	beq.w	80100a2 <_ZN5BTHID8SDP_taskEv+0x11a>
 800ff9a:	2b0e      	cmp	r3, #14
 800ff9c:	f300 809f 	bgt.w	80100de <_ZN5BTHID8SDP_taskEv+0x156>
 800ffa0:	2b0a      	cmp	r3, #10
 800ffa2:	d002      	beq.n	800ffaa <_ZN5BTHID8SDP_taskEv+0x22>
 800ffa4:	2b0b      	cmp	r3, #11
 800ffa6:	d068      	beq.n	801007a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800ffa8:	e099      	b.n	80100de <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d041      	beq.n	801003a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	691b      	ldr	r3, [r3, #16]
 800ffba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6898      	ldr	r0, [r3, #8]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	8999      	ldrh	r1, [r3, #12]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	7d1a      	ldrb	r2, [r3, #20]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	331b      	adds	r3, #27
 800ffd8:	2501      	movs	r5, #1
 800ffda:	9501      	str	r5, [sp, #4]
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	4623      	mov	r3, r4
 800ffe0:	f7fe fc2b 	bl	800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800ffe4:	2001      	movs	r0, #1
 800ffe6:	f7f1 ff43 	bl	8001e70 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6898      	ldr	r0, [r3, #8]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	8999      	ldrh	r1, [r3, #12]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	7d1a      	ldrb	r2, [r3, #20]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	331b      	adds	r3, #27
 8010000:	2500      	movs	r5, #0
 8010002:	9501      	str	r5, [sp, #4]
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	4623      	mov	r3, r4
 8010008:	f7fe fc17 	bl	800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	7d1b      	ldrb	r3, [r3, #20]
 8010010:	3301      	adds	r3, #1
 8010012:	b2da      	uxtb	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010018:	2001      	movs	r0, #1
 801001a:	f7f1 ff29 	bl	8001e70 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6898      	ldr	r0, [r3, #8]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	8999      	ldrh	r1, [r3, #12]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	7d1a      	ldrb	r2, [r3, #20]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	331b      	adds	r3, #27
 801002e:	f7fe fc51 	bl	800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	220b      	movs	r2, #11
 8010036:	769a      	strb	r2, [r3, #26]
                        break;
 8010038:	e04c      	b.n	80100d4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	691b      	ldr	r3, [r3, #16]
 801003e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010042:	2b00      	cmp	r3, #0
 8010044:	d046      	beq.n	80100d4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	691b      	ldr	r3, [r3, #16]
 801004a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6898      	ldr	r0, [r3, #8]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	8999      	ldrh	r1, [r3, #12]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	7d1a      	ldrb	r2, [r3, #20]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	331b      	adds	r3, #27
 8010070:	9300      	str	r3, [sp, #0]
 8010072:	4623      	mov	r3, r4
 8010074:	f7fe fd09 	bl	800ea8a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8010078:	e02c      	b.n	80100d4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010082:	2b00      	cmp	r3, #0
 8010084:	d028      	beq.n	80100d8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2201      	movs	r2, #1
 8010096:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	220a      	movs	r2, #10
 801009e:	769a      	strb	r2, [r3, #26]
                        break;
 80100a0:	e01a      	b.n	80100d8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d016      	beq.n	80100dc <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	689a      	ldr	r2, [r3, #8]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	899b      	ldrh	r3, [r3, #12]
 80100b6:	4619      	mov	r1, r3
 80100b8:	4610      	mov	r0, r2
 80100ba:	f7fe fa92 	bl	800e5e2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100c4:	819a      	strh	r2, [r3, #12]
                                Reset();
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	3308      	adds	r3, #8
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	4798      	blx	r3
                        break;
 80100d2:	e003      	b.n	80100dc <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80100d4:	bf00      	nop
 80100d6:	e002      	b.n	80100de <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80100d8:	bf00      	nop
 80100da:	e000      	b.n	80100de <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80100dc:	bf00      	nop
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080100e8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80100e8:	b5b0      	push	{r4, r5, r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af02      	add	r7, sp, #8
 80100ee:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80100f6:	3b01      	subs	r3, #1
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	f200 812c 	bhi.w	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 80100fe:	a201      	add	r2, pc, #4	; (adr r2, 8010104 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8010100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010104:	08010335 	.word	0x08010335
 8010108:	080101cf 	.word	0x080101cf
 801010c:	08010207 	.word	0x08010207
 8010110:	08010129 	.word	0x08010129
 8010114:	08010301 	.word	0x08010301
 8010118:	08010147 	.word	0x08010147
 801011c:	0801024f 	.word	0x0801024f
 8010120:	08010285 	.word	0x08010285
 8010124:	080102c1 	.word	0x080102c1
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	691b      	ldr	r3, [r3, #16]
 801012c:	f003 0302 	and.w	r3, r3, #2
 8010130:	2b00      	cmp	r3, #0
 8010132:	f000 8101 	beq.w	8010338 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f9f9 	bl	801052e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2206      	movs	r2, #6
 8010140:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010144:	e0f8      	b.n	8010338 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	f003 0310 	and.w	r3, r3, #16
 801014e:	2b00      	cmp	r3, #0
 8010150:	f000 80f4 	beq.w	801033c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6898      	ldr	r0, [r3, #8]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	8999      	ldrh	r1, [r3, #12]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	7d1a      	ldrb	r2, [r3, #20]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	3318      	adds	r3, #24
 801016a:	2501      	movs	r5, #1
 801016c:	9501      	str	r5, [sp, #4]
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	4623      	mov	r3, r4
 8010172:	f7fe fb62 	bl	800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010176:	2001      	movs	r0, #1
 8010178:	f7f1 fe7a 	bl	8001e70 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6898      	ldr	r0, [r3, #8]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	8999      	ldrh	r1, [r3, #12]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	7d1a      	ldrb	r2, [r3, #20]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	3318      	adds	r3, #24
 8010192:	2500      	movs	r5, #0
 8010194:	9501      	str	r5, [sp, #4]
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	4623      	mov	r3, r4
 801019a:	f7fe fb4e 	bl	800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7d1b      	ldrb	r3, [r3, #20]
 80101a2:	3301      	adds	r3, #1
 80101a4:	b2da      	uxtb	r2, r3
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80101aa:	2001      	movs	r0, #1
 80101ac:	f7f1 fe60 	bl	8001e70 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6898      	ldr	r0, [r3, #8]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	8999      	ldrh	r1, [r3, #12]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	7d1a      	ldrb	r2, [r3, #20]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	3318      	adds	r3, #24
 80101c0:	f7fe fb88 	bl	800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2208      	movs	r2, #8
 80101c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80101cc:	e0b6      	b.n	801033c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	f003 0304 	and.w	r3, r3, #4
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f000 80b2 	beq.w	8010340 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	7d1b      	ldrb	r3, [r3, #20]
 80101e0:	3301      	adds	r3, #1
 80101e2:	b2da      	uxtb	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6898      	ldr	r0, [r3, #8]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	8999      	ldrh	r1, [r3, #12]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	7d1a      	ldrb	r2, [r3, #20]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3316      	adds	r3, #22
 80101f8:	f7fe fb6c 	bl	800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2203      	movs	r2, #3
 8010200:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010204:	e09c      	b.n	8010340 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	691b      	ldr	r3, [r3, #16]
 801020a:	f003 0302 	and.w	r3, r3, #2
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 8098 	beq.w	8010344 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 f98a 	bl	801052e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801021a:	2001      	movs	r0, #1
 801021c:	f7f1 fe28 	bl	8001e70 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	7d1b      	ldrb	r3, [r3, #20]
 8010224:	3301      	adds	r3, #1
 8010226:	b2da      	uxtb	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6898      	ldr	r0, [r3, #8]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	8999      	ldrh	r1, [r3, #12]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	7d1a      	ldrb	r2, [r3, #20]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	336d      	adds	r3, #109	; 0x6d
 801023c:	2413      	movs	r4, #19
 801023e:	9400      	str	r4, [sp, #0]
 8010240:	f7fe fabd 	bl	800e7be <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2207      	movs	r2, #7
 8010248:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801024c:	e07a      	b.n	8010344 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010256:	2b00      	cmp	r3, #0
 8010258:	d076      	beq.n	8010348 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	7d1b      	ldrb	r3, [r3, #20]
 801025e:	3301      	adds	r3, #1
 8010260:	b2da      	uxtb	r2, r3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6898      	ldr	r0, [r3, #8]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	8999      	ldrh	r1, [r3, #12]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	7d1a      	ldrb	r2, [r3, #20]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	3318      	adds	r3, #24
 8010276:	f7fe fb2d 	bl	800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2208      	movs	r2, #8
 801027e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010282:	e061      	b.n	8010348 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	f003 0320 	and.w	r3, r3, #32
 801028c:	2b00      	cmp	r3, #0
 801028e:	d05d      	beq.n	801034c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	2200      	movs	r2, #0
 8010296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	689b      	ldr	r3, [r3, #8]
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	755a      	strb	r2, [r3, #21]
                                onInit();
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	3310      	adds	r3, #16
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102be:	e045      	b.n	801034c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d041      	beq.n	8010350 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	7d1b      	ldrb	r3, [r3, #20]
 80102d0:	3301      	adds	r3, #1
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6898      	ldr	r0, [r3, #8]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	8999      	ldrh	r1, [r3, #12]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	7d1a      	ldrb	r2, [r3, #20]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f103 0416 	add.w	r4, r3, #22
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	336b      	adds	r3, #107	; 0x6b
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	4623      	mov	r3, r4
 80102f2:	f7fe fb8d 	bl	800ea10 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2205      	movs	r2, #5
 80102fa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102fe:	e027      	b.n	8010350 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	f003 0308 	and.w	r3, r3, #8
 8010308:	2b00      	cmp	r3, #0
 801030a:	d023      	beq.n	8010354 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	689a      	ldr	r2, [r3, #8]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	899b      	ldrh	r3, [r3, #12]
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f7fe f963 	bl	800e5e2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010322:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010332:	e00f      	b.n	8010354 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8010334:	bf00      	nop
 8010336:	e00e      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010338:	bf00      	nop
 801033a:	e00c      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801033c:	bf00      	nop
 801033e:	e00a      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010340:	bf00      	nop
 8010342:	e008      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010344:	bf00      	nop
 8010346:	e006      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010348:	bf00      	nop
 801034a:	e004      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801034c:	bf00      	nop
 801034e:	e002      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010350:	bf00      	nop
 8010352:	e000      	b.n	8010356 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010354:	bf00      	nop
        }
}
 8010356:	bf00      	nop
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bdb0      	pop	{r4, r5, r7, pc}
 801035e:	bf00      	nop

08010360 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8010360:	b5b0      	push	{r4, r5, r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af02      	add	r7, sp, #8
 8010366:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801036e:	2b00      	cmp	r3, #0
 8010370:	f040 8084 	bne.w	801047c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801037c:	2b00      	cmp	r3, #0
 801037e:	d03a      	beq.n	80103f6 <_ZN5BTHID3RunEv+0x96>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	7a5b      	ldrb	r3, [r3, #9]
 8010386:	f083 0301 	eor.w	r3, r3, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	2b00      	cmp	r3, #0
 801038e:	d032      	beq.n	80103f6 <_ZN5BTHID3RunEv+0x96>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	7d5b      	ldrb	r3, [r3, #21]
 8010394:	f083 0301 	eor.w	r3, r3, #1
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d02b      	beq.n	80103f6 <_ZN5BTHID3RunEv+0x96>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80103a4:	f083 0301 	eor.w	r3, r3, #1
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d023      	beq.n	80103f6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	2201      	movs	r2, #1
 80103b4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	8b5a      	ldrh	r2, [r3, #26]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6898      	ldr	r0, [r3, #8]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	8999      	ldrh	r1, [r3, #12]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	7d1a      	ldrb	r2, [r3, #20]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	336b      	adds	r3, #107	; 0x6b
 80103e4:	2411      	movs	r4, #17
 80103e6:	9400      	str	r4, [sp, #0]
 80103e8:	f7fe f9e9 	bl	800e7be <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2202      	movs	r2, #2
 80103f0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80103f4:	e041      	b.n	801047a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	f003 0301 	and.w	r3, r3, #1
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d03b      	beq.n	801047a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6898      	ldr	r0, [r3, #8]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	8999      	ldrh	r1, [r3, #12]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	7d1a      	ldrb	r2, [r3, #20]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	3316      	adds	r3, #22
 8010418:	2501      	movs	r5, #1
 801041a:	9501      	str	r5, [sp, #4]
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	4623      	mov	r3, r4
 8010420:	f7fe fa0b 	bl	800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010424:	2001      	movs	r0, #1
 8010426:	f7f1 fd23 	bl	8001e70 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6898      	ldr	r0, [r3, #8]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	8999      	ldrh	r1, [r3, #12]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	7d1a      	ldrb	r2, [r3, #20]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	3316      	adds	r3, #22
 8010440:	2500      	movs	r5, #0
 8010442:	9501      	str	r5, [sp, #4]
 8010444:	9300      	str	r3, [sp, #0]
 8010446:	4623      	mov	r3, r4
 8010448:	f7fe f9f7 	bl	800e83a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7d1b      	ldrb	r3, [r3, #20]
 8010450:	3301      	adds	r3, #1
 8010452:	b2da      	uxtb	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010458:	2001      	movs	r0, #1
 801045a:	f7f1 fd09 	bl	8001e70 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6898      	ldr	r0, [r3, #8]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	8999      	ldrh	r1, [r3, #12]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	7d1a      	ldrb	r2, [r3, #20]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3316      	adds	r3, #22
 801046e:	f7fe fa31 	bl	800e8d4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2204      	movs	r2, #4
 8010476:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801047a:	bf00      	nop
        }
}
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bdb0      	pop	{r4, r5, r7, pc}

08010484 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b087      	sub	sp, #28
 8010488:	af02      	add	r7, sp, #8
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	4613      	mov	r3, r2
 8010490:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6898      	ldr	r0, [r3, #8]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	8999      	ldrh	r1, [r3, #12]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	7edb      	ldrb	r3, [r3, #27]
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	7f12      	ldrb	r2, [r2, #28]
 80104a2:	79fc      	ldrb	r4, [r7, #7]
 80104a4:	9201      	str	r2, [sp, #4]
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	4623      	mov	r3, r4
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	f7fe f8f8 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80104b0:	bf00      	nop
 80104b2:	3714      	adds	r7, #20
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd90      	pop	{r4, r7, pc}

080104b8 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70fb      	strb	r3, [r7, #3]
 80104c4:	4613      	mov	r3, r2
 80104c6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2207      	movs	r2, #7
 80104cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	78fa      	ldrb	r2, [r7, #3]
 80104d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	78ba      	ldrb	r2, [r7, #2]
 80104dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2205      	movs	r2, #5
 80104ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2202      	movs	r2, #2
 80104fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2235      	movs	r2, #53	; 0x35
 8010504:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	3328      	adds	r3, #40	; 0x28
 801051c:	220a      	movs	r2, #10
 801051e:	4619      	mov	r1, r3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff ffaf 	bl	8010484 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010526:	bf00      	nop
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801052e:	b590      	push	{r4, r7, lr}
 8010530:	b087      	sub	sp, #28
 8010532:	af02      	add	r7, sp, #8
 8010534:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801053c:	2b00      	cmp	r3, #0
 801053e:	d008      	beq.n	8010552 <_ZN5BTHID11setProtocolEv+0x24>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010546:	2b01      	cmp	r3, #1
 8010548:	d003      	beq.n	8010552 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010558:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801055c:	b2db      	uxtb	r3, r3
 801055e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6898      	ldr	r0, [r3, #8]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	8999      	ldrh	r1, [r3, #12]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7d9b      	ldrb	r3, [r3, #22]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	7dd2      	ldrb	r2, [r2, #23]
 8010570:	f107 040f 	add.w	r4, r7, #15
 8010574:	9201      	str	r2, [sp, #4]
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	2301      	movs	r3, #1
 801057a:	4622      	mov	r2, r4
 801057c:	f7fe f890 	bl	800e6a0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010580:	bf00      	nop
 8010582:	3714      	adds	r7, #20
 8010584:	46bd      	mov	sp, r7
 8010586:	bd90      	pop	{r4, r7, pc}

08010588 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	460b      	mov	r3, r1
 8010592:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8010594:	78fb      	ldrb	r3, [r7, #3]
 8010596:	2b03      	cmp	r3, #3
 8010598:	d86e      	bhi.n	8010678 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801059a:	a201      	add	r2, pc, #4	; (adr r2, 80105a0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105a0:	080105b1 	.word	0x080105b1
 80105a4:	080105e3 	.word	0x080105e3
 80105a8:	08010615 	.word	0x08010615
 80105ac:	08010647 	.word	0x08010647
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	7a1b      	ldrb	r3, [r3, #8]
 80105b4:	f003 030f 	and.w	r3, r3, #15
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	2b07      	cmp	r3, #7
 80105bc:	d00d      	beq.n	80105da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	7a1b      	ldrb	r3, [r3, #8]
 80105c2:	f003 030f 	and.w	r3, r3, #15
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d006      	beq.n	80105da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	7a1b      	ldrb	r3, [r3, #8]
 80105d0:	f003 030f 	and.w	r3, r3, #15
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d101      	bne.n	80105de <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80105da:	2301      	movs	r3, #1
 80105dc:	e04d      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80105de:	2300      	movs	r3, #0
 80105e0:	e04b      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	7a1b      	ldrb	r3, [r3, #8]
 80105e6:	f003 030f 	and.w	r3, r3, #15
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d00d      	beq.n	801060c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	7a1b      	ldrb	r3, [r3, #8]
 80105f4:	f003 030f 	and.w	r3, r3, #15
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	d006      	beq.n	801060c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	7a1b      	ldrb	r3, [r3, #8]
 8010602:	f003 030f 	and.w	r3, r3, #15
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b03      	cmp	r3, #3
 801060a:	d101      	bne.n	8010610 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801060c:	2301      	movs	r3, #1
 801060e:	e034      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010610:	2300      	movs	r3, #0
 8010612:	e032      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7a1b      	ldrb	r3, [r3, #8]
 8010618:	f003 030f 	and.w	r3, r3, #15
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b03      	cmp	r3, #3
 8010620:	d00d      	beq.n	801063e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	7a1b      	ldrb	r3, [r3, #8]
 8010626:	f003 030f 	and.w	r3, r3, #15
 801062a:	b2db      	uxtb	r3, r3
 801062c:	2b04      	cmp	r3, #4
 801062e:	d006      	beq.n	801063e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	7a1b      	ldrb	r3, [r3, #8]
 8010634:	f003 030f 	and.w	r3, r3, #15
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b05      	cmp	r3, #5
 801063c:	d101      	bne.n	8010642 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801063e:	2301      	movs	r3, #1
 8010640:	e01b      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010642:	2300      	movs	r3, #0
 8010644:	e019      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	7a1b      	ldrb	r3, [r3, #8]
 801064a:	f003 030f 	and.w	r3, r3, #15
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b05      	cmp	r3, #5
 8010652:	d00d      	beq.n	8010670 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	7a1b      	ldrb	r3, [r3, #8]
 8010658:	f003 030f 	and.w	r3, r3, #15
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b06      	cmp	r3, #6
 8010660:	d006      	beq.n	8010670 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7a1b      	ldrb	r3, [r3, #8]
 8010666:	f003 030f 	and.w	r3, r3, #15
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b07      	cmp	r3, #7
 801066e:	d101      	bne.n	8010674 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8010670:	2301      	movs	r3, #1
 8010672:	e002      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010674:	2300      	movs	r3, #0
 8010676:	e000      	b.n	801067a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8010678:	2300      	movs	r3, #0
        }
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop

08010688 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8010694:	78fb      	ldrb	r3, [r7, #3]
 8010696:	2b03      	cmp	r3, #3
 8010698:	d806      	bhi.n	80106a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 801069a:	78fb      	ldrb	r3, [r7, #3]
 801069c:	4619      	mov	r1, r3
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f7ff ff72 	bl	8010588 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80106a4:	4603      	mov	r3, r0
 80106a6:	e011      	b.n	80106cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80106b0:	4619      	mov	r1, r3
 80106b2:	78fb      	ldrb	r3, [r7, #3]
 80106b4:	4a07      	ldr	r2, [pc, #28]	; (80106d4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 80106b6:	4413      	add	r3, r2
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	fa21 f303 	lsr.w	r3, r1, r3
 80106be:	f003 0301 	and.w	r3, r3, #1
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	bf14      	ite	ne
 80106c6:	2301      	movne	r3, #1
 80106c8:	2300      	moveq	r3, #0
 80106ca:	b2db      	uxtb	r3, r3
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	080128ec 	.word	0x080128ec

080106d8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	460b      	mov	r3, r1
 80106e2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 80106e4:	78fb      	ldrb	r3, [r7, #3]
 80106e6:	4a1b      	ldr	r2, [pc, #108]	; (8010754 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 80106e8:	4413      	add	r3, r2
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	461a      	mov	r2, r3
 80106ee:	2301      	movs	r3, #1
 80106f0:	4093      	lsls	r3, r2
 80106f2:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80106fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80106fe:	021b      	lsls	r3, r3, #8
 8010700:	4313      	orrs	r3, r2
 8010702:	461a      	mov	r2, r3
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	4013      	ands	r3, r2
 8010708:	2b00      	cmp	r3, #0
 801070a:	bf14      	ite	ne
 801070c:	2301      	movne	r3, #1
 801070e:	2300      	moveq	r3, #0
 8010710:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801071c:	021b      	lsls	r3, r3, #8
 801071e:	4313      	orrs	r3, r2
 8010720:	461a      	mov	r2, r3
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	43db      	mvns	r3, r3
 8010726:	4013      	ands	r3, r2
 8010728:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	b2d1      	uxtb	r1, r2
 8010730:	2000      	movs	r0, #0
 8010732:	4301      	orrs	r1, r0
 8010734:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010738:	0a12      	lsrs	r2, r2, #8
 801073a:	b292      	uxth	r2, r2
 801073c:	2100      	movs	r1, #0
 801073e:	430a      	orrs	r2, r1
 8010740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8010744:	7afb      	ldrb	r3, [r7, #11]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3714      	adds	r7, #20
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	080128ec 	.word	0x080128ec

08010758 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8010764:	78fb      	ldrb	r3, [r7, #3]
 8010766:	2b08      	cmp	r3, #8
 8010768:	d102      	bne.n	8010770 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	7adb      	ldrb	r3, [r3, #11]
 801076e:	e006      	b.n	801077e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8010770:	78fb      	ldrb	r3, [r7, #3]
 8010772:	2b09      	cmp	r3, #9
 8010774:	d102      	bne.n	801077c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	7b1b      	ldrb	r3, [r3, #12]
 801077a:	e000      	b.n	801077e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 801077c:	2300      	movs	r3, #0
}
 801077e:	4618      	mov	r0, r3
 8010780:	370c      	adds	r7, #12
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 801078a:	b480      	push	{r7}
 801078c:	b083      	sub	sp, #12
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8010796:	78fb      	ldrb	r3, [r7, #3]
 8010798:	687a      	ldr	r2, [r7, #4]
 801079a:	4413      	add	r3, r2
 801079c:	791b      	ldrb	r3, [r3, #4]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	370c      	adds	r7, #12
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b086      	sub	sp, #24
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	460b      	mov	r3, r1
 80107b4:	607a      	str	r2, [r7, #4]
 80107b6:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80107b8:	7afb      	ldrb	r3, [r7, #11]
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	f240 80a6 	bls.w	801090c <_ZN9PS4Parser5ParseEhPh+0x162>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f000 80a2 	beq.w	801090c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d10e      	bne.n	80107ee <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	1d18      	adds	r0, r3, #4
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	1c59      	adds	r1, r3, #1
 80107d8:	7afb      	ldrb	r3, [r7, #11]
 80107da:	3b01      	subs	r3, #1
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	2b3c      	cmp	r3, #60	; 0x3c
 80107e0:	bf28      	it	cs
 80107e2:	233c      	movcs	r3, #60	; 0x3c
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	461a      	mov	r2, r3
 80107e8:	f001 fe56 	bl	8012498 <memcpy>
 80107ec:	e016      	b.n	801081c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b11      	cmp	r3, #17
 80107f4:	f040 8098 	bne.w	8010928 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 80107f8:	7afb      	ldrb	r3, [r7, #11]
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	f240 8096 	bls.w	801092c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	1d18      	adds	r0, r3, #4
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	1cd9      	adds	r1, r3, #3
 8010808:	7afb      	ldrb	r3, [r7, #11]
 801080a:	3b03      	subs	r3, #3
 801080c:	b2db      	uxtb	r3, r3
 801080e:	2b3c      	cmp	r3, #60	; 0x3c
 8010810:	bf28      	it	cs
 8010812:	233c      	movcs	r3, #60	; 0x3c
 8010814:	b2db      	uxtb	r3, r3
 8010816:	461a      	mov	r2, r3
 8010818:	f001 fe3e 	bl	8012498 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	689b      	ldr	r3, [r3, #8]
 8010820:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010828:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801082c:	429a      	cmp	r2, r3
 801082e:	d06d      	beq.n	801090c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010838:	461a      	mov	r2, r3
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010842:	43db      	mvns	r3, r3
 8010844:	4013      	ands	r3, r2
 8010846:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	b2d1      	uxtb	r1, r2
 801084e:	2000      	movs	r0, #0
 8010850:	4301      	orrs	r1, r0
 8010852:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010856:	0a12      	lsrs	r2, r2, #8
 8010858:	b292      	uxth	r2, r2
 801085a:	2100      	movs	r1, #0
 801085c:	430a      	orrs	r2, r1
 801085e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	f3c3 0117 	ubfx	r1, r3, #0, #24
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801086e:	f361 0317 	bfi	r3, r1, #0, #24
 8010872:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8010874:	2300      	movs	r3, #0
 8010876:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8010878:	2100      	movs	r1, #0
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	f7ff fe84 	bl	8010588 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010880:	4603      	mov	r3, r0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d003      	beq.n	801088e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8010886:	7dfb      	ldrb	r3, [r7, #23]
 8010888:	f043 0301 	orr.w	r3, r3, #1
 801088c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 801088e:	2101      	movs	r1, #1
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff fe79 	bl	8010588 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d003      	beq.n	80108a4 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 801089c:	7dfb      	ldrb	r3, [r7, #23]
 801089e:	f043 0302 	orr.w	r3, r3, #2
 80108a2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80108a4:	2102      	movs	r1, #2
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f7ff fe6e 	bl	8010588 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d003      	beq.n	80108ba <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	f043 0304 	orr.w	r3, r3, #4
 80108b8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 80108ba:	2103      	movs	r1, #3
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff fe63 	bl	8010588 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d003      	beq.n	80108d0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 80108c8:	7dfb      	ldrb	r3, [r7, #23]
 80108ca:	f043 0308 	orr.w	r3, r3, #8
 80108ce:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108d6:	7dfa      	ldrb	r2, [r7, #23]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d017      	beq.n	801090c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108e2:	b25b      	sxtb	r3, r3
 80108e4:	43db      	mvns	r3, r3
 80108e6:	b25a      	sxtb	r2, r3
 80108e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80108ec:	4013      	ands	r3, r2
 80108ee:	b25b      	sxtb	r3, r3
 80108f0:	f003 030f 	and.w	r3, r3, #15
 80108f4:	b2d9      	uxtb	r1, r3
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80108fc:	f361 0303 	bfi	r3, r1, #0, #4
 8010900:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	7dfa      	ldrb	r2, [r7, #23]
 8010908:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00b      	beq.n	801092e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	3246      	adds	r2, #70	; 0x46
 8010920:	4611      	mov	r1, r2
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	4798      	blx	r3
 8010926:	e002      	b.n	801092e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010928:	bf00      	nop
 801092a:	e000      	b.n	801092e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 801092c:	bf00      	nop
}
 801092e:	3718      	adds	r7, #24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 801093c:	2300      	movs	r3, #0
 801093e:	73fb      	strb	r3, [r7, #15]
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	2b03      	cmp	r3, #3
 8010944:	d808      	bhi.n	8010958 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8010946:	7bfb      	ldrb	r3, [r7, #15]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	4413      	add	r3, r2
 801094c:	227f      	movs	r2, #127	; 0x7f
 801094e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8010950:	7bfb      	ldrb	r3, [r7, #15]
 8010952:	3301      	adds	r3, #1
 8010954:	73fb      	strb	r3, [r7, #15]
 8010956:	e7f3      	b.n	8010940 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	6893      	ldr	r3, [r2, #8]
 801095c:	f36f 0317 	bfc	r3, #0, #24
 8010960:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010966:	f36f 0317 	bfc	r3, #0, #24
 801096a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 801096c:	2300      	movs	r3, #0
 801096e:	73fb      	strb	r3, [r7, #15]
 8010970:	7bfb      	ldrb	r3, [r7, #15]
 8010972:	2b01      	cmp	r3, #1
 8010974:	d808      	bhi.n	8010988 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8010976:	7bfb      	ldrb	r3, [r7, #15]
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	4413      	add	r3, r2
 801097c:	2200      	movs	r2, #0
 801097e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	3301      	adds	r3, #1
 8010984:	73fb      	strb	r3, [r7, #15]
 8010986:	e7f3      	b.n	8010970 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010988:	2300      	movs	r3, #0
 801098a:	73fb      	strb	r3, [r7, #15]
 801098c:	7bfb      	ldrb	r3, [r7, #15]
 801098e:	2b02      	cmp	r3, #2
 8010990:	d81b      	bhi.n	80109ca <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010992:	2300      	movs	r3, #0
 8010994:	73bb      	strb	r3, [r7, #14]
 8010996:	7bbb      	ldrb	r3, [r7, #14]
 8010998:	2b01      	cmp	r3, #1
 801099a:	d812      	bhi.n	80109c2 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 801099c:	7bfa      	ldrb	r2, [r7, #15]
 801099e:	7bbb      	ldrb	r3, [r7, #14]
 80109a0:	6879      	ldr	r1, [r7, #4]
 80109a2:	0098      	lsls	r0, r3, #2
 80109a4:	4613      	mov	r3, r2
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	4413      	add	r3, r2
 80109aa:	4403      	add	r3, r0
 80109ac:	440b      	add	r3, r1
 80109ae:	f103 0220 	add.w	r2, r3, #32
 80109b2:	7993      	ldrb	r3, [r2, #6]
 80109b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109b8:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80109ba:	7bbb      	ldrb	r3, [r7, #14]
 80109bc:	3301      	adds	r3, #1
 80109be:	73bb      	strb	r3, [r7, #14]
 80109c0:	e7e9      	b.n	8010996 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	3301      	adds	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]
 80109c8:	e7e0      	b.n	801098c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	7a13      	ldrb	r3, [r2, #8]
 80109ce:	2108      	movs	r1, #8
 80109d0:	f361 0303 	bfi	r3, r1, #0, #4
 80109d4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80109dc:	2108      	movs	r1, #8
 80109de:	f361 0303 	bfi	r3, r1, #0, #4
 80109e2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80109ec:	f36f 0303 	bfc	r3, #0, #4
 80109f0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8010a4c:	bf00      	nop
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	2180      	movs	r1, #128	; 0x80
 8010a5e:	4803      	ldr	r0, [pc, #12]	; (8010a6c <_ZN2P95IsSetEv+0x14>)
 8010a60:	f7f1 fca0 	bl	80023a4 <HAL_GPIO_ReadPin>
 8010a64:	4603      	mov	r3, r0
 8010a66:	4618      	mov	r0, r3
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	40020800 	.word	0x40020800

08010a70 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f001 f9bb 	bl	8011df4 <_ZN8MAX3421eI3P102P9EC1Ev>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f001 f9d3 	bl	8011e2c <_ZN15AddressPoolImplILh16EEC1Ev>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8010a8e:	4b05      	ldr	r3, [pc, #20]	; (8010aa4 <_ZN3USBC1Ev+0x34>)
 8010a90:	2211      	movs	r2, #17
 8010a92:	701a      	strb	r2, [r3, #0]
        init();
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f807 	bl	8010aa8 <_ZN3USB4initEv>
}
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	20004f3d 	.word	0x20004f3d

08010aa8 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	460b      	mov	r3, r1
 8010ace:	70fb      	strb	r3, [r7, #3]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	78fa      	ldrb	r2, [r7, #3]
 8010ad8:	4611      	mov	r1, r2
 8010ada:	4618      	mov	r0, r3
 8010adc:	f001 f9e0 	bl	8011ea0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010ae0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d003      	beq.n	8010af0 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d101      	bne.n	8010af4 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	e018      	b.n	8010b26 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8010afa:	2300      	movs	r3, #0
 8010afc:	74fb      	strb	r3, [r7, #19]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	795b      	ldrb	r3, [r3, #5]
 8010b02:	7cfa      	ldrb	r2, [r7, #19]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d20d      	bcs.n	8010b24 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	78ba      	ldrb	r2, [r7, #2]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d101      	bne.n	8010b16 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	e007      	b.n	8010b26 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	3303      	adds	r3, #3
 8010b1a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b1c:	7cfb      	ldrb	r3, [r7, #19]
 8010b1e:	3301      	adds	r3, #1
 8010b20:	74fb      	strb	r3, [r7, #19]
 8010b22:	e7ec      	b.n	8010afe <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b086      	sub	sp, #24
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	60f8      	str	r0, [r7, #12]
 8010b36:	607b      	str	r3, [r7, #4]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	72fb      	strb	r3, [r7, #11]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8010b46:	23d8      	movs	r3, #216	; 0xd8
 8010b48:	e015      	b.n	8010b76 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	7afa      	ldrb	r2, [r7, #11]
 8010b4e:	4611      	mov	r1, r2
 8010b50:	4618      	mov	r0, r3
 8010b52:	f001 f9a5 	bl	8011ea0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b56:	6178      	str	r0, [r7, #20]

        if(!p)
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d101      	bne.n	8010b62 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010b5e:	23d6      	movs	r3, #214	; 0xd6
 8010b60:	e009      	b.n	8010b76 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	7afa      	ldrb	r2, [r7, #11]
 8010b66:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	7aba      	ldrb	r2, [r7, #10]
 8010b72:	715a      	strb	r2, [r3, #5]

        return 0;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b086      	sub	sp, #24
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	60f8      	str	r0, [r7, #12]
 8010b86:	607b      	str	r3, [r7, #4]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	72fb      	strb	r3, [r7, #11]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	7afa      	ldrb	r2, [r7, #11]
 8010b94:	4611      	mov	r1, r2
 8010b96:	4618      	mov	r0, r3
 8010b98:	f001 f982 	bl	8011ea0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b9c:	6178      	str	r0, [r7, #20]

        if(!p)
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d101      	bne.n	8010ba8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010ba4:	23d6      	movs	r3, #214	; 0xd6
 8010ba6:	e04e      	b.n	8010c46 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d101      	bne.n	8010bb4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010bb0:	23d7      	movs	r3, #215	; 0xd7
 8010bb2:	e048      	b.n	8010c46 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010bb4:	7aba      	ldrb	r2, [r7, #10]
 8010bb6:	7afb      	ldrb	r3, [r7, #11]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7ff ff82 	bl	8010ac4 <_ZN3USB14getEpInfoEntryEhh>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8010bce:	23db      	movs	r3, #219	; 0xdb
 8010bd0:	e039      	b.n	8010c46 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	789b      	ldrb	r3, [r3, #2]
 8010bd8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2b0f      	cmp	r3, #15
 8010be0:	bf28      	it	cs
 8010be2:	230f      	movcs	r3, #15
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	461a      	mov	r2, r3
 8010be8:	2301      	movs	r3, #1
 8010bea:	4093      	lsls	r3, r2
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	6a3b      	ldr	r3, [r7, #32]
 8010bf0:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010bf2:	6a3b      	ldr	r3, [r7, #32]
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	3b01      	subs	r3, #1
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	6a3b      	ldr	r3, [r7, #32]
 8010bfc:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8010bfe:	7afb      	ldrb	r3, [r7, #11]
 8010c00:	461a      	mov	r2, r3
 8010c02:	21e0      	movs	r1, #224	; 0xe0
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f7f0 fe03 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8010c0a:	21d8      	movs	r1, #216	; 0xd8
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7f0 fe51 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c12:	4603      	mov	r3, r0
 8010c14:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	799b      	ldrb	r3, [r3, #6]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d009      	beq.n	8010c32 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010c24:	7cfb      	ldrb	r3, [r7, #19]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	f043 0302 	orr.w	r3, r3, #2
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	e003      	b.n	8010c3a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010c32:	7cfb      	ldrb	r3, [r7, #19]
 8010c34:	f023 0306 	bic.w	r3, r3, #6
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	21d8      	movs	r1, #216	; 0xd8
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f7f0 fde6 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8010c4e:	b590      	push	{r4, r7, lr}
 8010c50:	b08b      	sub	sp, #44	; 0x2c
 8010c52:	af02      	add	r7, sp, #8
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	4608      	mov	r0, r1
 8010c58:	4611      	mov	r1, r2
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	70fb      	strb	r3, [r7, #3]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70bb      	strb	r3, [r7, #2]
 8010c64:	4613      	mov	r3, r2
 8010c66:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8010c68:	2300      	movs	r3, #0
 8010c6a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010c74:	f107 000c 	add.w	r0, r7, #12
 8010c78:	78ba      	ldrb	r2, [r7, #2]
 8010c7a:	78f9      	ldrb	r1, [r7, #3]
 8010c7c:	f107 030a 	add.w	r3, r7, #10
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	4603      	mov	r3, r0
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff ff7a 	bl	8010b7e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8010c8e:	7ffb      	ldrb	r3, [r7, #31]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d001      	beq.n	8010c98 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8010c94:	7ffb      	ldrb	r3, [r7, #31]
 8010c96:	e0ae      	b.n	8010df6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8010c98:	787b      	ldrb	r3, [r7, #1]
 8010c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	bfcc      	ite	gt
 8010ca2:	2301      	movgt	r3, #1
 8010ca4:	2300      	movle	r3, #0
 8010ca6:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010ca8:	787b      	ldrb	r3, [r7, #1]
 8010caa:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010cac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010cb0:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010cb2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010cb6:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010cb8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010cbc:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010cbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cc0:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cc6:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010cc8:	f107 0310 	add.w	r3, r7, #16
 8010ccc:	2208      	movs	r2, #8
 8010cce:	2120      	movs	r1, #32
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f001 f90b 	bl	8011eec <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010cd6:	897b      	ldrh	r3, [r7, #10]
 8010cd8:	78ba      	ldrb	r2, [r7, #2]
 8010cda:	2110      	movs	r1, #16
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 faf2 	bl	80112c6 <_ZN3USB11dispatchPktEhht>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010ce6:	7ffb      	ldrb	r3, [r7, #31]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010cec:	7ffb      	ldrb	r3, [r7, #31]
 8010cee:	e082      	b.n	8010df6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d072      	beq.n	8010ddc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010cf6:	7efb      	ldrb	r3, [r7, #27]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d057      	beq.n	8010dac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d00:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010d02:	68fa      	ldr	r2, [r7, #12]
 8010d04:	7893      	ldrb	r3, [r2, #2]
 8010d06:	f043 0302 	orr.w	r3, r3, #2
 8010d0a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010d0c:	8bbb      	ldrh	r3, [r7, #28]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d05f      	beq.n	8010dd2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d16:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010d18:	68f9      	ldr	r1, [r7, #12]
 8010d1a:	897a      	ldrh	r2, [r7, #10]
 8010d1c:	f107 0008 	add.w	r0, r7, #8
 8010d20:	2300      	movs	r3, #0
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	4603      	mov	r3, r0
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 f8a6 	bl	8010e7c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010d30:	4603      	mov	r3, r0
 8010d32:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010d34:	7ffb      	ldrb	r3, [r7, #31]
 8010d36:	2b06      	cmp	r3, #6
 8010d38:	d114      	bne.n	8010d64 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010d3a:	21f8      	movs	r1, #248	; 0xf8
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f7f0 fdb9 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010d42:	4603      	mov	r3, r0
 8010d44:	f003 0320 	and.w	r3, r3, #32
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	bf0c      	ite	eq
 8010d4c:	2301      	moveq	r3, #1
 8010d4e:	2300      	movne	r3, #0
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	f003 0301 	and.w	r3, r3, #1
 8010d58:	b2d9      	uxtb	r1, r3
 8010d5a:	7893      	ldrb	r3, [r2, #2]
 8010d5c:	f361 0341 	bfi	r3, r1, #1, #1
 8010d60:	7093      	strb	r3, [r2, #2]
 8010d62:	e7d3      	b.n	8010d0c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010d64:	7ffb      	ldrb	r3, [r7, #31]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010d6a:	7ffb      	ldrb	r3, [r7, #31]
 8010d6c:	e043      	b.n	8010df6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010d6e:	7ffb      	ldrb	r3, [r7, #31]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d111      	bne.n	8010d98 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00e      	beq.n	8010d98 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	681c      	ldr	r4, [r3, #0]
 8010d80:	8939      	ldrh	r1, [r7, #8]
 8010d82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d86:	8bbb      	ldrh	r3, [r7, #28]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	833b      	strh	r3, [r7, #24]
 8010d8e:	f107 0318 	add.w	r3, r7, #24
 8010d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010d96:	47a0      	blx	r4

                                left -= read;
 8010d98:	893b      	ldrh	r3, [r7, #8]
 8010d9a:	8bba      	ldrh	r2, [r7, #28]
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010da0:	893b      	ldrh	r3, [r7, #8]
 8010da2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d812      	bhi.n	8010dd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010daa:	e7af      	b.n	8010d0c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010dac:	68fa      	ldr	r2, [r7, #12]
 8010dae:	7893      	ldrb	r3, [r2, #2]
 8010db0:	f043 0301 	orr.w	r3, r3, #1
 8010db4:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010db6:	68f9      	ldr	r1, [r7, #12]
 8010db8:	897a      	ldrh	r2, [r7, #10]
 8010dba:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f000 f953 	bl	8011070 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	77fb      	strb	r3, [r7, #31]
 8010dce:	e000      	b.n	8010dd2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010dd0:	bf00      	nop
                }
                if(rcode) //return error
 8010dd2:	7ffb      	ldrb	r3, [r7, #31]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d001      	beq.n	8010ddc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010dd8:	7ffb      	ldrb	r3, [r7, #31]
 8010dda:	e00c      	b.n	8010df6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010ddc:	7efb      	ldrb	r3, [r7, #27]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d001      	beq.n	8010de6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010de2:	21a0      	movs	r1, #160	; 0xa0
 8010de4:	e000      	b.n	8010de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010de6:	2180      	movs	r1, #128	; 0x80
 8010de8:	897b      	ldrh	r3, [r7, #10]
 8010dea:	78ba      	ldrb	r2, [r7, #2]
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 fa6a 	bl	80112c6 <_ZN3USB11dispatchPktEhht>
 8010df2:	4603      	mov	r3, r0
 8010df4:	bf00      	nop
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3724      	adds	r7, #36	; 0x24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd90      	pop	{r4, r7, pc}

08010dfe <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b08a      	sub	sp, #40	; 0x28
 8010e02:	af02      	add	r7, sp, #8
 8010e04:	60f8      	str	r0, [r7, #12]
 8010e06:	607b      	str	r3, [r7, #4]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	72fb      	strb	r3, [r7, #11]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010e10:	2300      	movs	r3, #0
 8010e12:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010e14:	2300      	movs	r3, #0
 8010e16:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010e18:	f107 0018 	add.w	r0, r7, #24
 8010e1c:	7aba      	ldrb	r2, [r7, #10]
 8010e1e:	7af9      	ldrb	r1, [r7, #11]
 8010e20:	f107 0316 	add.w	r3, r7, #22
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	4603      	mov	r3, r0
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f7ff fea8 	bl	8010b7e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010e32:	7ffb      	ldrb	r3, [r7, #31]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d010      	beq.n	8010e5a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010e38:	7ffb      	ldrb	r3, [r7, #31]
 8010e3a:	2181      	movs	r1, #129	; 0x81
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f001 f883 	bl	8011f48 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010e42:	7afb      	ldrb	r3, [r7, #11]
 8010e44:	2181      	movs	r1, #129	; 0x81
 8010e46:	4618      	mov	r0, r3
 8010e48:	f001 f87e 	bl	8011f48 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010e4c:	7abb      	ldrb	r3, [r7, #10]
 8010e4e:	2181      	movs	r1, #129	; 0x81
 8010e50:	4618      	mov	r0, r3
 8010e52:	f001 f879 	bl	8011f48 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010e56:	7ffb      	ldrb	r3, [r7, #31]
 8010e58:	e00c      	b.n	8010e74 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010e5a:	69b9      	ldr	r1, [r7, #24]
 8010e5c:	8afa      	ldrh	r2, [r7, #22]
 8010e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e62:	9301      	str	r3, [sp, #4]
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f000 f806 	bl	8010e7c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010e70:	4603      	mov	r3, r0
 8010e72:	bf00      	nop
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3720      	adds	r7, #32
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	603b      	str	r3, [r7, #0]
 8010e88:	4613      	mov	r3, r2
 8010e8a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	785b      	ldrb	r3, [r3, #1]
 8010e9a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	789b      	ldrb	r3, [r3, #2]
 8010ea6:	f003 0302 	and.w	r3, r3, #2
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d001      	beq.n	8010eb4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010eb0:	2320      	movs	r3, #32
 8010eb2:	e000      	b.n	8010eb6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010eb4:	2310      	movs	r3, #16
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	21e8      	movs	r1, #232	; 0xe8
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	f7f0 fca8 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	781a      	ldrb	r2, [r3, #0]
 8010ec4:	88fb      	ldrh	r3, [r7, #6]
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	f000 f9fc 	bl	80112c6 <_ZN3USB11dispatchPktEhht>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	2b06      	cmp	r3, #6
 8010ed6:	d123      	bne.n	8010f20 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010ed8:	21f8      	movs	r1, #248	; 0xf8
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f7f0 fcea 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	f003 0310 	and.w	r3, r3, #16
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	bf0c      	ite	eq
 8010eea:	2301      	moveq	r3, #1
 8010eec:	2300      	movne	r3, #0
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	f003 0301 	and.w	r3, r3, #1
 8010ef4:	b2d9      	uxtb	r1, r3
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	7893      	ldrb	r3, [r2, #2]
 8010efa:	f361 0341 	bfi	r3, r1, #1, #1
 8010efe:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	789b      	ldrb	r3, [r3, #2]
 8010f04:	f003 0302 	and.w	r3, r3, #2
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8010f0e:	2320      	movs	r3, #32
 8010f10:	e000      	b.n	8010f14 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8010f12:	2310      	movs	r3, #16
 8010f14:	461a      	mov	r2, r3
 8010f16:	21e8      	movs	r1, #232	; 0xe8
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7f0 fc79 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8010f1e:	e06e      	b.n	8010ffe <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d16c      	bne.n	8011000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8010f26:	21c8      	movs	r1, #200	; 0xc8
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f7f0 fcc3 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f003 0304 	and.w	r3, r3, #4
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	bf0c      	ite	eq
 8010f38:	2301      	moveq	r3, #1
 8010f3a:	2300      	movne	r3, #0
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d002      	beq.n	8010f48 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8010f42:	23f0      	movs	r3, #240	; 0xf0
 8010f44:	75fb      	strb	r3, [r7, #23]
                        break;
 8010f46:	e05c      	b.n	8011002 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8010f48:	2130      	movs	r1, #48	; 0x30
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f7f0 fcb2 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f50:	4603      	mov	r3, r0
 8010f52:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8010f54:	7dba      	ldrb	r2, [r7, #22]
 8010f56:	8a7b      	ldrh	r3, [r7, #18]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	dd01      	ble.n	8010f60 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8010f5c:	8a7b      	ldrh	r3, [r7, #18]
 8010f5e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	8a7a      	ldrh	r2, [r7, #18]
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8010f70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	da01      	bge.n	8010f7c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8010f7c:	7dba      	ldrb	r2, [r7, #22]
 8010f7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010f82:	4293      	cmp	r3, r2
 8010f84:	bfa8      	it	ge
 8010f86:	4613      	movge	r3, r2
 8010f88:	b2da      	uxtb	r2, r3
 8010f8a:	6a3b      	ldr	r3, [r7, #32]
 8010f8c:	2108      	movs	r1, #8
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f000 ffe6 	bl	8011f60 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8010f94:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8010f96:	2204      	movs	r2, #4
 8010f98:	21c8      	movs	r1, #200	; 0xc8
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f7f0 fc38 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	881a      	ldrh	r2, [r3, #0]
 8010fa4:	7dbb      	ldrb	r3, [r7, #22]
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	4413      	add	r3, r2
 8010faa:	b29a      	uxth	r2, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8010fb0:	7dba      	ldrb	r2, [r7, #22]
 8010fb2:	7c7b      	ldrb	r3, [r7, #17]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d304      	bcc.n	8010fc2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	8a7a      	ldrh	r2, [r7, #18]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d813      	bhi.n	8010fea <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8010fc2:	21f8      	movs	r1, #248	; 0xf8
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f7f0 fc75 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	f003 0310 	and.w	r3, r3, #16
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	e000      	b.n	8010fda <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8010fd8:	2100      	movs	r1, #0
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	7893      	ldrb	r3, [r2, #2]
 8010fde:	f361 0341 	bfi	r3, r1, #1, #1
 8010fe2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	75fb      	strb	r3, [r7, #23]
                        break;
 8010fe8:	e00b      	b.n	8011002 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8010fea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f43f af66 	beq.w	8010ec0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8010ff4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7f0 ff39 	bl	8001e70 <HAL_Delay>
        } //while( 1 )
 8010ffe:	e75f      	b.n	8010ec0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8011000:	bf00      	nop
        return ( rcode);
 8011002:	7dfb      	ldrb	r3, [r7, #23]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3718      	adds	r7, #24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af02      	add	r7, sp, #8
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	4608      	mov	r0, r1
 8011016:	4611      	mov	r1, r2
 8011018:	461a      	mov	r2, r3
 801101a:	4603      	mov	r3, r0
 801101c:	70fb      	strb	r3, [r7, #3]
 801101e:	460b      	mov	r3, r1
 8011020:	70bb      	strb	r3, [r7, #2]
 8011022:	4613      	mov	r3, r2
 8011024:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801102e:	f107 0010 	add.w	r0, r7, #16
 8011032:	78ba      	ldrb	r2, [r7, #2]
 8011034:	78f9      	ldrb	r1, [r7, #3]
 8011036:	f107 030e 	add.w	r3, r7, #14
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	4603      	mov	r3, r0
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff fd9d 	bl	8010b7e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011044:	4603      	mov	r3, r0
 8011046:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8011048:	7dfb      	ldrb	r3, [r7, #23]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801104e:	7dfb      	ldrb	r3, [r7, #23]
 8011050:	e00a      	b.n	8011068 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8011052:	6939      	ldr	r1, [r7, #16]
 8011054:	89fa      	ldrh	r2, [r7, #14]
 8011056:	8838      	ldrh	r0, [r7, #0]
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	4603      	mov	r3, r0
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f806 	bl	8011070 <_ZN3USB11OutTransferEP6EpInfottPh>
 8011064:	4603      	mov	r3, r0
 8011066:	bf00      	nop
}
 8011068:	4618      	mov	r0, r3
 801106a:	3718      	adds	r7, #24
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8011070:	b580      	push	{r7, lr}
 8011072:	b08a      	sub	sp, #40	; 0x28
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	4611      	mov	r1, r2
 801107c:	461a      	mov	r2, r3
 801107e:	460b      	mov	r3, r1
 8011080:	80fb      	strh	r3, [r7, #6]
 8011082:	4613      	mov	r3, r2
 8011084:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8011086:	2300      	movs	r3, #0
 8011088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801108e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8011090:	88bb      	ldrh	r3, [r7, #4]
 8011092:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	785b      	ldrb	r3, [r3, #1]
 8011098:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801109a:	7efb      	ldrb	r3, [r7, #27]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d002      	beq.n	80110a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 80110a0:	7efb      	ldrb	r3, [r7, #27]
 80110a2:	2b40      	cmp	r3, #64	; 0x40
 80110a4:	d901      	bls.n	80110aa <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 80110a6:	23da      	movs	r3, #218	; 0xda
 80110a8:	e109      	b.n	80112be <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80110aa:	f7f0 fed5 	bl	8001e58 <HAL_GetTick>
 80110ae:	4603      	mov	r3, r0
 80110b0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80110b4:	3308      	adds	r3, #8
 80110b6:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	789b      	ldrb	r3, [r3, #2]
 80110bc:	f003 0301 	and.w	r3, r3, #1
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 80110c6:	2380      	movs	r3, #128	; 0x80
 80110c8:	e000      	b.n	80110cc <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 80110ca:	2340      	movs	r3, #64	; 0x40
 80110cc:	461a      	mov	r2, r3
 80110ce:	21e8      	movs	r1, #232	; 0xe8
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f7f0 fb9d 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80110d6:	8bbb      	ldrh	r3, [r7, #28]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 80da 	beq.w	8011292 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80110e4:	2300      	movs	r3, #0
 80110e6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80110e8:	7efb      	ldrb	r3, [r7, #27]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	8bba      	ldrh	r2, [r7, #28]
 80110ee:	4293      	cmp	r3, r2
 80110f0:	bf28      	it	cs
 80110f2:	4613      	movcs	r3, r2
 80110f4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80110f6:	8a7b      	ldrh	r3, [r7, #18]
 80110f8:	b2da      	uxtb	r2, r3
 80110fa:	6a3b      	ldr	r3, [r7, #32]
 80110fc:	2110      	movs	r1, #16
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f000 fef4 	bl	8011eec <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8011104:	8a7b      	ldrh	r3, [r7, #18]
 8011106:	b2db      	uxtb	r3, r3
 8011108:	461a      	mov	r2, r3
 801110a:	2138      	movs	r1, #56	; 0x38
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f7f0 fb7f 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	f043 0320 	orr.w	r3, r3, #32
 801111a:	b2db      	uxtb	r3, r3
 801111c:	461a      	mov	r2, r3
 801111e:	21f0      	movs	r1, #240	; 0xf0
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f7f0 fb75 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011126:	21c8      	movs	r1, #200	; 0xc8
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7f0 fbc3 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801112e:	4603      	mov	r3, r0
 8011130:	b25b      	sxtb	r3, r3
 8011132:	43db      	mvns	r3, r3
 8011134:	b2db      	uxtb	r3, r3
 8011136:	09db      	lsrs	r3, r3, #7
 8011138:	b2db      	uxtb	r3, r3
 801113a:	2b00      	cmp	r3, #0
 801113c:	d000      	beq.n	8011140 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801113e:	e7f2      	b.n	8011126 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011140:	2280      	movs	r2, #128	; 0x80
 8011142:	21c8      	movs	r1, #200	; 0xc8
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f7f0 fb63 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801114a:	21f8      	movs	r1, #248	; 0xf8
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f7f0 fbb1 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011152:	4603      	mov	r3, r0
 8011154:	f003 030f 	and.w	r3, r3, #15
 8011158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011160:	2b00      	cmp	r3, #0
 8011162:	d008      	beq.n	8011176 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011164:	f7f0 fe78 	bl	8001e58 <HAL_GetTick>
 8011168:	4602      	mov	r2, r0
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	1ad3      	subs	r3, r2, r3
 801116e:	2b00      	cmp	r3, #0
 8011170:	da01      	bge.n	8011176 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011172:	2301      	movs	r3, #1
 8011174:	e000      	b.n	8011178 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8011176:	2300      	movs	r3, #0
 8011178:	2b00      	cmp	r3, #0
 801117a:	f000 8081 	beq.w	8011280 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801117e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011182:	2b0e      	cmp	r3, #14
 8011184:	d012      	beq.n	80111ac <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8011186:	2b0e      	cmp	r3, #14
 8011188:	f300 8085 	bgt.w	8011296 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801118c:	2b04      	cmp	r3, #4
 801118e:	d002      	beq.n	8011196 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8011190:	2b06      	cmp	r3, #6
 8011192:	d015      	beq.n	80111c0 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8011194:	e07f      	b.n	8011296 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8011196:	8bfb      	ldrh	r3, [r7, #30]
 8011198:	3301      	adds	r3, #1
 801119a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801119c:	88fb      	ldrh	r3, [r7, #6]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d032      	beq.n	8011208 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 80111a2:	8bfa      	ldrh	r2, [r7, #30]
 80111a4:	88fb      	ldrh	r3, [r7, #6]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d12e      	bne.n	8011208 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 80111aa:	e075      	b.n	8011298 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 80111ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111b0:	3301      	adds	r3, #1
 80111b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 80111b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111ba:	2b03      	cmp	r3, #3
 80111bc:	d126      	bne.n	801120c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 80111be:	e06b      	b.n	8011298 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80111c0:	21f8      	movs	r1, #248	; 0xf8
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f7f0 fb76 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80111c8:	4603      	mov	r3, r0
 80111ca:	f003 0320 	and.w	r3, r3, #32
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	bf0c      	ite	eq
 80111d2:	2301      	moveq	r3, #1
 80111d4:	2300      	movne	r3, #0
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	b2d9      	uxtb	r1, r3
 80111de:	68ba      	ldr	r2, [r7, #8]
 80111e0:	7893      	ldrb	r3, [r2, #2]
 80111e2:	f361 0300 	bfi	r3, r1, #0, #1
 80111e6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	789b      	ldrb	r3, [r3, #2]
 80111ec:	f003 0301 	and.w	r3, r3, #1
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d001      	beq.n	80111fa <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80111f6:	2380      	movs	r3, #128	; 0x80
 80111f8:	e000      	b.n	80111fc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80111fa:	2340      	movs	r3, #64	; 0x40
 80111fc:	461a      	mov	r2, r3
 80111fe:	21e8      	movs	r1, #232	; 0xe8
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f7f0 fb05 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8011206:	e002      	b.n	801120e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8011208:	bf00      	nop
 801120a:	e000      	b.n	801120e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801120c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801120e:	2200      	movs	r2, #0
 8011210:	2138      	movs	r1, #56	; 0x38
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7f0 fafc 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8011218:	6a3b      	ldr	r3, [r7, #32]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	461a      	mov	r2, r3
 801121e:	2110      	movs	r1, #16
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f7f0 faf5 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8011226:	8a7b      	ldrh	r3, [r7, #18]
 8011228:	b2db      	uxtb	r3, r3
 801122a:	461a      	mov	r2, r3
 801122c:	2138      	movs	r1, #56	; 0x38
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f7f0 faee 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	f043 0320 	orr.w	r3, r3, #32
 801123c:	b2db      	uxtb	r3, r3
 801123e:	461a      	mov	r2, r3
 8011240:	21f0      	movs	r1, #240	; 0xf0
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f7f0 fae4 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011248:	21c8      	movs	r1, #200	; 0xc8
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f7f0 fb32 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011250:	4603      	mov	r3, r0
 8011252:	b25b      	sxtb	r3, r3
 8011254:	43db      	mvns	r3, r3
 8011256:	b2db      	uxtb	r3, r3
 8011258:	09db      	lsrs	r3, r3, #7
 801125a:	b2db      	uxtb	r3, r3
 801125c:	2b00      	cmp	r3, #0
 801125e:	d000      	beq.n	8011262 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8011260:	e7f2      	b.n	8011248 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011262:	2280      	movs	r2, #128	; 0x80
 8011264:	21c8      	movs	r1, #200	; 0xc8
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f7f0 fad2 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801126c:	21f8      	movs	r1, #248	; 0xf8
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f7f0 fb20 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011274:	4603      	mov	r3, r0
 8011276:	f003 030f 	and.w	r3, r3, #15
 801127a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801127e:	e76d      	b.n	801115c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8011280:	8bba      	ldrh	r2, [r7, #28]
 8011282:	8a7b      	ldrh	r3, [r7, #18]
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8011288:	8a7b      	ldrh	r3, [r7, #18]
 801128a:	6a3a      	ldr	r2, [r7, #32]
 801128c:	4413      	add	r3, r2
 801128e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8011290:	e721      	b.n	80110d6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8011292:	bf00      	nop
 8011294:	e000      	b.n	8011298 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8011296:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8011298:	21f8      	movs	r1, #248	; 0xf8
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f7f0 fb0a 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112a0:	4603      	mov	r3, r0
 80112a2:	f003 0320 	and.w	r3, r3, #32
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 80112aa:	2101      	movs	r1, #1
 80112ac:	e000      	b.n	80112b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 80112ae:	2100      	movs	r1, #0
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	7893      	ldrb	r3, [r2, #2]
 80112b4:	f361 0300 	bfi	r3, r1, #0, #1
 80112b8:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 80112ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3728      	adds	r7, #40	; 0x28
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b086      	sub	sp, #24
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
 80112ce:	4608      	mov	r0, r1
 80112d0:	4611      	mov	r1, r2
 80112d2:	461a      	mov	r2, r3
 80112d4:	4603      	mov	r3, r0
 80112d6:	70fb      	strb	r3, [r7, #3]
 80112d8:	460b      	mov	r3, r1
 80112da:	70bb      	strb	r3, [r7, #2]
 80112dc:	4613      	mov	r3, r2
 80112de:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80112e0:	f7f0 fdba 	bl	8001e58 <HAL_GetTick>
 80112e4:	4603      	mov	r3, r0
 80112e6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80112ea:	3308      	adds	r3, #8
 80112ec:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80112ee:	2300      	movs	r3, #0
 80112f0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80112f2:	2300      	movs	r3, #0
 80112f4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80112f6:	2300      	movs	r3, #0
 80112f8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80112fa:	f7f0 fdad 	bl	8001e58 <HAL_GetTick>
 80112fe:	4602      	mov	r2, r0
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	1ad3      	subs	r3, r2, r3
 8011304:	0fdb      	lsrs	r3, r3, #31
 8011306:	b2db      	uxtb	r3, r3
 8011308:	2b00      	cmp	r3, #0
 801130a:	d04c      	beq.n	80113a6 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801130c:	78fa      	ldrb	r2, [r7, #3]
 801130e:	78bb      	ldrb	r3, [r7, #2]
 8011310:	4313      	orrs	r3, r2
 8011312:	b2db      	uxtb	r3, r3
 8011314:	461a      	mov	r2, r3
 8011316:	21f0      	movs	r1, #240	; 0xf0
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f7f0 fa79 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801131e:	23ff      	movs	r3, #255	; 0xff
 8011320:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011322:	f7f0 fd99 	bl	8001e58 <HAL_GetTick>
 8011326:	4602      	mov	r2, r0
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	0fdb      	lsrs	r3, r3, #31
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b00      	cmp	r3, #0
 8011332:	d010      	beq.n	8011356 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8011334:	21c8      	movs	r1, #200	; 0xc8
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f7f0 fabc 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801133c:	4603      	mov	r3, r0
 801133e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8011340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011344:	2b00      	cmp	r3, #0
 8011346:	daec      	bge.n	8011322 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8011348:	2280      	movs	r2, #128	; 0x80
 801134a:	21c8      	movs	r1, #200	; 0xc8
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7f0 fa5f 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8011352:	2300      	movs	r3, #0
 8011354:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8011356:	21f8      	movs	r1, #248	; 0xf8
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7f0 faab 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801135e:	4603      	mov	r3, r0
 8011360:	f003 030f 	and.w	r3, r3, #15
 8011364:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8011366:	7dfb      	ldrb	r3, [r7, #23]
 8011368:	2b04      	cmp	r3, #4
 801136a:	d002      	beq.n	8011372 <_ZN3USB11dispatchPktEhht+0xac>
 801136c:	2b0e      	cmp	r3, #14
 801136e:	d00c      	beq.n	801138a <_ZN3USB11dispatchPktEhht+0xc4>
 8011370:	e013      	b.n	801139a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8011372:	8abb      	ldrh	r3, [r7, #20]
 8011374:	3301      	adds	r3, #1
 8011376:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8011378:	883b      	ldrh	r3, [r7, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d00f      	beq.n	801139e <_ZN3USB11dispatchPktEhht+0xd8>
 801137e:	8aba      	ldrh	r2, [r7, #20]
 8011380:	883b      	ldrh	r3, [r7, #0]
 8011382:	429a      	cmp	r2, r3
 8011384:	d10b      	bne.n	801139e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8011386:	7dfb      	ldrb	r3, [r7, #23]
 8011388:	e00e      	b.n	80113a8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801138a:	7dbb      	ldrb	r3, [r7, #22]
 801138c:	3301      	adds	r3, #1
 801138e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8011390:	7dbb      	ldrb	r3, [r7, #22]
 8011392:	2b03      	cmp	r3, #3
 8011394:	d105      	bne.n	80113a2 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8011396:	7dfb      	ldrb	r3, [r7, #23]
 8011398:	e006      	b.n	80113a8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801139a:	7dfb      	ldrb	r3, [r7, #23]
 801139c:	e004      	b.n	80113a8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801139e:	bf00      	nop
 80113a0:	e7ab      	b.n	80112fa <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 80113a2:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80113a4:	e7a9      	b.n	80112fa <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 80113a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3718      	adds	r7, #24
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 80113b8:	2300      	movs	r3, #0
 80113ba:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f000 fdfd 	bl	8011fbc <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 fe12 	bl	8011fec <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 80113c8:	4603      	mov	r3, r0
 80113ca:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 80113cc:	7b3b      	ldrb	r3, [r7, #12]
 80113ce:	2b03      	cmp	r3, #3
 80113d0:	d82e      	bhi.n	8011430 <_ZN3USB4TaskEv+0x80>
 80113d2:	a201      	add	r2, pc, #4	; (adr r2, 80113d8 <_ZN3USB4TaskEv+0x28>)
 80113d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d8:	080113f5 	.word	0x080113f5
 80113dc:	080113e9 	.word	0x080113e9
 80113e0:	08011411 	.word	0x08011411
 80113e4:	0801140d 	.word	0x0801140d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80113e8:	4bbf      	ldr	r3, [pc, #764]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80113ea:	2213      	movs	r2, #19
 80113ec:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80113ee:	2300      	movs	r3, #0
 80113f0:	73fb      	strb	r3, [r7, #15]
                        break;
 80113f2:	e01d      	b.n	8011430 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80113f4:	4bbc      	ldr	r3, [pc, #752]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113fc:	2b10      	cmp	r3, #16
 80113fe:	d002      	beq.n	8011406 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8011400:	4bb9      	ldr	r3, [pc, #740]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 8011402:	2211      	movs	r2, #17
 8011404:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8011406:	2300      	movs	r3, #0
 8011408:	73fb      	strb	r3, [r7, #15]
                        break;
 801140a:	e011      	b.n	8011430 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801140c:	2301      	movs	r3, #1
 801140e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011410:	4bb5      	ldr	r3, [pc, #724]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011418:	2b10      	cmp	r3, #16
 801141a:	d108      	bne.n	801142e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801141c:	f7f0 fd1c 	bl	8001e58 <HAL_GetTick>
 8011420:	4603      	mov	r3, r0
 8011422:	33c8      	adds	r3, #200	; 0xc8
 8011424:	4ab1      	ldr	r2, [pc, #708]	; (80116ec <_ZN3USB4TaskEv+0x33c>)
 8011426:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011428:	4baf      	ldr	r3, [pc, #700]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 801142a:	2220      	movs	r2, #32
 801142c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801142e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011430:	2300      	movs	r3, #0
 8011432:	73bb      	strb	r3, [r7, #14]
 8011434:	7bbb      	ldrb	r3, [r7, #14]
 8011436:	2b0f      	cmp	r3, #15
 8011438:	d81b      	bhi.n	8011472 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801143a:	7bba      	ldrb	r2, [r7, #14]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	321e      	adds	r2, #30
 8011440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d010      	beq.n	801146a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8011448:	7bba      	ldrb	r2, [r7, #14]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	321e      	adds	r2, #30
 801144e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011452:	7bba      	ldrb	r2, [r7, #14]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	321e      	adds	r2, #30
 8011458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	330c      	adds	r3, #12
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	4608      	mov	r0, r1
 8011464:	4798      	blx	r3
 8011466:	4603      	mov	r3, r0
 8011468:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801146a:	7bbb      	ldrb	r3, [r7, #14]
 801146c:	3301      	adds	r3, #1
 801146e:	73bb      	strb	r3, [r7, #14]
 8011470:	e7e0      	b.n	8011434 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8011472:	4b9d      	ldr	r3, [pc, #628]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	2ba0      	cmp	r3, #160	; 0xa0
 8011478:	f000 8123 	beq.w	80116c2 <_ZN3USB4TaskEv+0x312>
 801147c:	2ba0      	cmp	r3, #160	; 0xa0
 801147e:	f300 812f 	bgt.w	80116e0 <_ZN3USB4TaskEv+0x330>
 8011482:	2b90      	cmp	r3, #144	; 0x90
 8011484:	f000 811f 	beq.w	80116c6 <_ZN3USB4TaskEv+0x316>
 8011488:	2b90      	cmp	r3, #144	; 0x90
 801148a:	f300 8129 	bgt.w	80116e0 <_ZN3USB4TaskEv+0x330>
 801148e:	2b80      	cmp	r3, #128	; 0x80
 8011490:	f000 80fe 	beq.w	8011690 <_ZN3USB4TaskEv+0x2e0>
 8011494:	2b80      	cmp	r3, #128	; 0x80
 8011496:	f300 8123 	bgt.w	80116e0 <_ZN3USB4TaskEv+0x330>
 801149a:	2b51      	cmp	r3, #81	; 0x51
 801149c:	f000 80ea 	beq.w	8011674 <_ZN3USB4TaskEv+0x2c4>
 80114a0:	2b51      	cmp	r3, #81	; 0x51
 80114a2:	f300 811d 	bgt.w	80116e0 <_ZN3USB4TaskEv+0x330>
 80114a6:	2b40      	cmp	r3, #64	; 0x40
 80114a8:	dc6a      	bgt.n	8011580 <_ZN3USB4TaskEv+0x1d0>
 80114aa:	2b11      	cmp	r3, #17
 80114ac:	f2c0 8118 	blt.w	80116e0 <_ZN3USB4TaskEv+0x330>
 80114b0:	3b11      	subs	r3, #17
 80114b2:	2b2f      	cmp	r3, #47	; 0x2f
 80114b4:	f200 8114 	bhi.w	80116e0 <_ZN3USB4TaskEv+0x330>
 80114b8:	a201      	add	r2, pc, #4	; (adr r2, 80114c0 <_ZN3USB4TaskEv+0x110>)
 80114ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114be:	bf00      	nop
 80114c0:	08011587 	.word	0x08011587
 80114c4:	080116cb 	.word	0x080116cb
 80114c8:	080116cb 	.word	0x080116cb
 80114cc:	080116e1 	.word	0x080116e1
 80114d0:	080116e1 	.word	0x080116e1
 80114d4:	080116e1 	.word	0x080116e1
 80114d8:	080116e1 	.word	0x080116e1
 80114dc:	080116e1 	.word	0x080116e1
 80114e0:	080116e1 	.word	0x080116e1
 80114e4:	080116e1 	.word	0x080116e1
 80114e8:	080116e1 	.word	0x080116e1
 80114ec:	080116e1 	.word	0x080116e1
 80114f0:	080116e1 	.word	0x080116e1
 80114f4:	080116e1 	.word	0x080116e1
 80114f8:	080116e1 	.word	0x080116e1
 80114fc:	080115d7 	.word	0x080115d7
 8011500:	080116e1 	.word	0x080116e1
 8011504:	080116e1 	.word	0x080116e1
 8011508:	080116e1 	.word	0x080116e1
 801150c:	080116e1 	.word	0x080116e1
 8011510:	080116e1 	.word	0x080116e1
 8011514:	080116e1 	.word	0x080116e1
 8011518:	080116e1 	.word	0x080116e1
 801151c:	080116e1 	.word	0x080116e1
 8011520:	080116e1 	.word	0x080116e1
 8011524:	080116e1 	.word	0x080116e1
 8011528:	080116e1 	.word	0x080116e1
 801152c:	080116e1 	.word	0x080116e1
 8011530:	080116e1 	.word	0x080116e1
 8011534:	080116e1 	.word	0x080116e1
 8011538:	080116e1 	.word	0x080116e1
 801153c:	080115f3 	.word	0x080115f3
 8011540:	080116e1 	.word	0x080116e1
 8011544:	080116e1 	.word	0x080116e1
 8011548:	080116e1 	.word	0x080116e1
 801154c:	080116e1 	.word	0x080116e1
 8011550:	080116e1 	.word	0x080116e1
 8011554:	080116e1 	.word	0x080116e1
 8011558:	080116e1 	.word	0x080116e1
 801155c:	080116e1 	.word	0x080116e1
 8011560:	080116e1 	.word	0x080116e1
 8011564:	080116e1 	.word	0x080116e1
 8011568:	080116e1 	.word	0x080116e1
 801156c:	080116e1 	.word	0x080116e1
 8011570:	080116e1 	.word	0x080116e1
 8011574:	080116e1 	.word	0x080116e1
 8011578:	080116e1 	.word	0x080116e1
 801157c:	08011605 	.word	0x08011605
 8011580:	2b50      	cmp	r3, #80	; 0x50
 8011582:	d05f      	beq.n	8011644 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8011584:	e0ac      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        init();
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7ff fa8e 	bl	8010aa8 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801158c:	2300      	movs	r3, #0
 801158e:	737b      	strb	r3, [r7, #13]
 8011590:	7b7b      	ldrb	r3, [r7, #13]
 8011592:	2b0f      	cmp	r3, #15
 8011594:	d81b      	bhi.n	80115ce <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8011596:	7b7a      	ldrb	r2, [r7, #13]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	321e      	adds	r2, #30
 801159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d010      	beq.n	80115c6 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 80115a4:	7b7a      	ldrb	r2, [r7, #13]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	321e      	adds	r2, #30
 80115aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115ae:	7b7a      	ldrb	r2, [r7, #13]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	321e      	adds	r2, #30
 80115b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	3308      	adds	r3, #8
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	4608      	mov	r0, r1
 80115c0:	4798      	blx	r3
 80115c2:	4603      	mov	r3, r0
 80115c4:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80115c6:	7b7b      	ldrb	r3, [r7, #13]
 80115c8:	3301      	adds	r3, #1
 80115ca:	737b      	strb	r3, [r7, #13]
 80115cc:	e7e0      	b.n	8011590 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80115ce:	4b46      	ldr	r3, [pc, #280]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80115d0:	2212      	movs	r2, #18
 80115d2:	701a      	strb	r2, [r3, #0]
                        break;
 80115d4:	e084      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80115d6:	f7f0 fc3f 	bl	8001e58 <HAL_GetTick>
 80115da:	4602      	mov	r2, r0
 80115dc:	4b43      	ldr	r3, [pc, #268]	; (80116ec <_ZN3USB4TaskEv+0x33c>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	43db      	mvns	r3, r3
 80115e4:	0fdb      	lsrs	r3, r3, #31
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d070      	beq.n	80116ce <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80115ec:	4b3e      	ldr	r3, [pc, #248]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80115ee:	2230      	movs	r2, #48	; 0x30
 80115f0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80115f2:	2201      	movs	r2, #1
 80115f4:	21e8      	movs	r1, #232	; 0xe8
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7f0 f90a 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80115fc:	4b3a      	ldr	r3, [pc, #232]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80115fe:	2240      	movs	r2, #64	; 0x40
 8011600:	701a      	strb	r2, [r3, #0]
                        break;
 8011602:	e06d      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8011604:	21e8      	movs	r1, #232	; 0xe8
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7f0 f954 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801160c:	4603      	mov	r3, r0
 801160e:	f003 0301 	and.w	r3, r3, #1
 8011612:	2b00      	cmp	r3, #0
 8011614:	bf0c      	ite	eq
 8011616:	2301      	moveq	r3, #1
 8011618:	2300      	movne	r3, #0
 801161a:	b2db      	uxtb	r3, r3
 801161c:	2b00      	cmp	r3, #0
 801161e:	d058      	beq.n	80116d2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011620:	21d8      	movs	r1, #216	; 0xd8
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7f0 f946 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011628:	4603      	mov	r3, r0
 801162a:	f043 0308 	orr.w	r3, r3, #8
 801162e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8011630:	7b3b      	ldrb	r3, [r7, #12]
 8011632:	461a      	mov	r2, r3
 8011634:	21d8      	movs	r1, #216	; 0xd8
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7f0 f8ea 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801163c:	4b2a      	ldr	r3, [pc, #168]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 801163e:	2250      	movs	r2, #80	; 0x50
 8011640:	701a      	strb	r2, [r3, #0]
                        break;
 8011642:	e046      	b.n	80116d2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8011644:	21c8      	movs	r1, #200	; 0xc8
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7f0 f934 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801164c:	4603      	mov	r3, r0
 801164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011652:	2b00      	cmp	r3, #0
 8011654:	bf14      	ite	ne
 8011656:	2301      	movne	r3, #1
 8011658:	2300      	moveq	r3, #0
 801165a:	b2db      	uxtb	r3, r3
 801165c:	2b00      	cmp	r3, #0
 801165e:	d03a      	beq.n	80116d6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8011660:	4b21      	ldr	r3, [pc, #132]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 8011662:	2251      	movs	r2, #81	; 0x51
 8011664:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8011666:	f7f0 fbf7 	bl	8001e58 <HAL_GetTick>
 801166a:	4603      	mov	r3, r0
 801166c:	3314      	adds	r3, #20
 801166e:	4a1f      	ldr	r2, [pc, #124]	; (80116ec <_ZN3USB4TaskEv+0x33c>)
 8011670:	6013      	str	r3, [r2, #0]
                        break;
 8011672:	e030      	b.n	80116d6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8011674:	f7f0 fbf0 	bl	8001e58 <HAL_GetTick>
 8011678:	4602      	mov	r2, r0
 801167a:	4b1c      	ldr	r3, [pc, #112]	; (80116ec <_ZN3USB4TaskEv+0x33c>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	1ad3      	subs	r3, r2, r3
 8011680:	43db      	mvns	r3, r3
 8011682:	0fdb      	lsrs	r3, r3, #31
 8011684:	b2db      	uxtb	r3, r3
 8011686:	2b00      	cmp	r3, #0
 8011688:	d027      	beq.n	80116da <_ZN3USB4TaskEv+0x32a>
 801168a:	4b17      	ldr	r3, [pc, #92]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 801168c:	2280      	movs	r2, #128	; 0x80
 801168e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8011690:	7bfb      	ldrb	r3, [r7, #15]
 8011692:	2200      	movs	r2, #0
 8011694:	2100      	movs	r1, #0
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 f920 	bl	80118dc <_ZN3USB11ConfiguringEhhb>
 801169c:	4603      	mov	r3, r0
 801169e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 80116a0:	7afb      	ldrb	r3, [r7, #11]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d009      	beq.n	80116ba <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 80116a6:	7afb      	ldrb	r3, [r7, #11]
 80116a8:	2bd2      	cmp	r3, #210	; 0xd2
 80116aa:	d018      	beq.n	80116de <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 80116ac:	4a10      	ldr	r2, [pc, #64]	; (80116f0 <_ZN3USB4TaskEv+0x340>)
 80116ae:	7afb      	ldrb	r3, [r7, #11]
 80116b0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 80116b2:	4b0d      	ldr	r3, [pc, #52]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80116b4:	22a0      	movs	r2, #160	; 0xa0
 80116b6:	701a      	strb	r2, [r3, #0]
                        break;
 80116b8:	e011      	b.n	80116de <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 80116ba:	4b0b      	ldr	r3, [pc, #44]	; (80116e8 <_ZN3USB4TaskEv+0x338>)
 80116bc:	2290      	movs	r2, #144	; 0x90
 80116be:	701a      	strb	r2, [r3, #0]
                        break;
 80116c0:	e00d      	b.n	80116de <_ZN3USB4TaskEv+0x32e>
                        break;
 80116c2:	bf00      	nop
 80116c4:	e00c      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116c6:	bf00      	nop
 80116c8:	e00a      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116ca:	bf00      	nop
 80116cc:	e008      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80116ce:	bf00      	nop
 80116d0:	e006      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116d2:	bf00      	nop
 80116d4:	e004      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116d6:	bf00      	nop
 80116d8:	e002      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80116da:	bf00      	nop
 80116dc:	e000      	b.n	80116e0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116de:	bf00      	nop
}
 80116e0:	bf00      	nop
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	20004f3d 	.word	0x20004f3d
 80116ec:	20004f40 	.word	0x20004f40
 80116f0:	20004f3c 	.word	0x20004f3c

080116f4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	4608      	mov	r0, r1
 80116fe:	4611      	mov	r1, r2
 8011700:	461a      	mov	r2, r3
 8011702:	4603      	mov	r3, r0
 8011704:	70fb      	strb	r3, [r7, #3]
 8011706:	460b      	mov	r3, r1
 8011708:	70bb      	strb	r3, [r7, #2]
 801170a:	4613      	mov	r3, r2
 801170c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801170e:	2300      	movs	r3, #0
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	2300      	movs	r3, #0
 8011714:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2100      	movs	r1, #0
 801171a:	4618      	mov	r0, r3
 801171c:	f000 fbc0 	bl	8011ea0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011720:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011728:	23d6      	movs	r3, #214	; 0xd6
 801172a:	e03a      	b.n	80117a2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d101      	bne.n	8011738 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8011734:	23d7      	movs	r3, #215	; 0xd7
 8011736:	e034      	b.n	80117a2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	787a      	ldrb	r2, [r7, #1]
 801173c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	78bb      	ldrb	r3, [r7, #2]
 8011742:	78f9      	ldrb	r1, [r7, #3]
 8011744:	2200      	movs	r2, #0
 8011746:	f000 fc5f 	bl	8012008 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 801174a:	4603      	mov	r3, r0
 801174c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8011754:	23d4      	movs	r3, #212	; 0xd4
 8011756:	e024      	b.n	80117a2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	7bfa      	ldrb	r2, [r7, #15]
 801175c:	4611      	mov	r1, r2
 801175e:	4618      	mov	r0, r3
 8011760:	f000 fb9e 	bl	8011ea0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011764:	6138      	str	r0, [r7, #16]

        if(!p)
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801176c:	23d6      	movs	r3, #214	; 0xd6
 801176e:	e018      	b.n	80117a2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	787a      	ldrb	r2, [r7, #1]
 8011774:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8011776:	7bfb      	ldrb	r3, [r7, #15]
 8011778:	2200      	movs	r2, #0
 801177a:	2100      	movs	r1, #0
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fae3 	bl	8011d48 <_ZN3USB7setAddrEhhh>
 8011782:	4603      	mov	r3, r0
 8011784:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8011786:	7bbb      	ldrb	r3, [r7, #14]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d009      	beq.n	80117a0 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	7bfa      	ldrb	r2, [r7, #15]
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f000 fcd0 	bl	8012138 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8011798:	2300      	movs	r3, #0
 801179a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 801179c:	7bbb      	ldrb	r3, [r7, #14]
 801179e:	e000      	b.n	80117a2 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 80117a0:	2300      	movs	r3, #0
};
 80117a2:	4618      	mov	r0, r3
 80117a4:	3718      	adds	r7, #24
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 80117aa:	b590      	push	{r4, r7, lr}
 80117ac:	b085      	sub	sp, #20
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	4608      	mov	r0, r1
 80117b4:	4611      	mov	r1, r2
 80117b6:	461a      	mov	r2, r3
 80117b8:	4603      	mov	r3, r0
 80117ba:	70fb      	strb	r3, [r7, #3]
 80117bc:	460b      	mov	r3, r1
 80117be:	70bb      	strb	r3, [r7, #2]
 80117c0:	4613      	mov	r3, r2
 80117c2:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 80117c4:	2300      	movs	r3, #0
 80117c6:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 80117c8:	78fa      	ldrb	r2, [r7, #3]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	321e      	adds	r2, #30
 80117ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80117d2:	78fa      	ldrb	r2, [r7, #3]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	321e      	adds	r2, #30
 80117d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	3304      	adds	r3, #4
 80117e0:	681c      	ldr	r4, [r3, #0]
 80117e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117e6:	787a      	ldrb	r2, [r7, #1]
 80117e8:	78b9      	ldrb	r1, [r7, #2]
 80117ea:	47a0      	blx	r4
 80117ec:	4603      	mov	r3, r0
 80117ee:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 80117f0:	7bbb      	ldrb	r3, [r7, #14]
 80117f2:	2be0      	cmp	r3, #224	; 0xe0
 80117f4:	d11c      	bne.n	8011830 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 80117f6:	78bb      	ldrb	r3, [r7, #2]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d108      	bne.n	801180e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80117fc:	2201      	movs	r2, #1
 80117fe:	21e8      	movs	r1, #232	; 0xe8
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7f0 f805 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8011806:	2066      	movs	r0, #102	; 0x66
 8011808:	f7f0 fb32 	bl	8001e70 <HAL_Delay>
 801180c:	e022      	b.n	8011854 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801180e:	78ba      	ldrb	r2, [r7, #2]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	321e      	adds	r2, #30
 8011814:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011818:	78ba      	ldrb	r2, [r7, #2]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	321e      	adds	r2, #30
 801181e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	3314      	adds	r3, #20
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	787a      	ldrb	r2, [r7, #1]
 801182a:	4611      	mov	r1, r2
 801182c:	4798      	blx	r3
 801182e:	e011      	b.n	8011854 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8011830:	7bbb      	ldrb	r3, [r7, #14]
 8011832:	2b0d      	cmp	r3, #13
 8011834:	d109      	bne.n	801184a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8011836:	7bfb      	ldrb	r3, [r7, #15]
 8011838:	2b02      	cmp	r3, #2
 801183a:	d806      	bhi.n	801184a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801183c:	2064      	movs	r0, #100	; 0x64
 801183e:	f7f0 fb17 	bl	8001e70 <HAL_Delay>
                retries++;
 8011842:	7bfb      	ldrb	r3, [r7, #15]
 8011844:	3301      	adds	r3, #1
 8011846:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011848:	e7be      	b.n	80117c8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 801184a:	7bbb      	ldrb	r3, [r7, #14]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8011850:	7bbb      	ldrb	r3, [r7, #14]
 8011852:	e03f      	b.n	80118d4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8011854:	78fa      	ldrb	r2, [r7, #3]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	321e      	adds	r2, #30
 801185a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801185e:	78fa      	ldrb	r2, [r7, #3]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	321e      	adds	r2, #30
 8011864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	681c      	ldr	r4, [r3, #0]
 801186c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011870:	787a      	ldrb	r2, [r7, #1]
 8011872:	78b9      	ldrb	r1, [r7, #2]
 8011874:	47a0      	blx	r4
 8011876:	4603      	mov	r3, r0
 8011878:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 801187a:	7bbb      	ldrb	r3, [r7, #14]
 801187c:	2b0d      	cmp	r3, #13
 801187e:	d109      	bne.n	8011894 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8011880:	7bfb      	ldrb	r3, [r7, #15]
 8011882:	2b02      	cmp	r3, #2
 8011884:	d806      	bhi.n	8011894 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8011886:	2064      	movs	r0, #100	; 0x64
 8011888:	f7f0 faf2 	bl	8001e70 <HAL_Delay>
                retries++;
 801188c:	7bfb      	ldrb	r3, [r7, #15]
 801188e:	3301      	adds	r3, #1
 8011890:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011892:	e799      	b.n	80117c8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8011894:	7bbb      	ldrb	r3, [r7, #14]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d01b      	beq.n	80118d2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 801189a:	78bb      	ldrb	r3, [r7, #2]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d108      	bne.n	80118b2 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80118a0:	2201      	movs	r2, #1
 80118a2:	21e8      	movs	r1, #232	; 0xe8
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7ef ffb3 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80118aa:	2066      	movs	r0, #102	; 0x66
 80118ac:	f7f0 fae0 	bl	8001e70 <HAL_Delay>
 80118b0:	e00f      	b.n	80118d2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80118b2:	78ba      	ldrb	r2, [r7, #2]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	321e      	adds	r2, #30
 80118b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118bc:	78ba      	ldrb	r2, [r7, #2]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	321e      	adds	r2, #30
 80118c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	3314      	adds	r3, #20
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	787a      	ldrb	r2, [r7, #1]
 80118ce:	4611      	mov	r1, r2
 80118d0:	4798      	blx	r3
                }
        }
        return rcode;
 80118d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd90      	pop	{r4, r7, pc}

080118dc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 80118dc:	b580      	push	{r7, lr}
 80118de:	b090      	sub	sp, #64	; 0x40
 80118e0:	af02      	add	r7, sp, #8
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	4608      	mov	r0, r1
 80118e6:	4611      	mov	r1, r2
 80118e8:	461a      	mov	r2, r3
 80118ea:	4603      	mov	r3, r0
 80118ec:	70fb      	strb	r3, [r7, #3]
 80118ee:	460b      	mov	r3, r1
 80118f0:	70bb      	strb	r3, [r7, #2]
 80118f2:	4613      	mov	r3, r2
 80118f4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 80118fc:	f107 030c 	add.w	r3, r7, #12
 8011900:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8011902:	2300      	movs	r3, #0
 8011904:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8011906:	2300      	movs	r3, #0
 8011908:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 801190e:	2308      	movs	r3, #8
 8011910:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011912:	7abb      	ldrb	r3, [r7, #10]
 8011914:	f36f 0300 	bfc	r3, #0, #1
 8011918:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 801191a:	7abb      	ldrb	r3, [r7, #10]
 801191c:	f36f 0341 	bfc	r3, #1, #1
 8011920:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011922:	7abb      	ldrb	r3, [r7, #10]
 8011924:	220f      	movs	r2, #15
 8011926:	f362 0387 	bfi	r3, r2, #2, #6
 801192a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7fa fd13 	bl	800c358 <_ZN3USB14GetAddressPoolEv>
 8011932:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8011934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	2100      	movs	r1, #0
 801193c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801193e:	4798      	blx	r3
 8011940:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8011942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011944:	2b00      	cmp	r3, #0
 8011946:	d101      	bne.n	801194c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011948:	23d6      	movs	r3, #214	; 0xd6
 801194a:	e15c      	b.n	8011c06 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 801194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8011952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011954:	f107 0208 	add.w	r2, r7, #8
 8011958:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 801195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195c:	787a      	ldrb	r2, [r7, #1]
 801195e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8011960:	f107 030c 	add.w	r3, r7, #12
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	2312      	movs	r3, #18
 8011968:	2200      	movs	r2, #0
 801196a:	2100      	movs	r1, #0
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f000 f94e 	bl	8011c0e <_ZN3USB11getDevDescrEhhtPh>
 8011972:	4603      	mov	r3, r0
 8011974:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801197c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 801197e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011982:	2b00      	cmp	r3, #0
 8011984:	d002      	beq.n	801198c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8011986:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801198a:	e13c      	b.n	8011c06 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 801198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198e:	7a1a      	ldrb	r2, [r3, #8]
 8011990:	7a5b      	ldrb	r3, [r3, #9]
 8011992:	021b      	lsls	r3, r3, #8
 8011994:	4313      	orrs	r3, r2
 8011996:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8011998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199a:	7a9a      	ldrb	r2, [r3, #10]
 801199c:	7adb      	ldrb	r3, [r3, #11]
 801199e:	021b      	lsls	r3, r3, #8
 80119a0:	4313      	orrs	r3, r2
 80119a2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 80119a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a6:	791b      	ldrb	r3, [r3, #4]
 80119a8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 80119aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ac:	795b      	ldrb	r3, [r3, #5]
 80119ae:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80119b0:	2300      	movs	r3, #0
 80119b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119ba:	2b0f      	cmp	r3, #15
 80119bc:	f200 8081 	bhi.w	8011ac2 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 80119c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	321e      	adds	r2, #30
 80119c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d06e      	beq.n	8011aae <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80119d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	321e      	adds	r2, #30
 80119d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	321e      	adds	r2, #30
 80119e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	3310      	adds	r3, #16
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4608      	mov	r0, r1
 80119f0:	4798      	blx	r3
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	bf14      	ite	ne
 80119f8:	2301      	movne	r3, #1
 80119fa:	2300      	moveq	r3, #0
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d157      	bne.n	8011ab2 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8011a02:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	321e      	adds	r2, #30
 8011a0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a0e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	321e      	adds	r2, #30
 8011a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	3320      	adds	r3, #32
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	7fba      	ldrb	r2, [r7, #30]
 8011a22:	4611      	mov	r1, r2
 8011a24:	4798      	blx	r3
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d02b      	beq.n	8011a84 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	321e      	adds	r2, #30
 8011a34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	321e      	adds	r2, #30
 8011a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3318      	adds	r3, #24
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	8c3a      	ldrh	r2, [r7, #32]
 8011a4c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011a4e:	4798      	blx	r3
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d114      	bne.n	8011a80 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8011a56:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	321e      	adds	r2, #30
 8011a5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a62:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	321e      	adds	r2, #30
 8011a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	331c      	adds	r3, #28
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	7ffa      	ldrb	r2, [r7, #31]
 8011a76:	4611      	mov	r1, r2
 8011a78:	4798      	blx	r3
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d001      	beq.n	8011a84 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a80:	2301      	movs	r3, #1
 8011a82:	e000      	b.n	8011a86 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8011a84:	2300      	movs	r3, #0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d014      	beq.n	8011ab4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011a8a:	78b8      	ldrb	r0, [r7, #2]
 8011a8c:	78fa      	ldrb	r2, [r7, #3]
 8011a8e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011a92:	787b      	ldrb	r3, [r7, #1]
 8011a94:	9300      	str	r3, [sp, #0]
 8011a96:	4603      	mov	r3, r0
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7ff fe86 	bl	80117aa <_ZN3USB13AttemptConfigEhhhb>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011aa4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011aa8:	2bd1      	cmp	r3, #209	; 0xd1
 8011aaa:	d109      	bne.n	8011ac0 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8011aac:	e002      	b.n	8011ab4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011aae:	bf00      	nop
 8011ab0:	e000      	b.n	8011ab4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011ab2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab8:	3301      	adds	r3, #1
 8011aba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011abe:	e77a      	b.n	80119b6 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011ac0:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ac6:	2b0f      	cmp	r3, #15
 8011ac8:	d802      	bhi.n	8011ad0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8011aca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ace:	e09a      	b.n	8011c06 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ada:	2b0f      	cmp	r3, #15
 8011adc:	f200 8088 	bhi.w	8011bf0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011ae0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	321e      	adds	r2, #30
 8011ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d074      	beq.n	8011bda <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011af0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	321e      	adds	r2, #30
 8011af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011afc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	321e      	adds	r2, #30
 8011b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3310      	adds	r3, #16
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	4608      	mov	r0, r1
 8011b10:	4798      	blx	r3
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	bf14      	ite	ne
 8011b18:	2301      	movne	r3, #1
 8011b1a:	2300      	moveq	r3, #0
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d15d      	bne.n	8011bde <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011b22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	321e      	adds	r2, #30
 8011b2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	321e      	adds	r2, #30
 8011b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	3320      	adds	r3, #32
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	7fba      	ldrb	r2, [r7, #30]
 8011b42:	4611      	mov	r1, r2
 8011b44:	4798      	blx	r3
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d02b      	beq.n	8011ba4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011b4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	321e      	adds	r2, #30
 8011b54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	321e      	adds	r2, #30
 8011b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	3318      	adds	r3, #24
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	8c3a      	ldrh	r2, [r7, #32]
 8011b6c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011b6e:	4798      	blx	r3
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d114      	bne.n	8011ba0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8011b76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	321e      	adds	r2, #30
 8011b7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b82:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	321e      	adds	r2, #30
 8011b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	331c      	adds	r3, #28
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	7ffa      	ldrb	r2, [r7, #31]
 8011b96:	4611      	mov	r1, r2
 8011b98:	4798      	blx	r3
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d001      	beq.n	8011ba4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	e000      	b.n	8011ba6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d11b      	bne.n	8011be2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011baa:	78b8      	ldrb	r0, [r7, #2]
 8011bac:	78fa      	ldrb	r2, [r7, #3]
 8011bae:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011bb2:	787b      	ldrb	r3, [r7, #1]
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff fdf6 	bl	80117aa <_ZN3USB13AttemptConfigEhhhb>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011bc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bc8:	2bd1      	cmp	r3, #209	; 0xd1
 8011bca:	d00b      	beq.n	8011be4 <_ZN3USB11ConfiguringEhhb+0x308>
 8011bcc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bd0:	2bd9      	cmp	r3, #217	; 0xd9
 8011bd2:	d007      	beq.n	8011be4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011bd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bd8:	e015      	b.n	8011c06 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8011bda:	bf00      	nop
 8011bdc:	e002      	b.n	8011be4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011bde:	bf00      	nop
 8011be0:	e000      	b.n	8011be4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011be2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011be4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011be8:	3301      	adds	r3, #1
 8011bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bee:	e772      	b.n	8011ad6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011bf0:	787b      	ldrb	r3, [r7, #1]
 8011bf2:	78ba      	ldrb	r2, [r7, #2]
 8011bf4:	78f9      	ldrb	r1, [r7, #3]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7ff fd7c 	bl	80116f4 <_ZN3USB17DefaultAddressingEhhb>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011c02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3738      	adds	r7, #56	; 0x38
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}

08011c0e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b08a      	sub	sp, #40	; 0x28
 8011c12:	af08      	add	r7, sp, #32
 8011c14:	6078      	str	r0, [r7, #4]
 8011c16:	4608      	mov	r0, r1
 8011c18:	4611      	mov	r1, r2
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	70fb      	strb	r3, [r7, #3]
 8011c20:	460b      	mov	r3, r1
 8011c22:	70bb      	strb	r3, [r7, #2]
 8011c24:	4613      	mov	r3, r2
 8011c26:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c28:	78ba      	ldrb	r2, [r7, #2]
 8011c2a:	78f9      	ldrb	r1, [r7, #3]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	9307      	str	r3, [sp, #28]
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	9306      	str	r3, [sp, #24]
 8011c34:	883b      	ldrh	r3, [r7, #0]
 8011c36:	9305      	str	r3, [sp, #20]
 8011c38:	883b      	ldrh	r3, [r7, #0]
 8011c3a:	9304      	str	r3, [sp, #16]
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9303      	str	r3, [sp, #12]
 8011c40:	2301      	movs	r3, #1
 8011c42:	9302      	str	r3, [sp, #8]
 8011c44:	2300      	movs	r3, #0
 8011c46:	9301      	str	r3, [sp, #4]
 8011c48:	2306      	movs	r3, #6
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	2380      	movs	r3, #128	; 0x80
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7fe fffd 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011c54:	4603      	mov	r3, r0
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b08a      	sub	sp, #40	; 0x28
 8011c62:	af08      	add	r7, sp, #32
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	4608      	mov	r0, r1
 8011c68:	4611      	mov	r1, r2
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	70fb      	strb	r3, [r7, #3]
 8011c70:	460b      	mov	r3, r1
 8011c72:	70bb      	strb	r3, [r7, #2]
 8011c74:	4613      	mov	r3, r2
 8011c76:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c78:	78ba      	ldrb	r2, [r7, #2]
 8011c7a:	78f9      	ldrb	r1, [r7, #3]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9307      	str	r3, [sp, #28]
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	9306      	str	r3, [sp, #24]
 8011c84:	883b      	ldrh	r3, [r7, #0]
 8011c86:	9305      	str	r3, [sp, #20]
 8011c88:	883b      	ldrh	r3, [r7, #0]
 8011c8a:	9304      	str	r3, [sp, #16]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	9303      	str	r3, [sp, #12]
 8011c90:	2302      	movs	r3, #2
 8011c92:	9302      	str	r3, [sp, #8]
 8011c94:	7c3b      	ldrb	r3, [r7, #16]
 8011c96:	9301      	str	r3, [sp, #4]
 8011c98:	2306      	movs	r3, #6
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	2380      	movs	r3, #128	; 0x80
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f7fe ffd5 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011ca4:	4603      	mov	r3, r0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b09e      	sub	sp, #120	; 0x78
 8011cb2:	af08      	add	r7, sp, #32
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	4611      	mov	r1, r2
 8011cba:	461a      	mov	r2, r3
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	70fb      	strb	r3, [r7, #3]
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	70bb      	strb	r3, [r7, #2]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011cc8:	2340      	movs	r3, #64	; 0x40
 8011cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011cce:	f107 030c 	add.w	r3, r7, #12
 8011cd2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011cd4:	78ba      	ldrb	r2, [r7, #2]
 8011cd6:	78f9      	ldrb	r1, [r7, #3]
 8011cd8:	f107 030c 	add.w	r3, r7, #12
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	787b      	ldrb	r3, [r7, #1]
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	2309      	movs	r3, #9
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff ffba 	bl	8011c5e <_ZN3USB12getConfDescrEhhthPh>
 8011cea:	4603      	mov	r3, r0
 8011cec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011cf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d002      	beq.n	8011cfe <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011cf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011cfc:	e020      	b.n	8011d40 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d00:	789a      	ldrb	r2, [r3, #2]
 8011d02:	78db      	ldrb	r3, [r3, #3]
 8011d04:	021b      	lsls	r3, r3, #8
 8011d06:	4313      	orrs	r3, r2
 8011d08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011d0c:	78ba      	ldrb	r2, [r7, #2]
 8011d0e:	78f9      	ldrb	r1, [r7, #3]
 8011d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d12:	9307      	str	r3, [sp, #28]
 8011d14:	f107 030c 	add.w	r3, r7, #12
 8011d18:	9306      	str	r3, [sp, #24]
 8011d1a:	2340      	movs	r3, #64	; 0x40
 8011d1c:	9305      	str	r3, [sp, #20]
 8011d1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011d22:	9304      	str	r3, [sp, #16]
 8011d24:	2300      	movs	r3, #0
 8011d26:	9303      	str	r3, [sp, #12]
 8011d28:	2302      	movs	r3, #2
 8011d2a:	9302      	str	r3, [sp, #8]
 8011d2c:	787b      	ldrb	r3, [r7, #1]
 8011d2e:	9301      	str	r3, [sp, #4]
 8011d30:	2306      	movs	r3, #6
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	2380      	movs	r3, #128	; 0x80
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7fe ff89 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	bf00      	nop
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3758      	adds	r7, #88	; 0x58
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b08c      	sub	sp, #48	; 0x30
 8011d4c:	af08      	add	r7, sp, #32
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	4608      	mov	r0, r1
 8011d52:	4611      	mov	r1, r2
 8011d54:	461a      	mov	r2, r3
 8011d56:	4603      	mov	r3, r0
 8011d58:	70fb      	strb	r3, [r7, #3]
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	70bb      	strb	r3, [r7, #2]
 8011d5e:	4613      	mov	r3, r2
 8011d60:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011d62:	78ba      	ldrb	r2, [r7, #2]
 8011d64:	78f9      	ldrb	r1, [r7, #3]
 8011d66:	2300      	movs	r3, #0
 8011d68:	9307      	str	r3, [sp, #28]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	9306      	str	r3, [sp, #24]
 8011d6e:	2300      	movs	r3, #0
 8011d70:	9305      	str	r3, [sp, #20]
 8011d72:	2300      	movs	r3, #0
 8011d74:	9304      	str	r3, [sp, #16]
 8011d76:	2300      	movs	r3, #0
 8011d78:	9303      	str	r3, [sp, #12]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	9302      	str	r3, [sp, #8]
 8011d7e:	787b      	ldrb	r3, [r7, #1]
 8011d80:	9301      	str	r3, [sp, #4]
 8011d82:	2305      	movs	r3, #5
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	2300      	movs	r3, #0
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f7fe ff60 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011d92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011d96:	f7f0 f86b 	bl	8001e70 <HAL_Delay>
        return rcode;
 8011d9a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b08a      	sub	sp, #40	; 0x28
 8011da8:	af08      	add	r7, sp, #32
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	4608      	mov	r0, r1
 8011dae:	4611      	mov	r1, r2
 8011db0:	461a      	mov	r2, r3
 8011db2:	4603      	mov	r3, r0
 8011db4:	70fb      	strb	r3, [r7, #3]
 8011db6:	460b      	mov	r3, r1
 8011db8:	70bb      	strb	r3, [r7, #2]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011dbe:	78ba      	ldrb	r2, [r7, #2]
 8011dc0:	78f9      	ldrb	r1, [r7, #3]
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	9307      	str	r3, [sp, #28]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	9306      	str	r3, [sp, #24]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	9305      	str	r3, [sp, #20]
 8011dce:	2300      	movs	r3, #0
 8011dd0:	9304      	str	r3, [sp, #16]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	9303      	str	r3, [sp, #12]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	9302      	str	r3, [sp, #8]
 8011dda:	787b      	ldrb	r3, [r7, #1]
 8011ddc:	9301      	str	r3, [sp, #4]
 8011dde:	2309      	movs	r3, #9
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	2300      	movs	r3, #0
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7fe ff32 	bl	8010c4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dea:	4603      	mov	r3, r0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
};
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr
	...

08011e0c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011e0c:	b480      	push	{r7}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	4a04      	ldr	r2, [pc, #16]	; (8011e28 <_ZN11AddressPoolC1Ev+0x1c>)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr
 8011e28:	0801291c 	.word	0x0801291c

08011e2c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff ffe8 	bl	8011e0c <_ZN11AddressPoolC1Ev>
 8011e3c:	4a17      	ldr	r2, [pc, #92]	; (8011e9c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	601a      	str	r2, [r3, #0]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011e48:	2100      	movs	r1, #0
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 f990 	bl	8012170 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	1d1a      	adds	r2, r3, #4
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2200      	movs	r2, #0
 8011e62:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2208      	movs	r2, #8
 8011e68:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	7993      	ldrb	r3, [r2, #6]
 8011e6e:	f36f 0300 	bfc	r3, #0, #1
 8011e72:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	7993      	ldrb	r3, [r2, #6]
 8011e78:	f36f 0341 	bfc	r3, #1, #1
 8011e7c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	7993      	ldrb	r3, [r2, #6]
 8011e82:	210f      	movs	r1, #15
 8011e84:	f361 0387 	bfi	r3, r1, #2, #6
 8011e88:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 f9a1 	bl	80121d2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	4618      	mov	r0, r3
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	08012908 	.word	0x08012908

08011ea0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011eac:	78fb      	ldrb	r3, [r7, #3]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d102      	bne.n	8011eb8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	e014      	b.n	8011ee2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011eb8:	78fb      	ldrb	r3, [r7, #3]
 8011eba:	4619      	mov	r1, r3
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 f9a1 	bl	8012204 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011ec6:	7bfb      	ldrb	r3, [r7, #15]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d008      	beq.n	8011ede <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f103 0108 	add.w	r1, r3, #8
 8011ed2:	7bfa      	ldrb	r2, [r7, #15]
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	00db      	lsls	r3, r3, #3
 8011ed8:	1a9b      	subs	r3, r3, r2
 8011eda:	440b      	add	r3, r1
 8011edc:	e000      	b.n	8011ee0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	bf00      	nop
        };
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
	...

08011eec <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	607b      	str	r3, [r7, #4]
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	72fb      	strb	r3, [r7, #11]
 8011efa:	4613      	mov	r3, r2
 8011efc:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011efe:	f7ee fd01 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8011f02:	7afb      	ldrb	r3, [r7, #11]
 8011f04:	f043 0302 	orr.w	r3, r3, #2
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8011f0c:	f107 0117 	add.w	r1, r7, #23
 8011f10:	f04f 33ff 	mov.w	r3, #4294967295
 8011f14:	2201      	movs	r2, #1
 8011f16:	480b      	ldr	r0, [pc, #44]	; (8011f44 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f18:	f7f2 fd7b 	bl	8004a12 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f1c:	7abb      	ldrb	r3, [r7, #10]
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	f04f 33ff 	mov.w	r3, #4294967295
 8011f24:	6879      	ldr	r1, [r7, #4]
 8011f26:	4807      	ldr	r0, [pc, #28]	; (8011f44 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f28:	f7f2 fd73 	bl	8004a12 <HAL_SPI_Transmit>
        data_p += nbytes;
 8011f2c:	7abb      	ldrb	r3, [r7, #10]
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	4413      	add	r3, r2
 8011f32:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011f34:	f7ee fcda 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 8011f38:	687b      	ldr	r3, [r7, #4]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20000298 	.word	0x20000298

08011f48 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011f48:	b480      	push	{r7}
 8011f4a:	b083      	sub	sp, #12
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	4603      	mov	r3, r0
 8011f50:	6039      	str	r1, [r7, #0]
 8011f52:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	607b      	str	r3, [r7, #4]
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	72fb      	strb	r3, [r7, #11]
 8011f6e:	4613      	mov	r3, r2
 8011f70:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011f72:	f7ee fcc7 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8011f76:	f107 010b 	add.w	r1, r7, #11
 8011f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7e:	2201      	movs	r2, #1
 8011f80:	480d      	ldr	r0, [pc, #52]	; (8011fb8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011f82:	f7f2 fd46 	bl	8004a12 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8011f86:	7abb      	ldrb	r3, [r7, #10]
 8011f88:	461a      	mov	r2, r3
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 fa91 	bl	80124b4 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f92:	7abb      	ldrb	r3, [r7, #10]
 8011f94:	b29a      	uxth	r2, r3
 8011f96:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9a:	6879      	ldr	r1, [r7, #4]
 8011f9c:	4806      	ldr	r0, [pc, #24]	; (8011fb8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011f9e:	f7f2 fe74 	bl	8004c8a <HAL_SPI_Receive>
        data_p += nbytes;
 8011fa2:	7abb      	ldrb	r3, [r7, #10]
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011faa:	f7ee fc9f 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 8011fae:	687b      	ldr	r3, [r7, #4]
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	20000298 	.word	0x20000298

08011fbc <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8011fc8:	f7fe fd46 	bl	8010a58 <_ZN2P95IsSetEv>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8011fd0:	7bbb      	ldrb	r3, [r7, #14]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d104      	bne.n	8011fe0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 f937 	bl	801224a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8011fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3710      	adds	r7, #16
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
	...

08011fec <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
                return vbusState;
 8011ff4:	4b03      	ldr	r3, [pc, #12]	; (8012004 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
        };
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	20000614 	.word	0x20000614

08012008 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	4608      	mov	r0, r1
 8012012:	4611      	mov	r1, r2
 8012014:	461a      	mov	r2, r3
 8012016:	4603      	mov	r3, r0
 8012018:	70fb      	strb	r3, [r7, #3]
 801201a:	460b      	mov	r3, r1
 801201c:	70bb      	strb	r3, [r7, #2]
 801201e:	4613      	mov	r3, r2
 8012020:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8012022:	78fb      	ldrb	r3, [r7, #3]
 8012024:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8012026:	7b3b      	ldrb	r3, [r7, #12]
 8012028:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8012032:	787b      	ldrb	r3, [r7, #1]
 8012034:	2b07      	cmp	r3, #7
 8012036:	d901      	bls.n	801203c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8012038:	2300      	movs	r3, #0
 801203a:	e079      	b.n	8012130 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801203c:	78bb      	ldrb	r3, [r7, #2]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d005      	beq.n	801204e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	79db      	ldrb	r3, [r3, #7]
 8012046:	2b07      	cmp	r3, #7
 8012048:	d101      	bne.n	801204e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801204a:	2300      	movs	r3, #0
 801204c:	e070      	b.n	8012130 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801204e:	2100      	movs	r1, #0
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 f8d7 	bl	8012204 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8012056:	4603      	mov	r3, r0
 8012058:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801205a:	7bfb      	ldrb	r3, [r7, #15]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d101      	bne.n	8012064 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8012060:	2300      	movs	r3, #0
 8012062:	e065      	b.n	8012130 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8012064:	7b3b      	ldrb	r3, [r7, #12]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d124      	bne.n	80120b4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801206a:	78bb      	ldrb	r3, [r7, #2]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00f      	beq.n	8012090 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8012070:	7bfa      	ldrb	r2, [r7, #15]
 8012072:	6879      	ldr	r1, [r7, #4]
 8012074:	4613      	mov	r3, r2
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	1a9b      	subs	r3, r3, r2
 801207a:	440b      	add	r3, r1
 801207c:	330c      	adds	r3, #12
 801207e:	2241      	movs	r2, #65	; 0x41
 8012080:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	79db      	ldrb	r3, [r3, #7]
 8012086:	3301      	adds	r3, #1
 8012088:	b2da      	uxtb	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	71da      	strb	r2, [r3, #7]
 801208e:	e008      	b.n	80120a2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8012090:	7bfa      	ldrb	r2, [r7, #15]
 8012092:	6879      	ldr	r1, [r7, #4]
 8012094:	4613      	mov	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	1a9b      	subs	r3, r3, r2
 801209a:	440b      	add	r3, r1
 801209c:	330c      	adds	r3, #12
 801209e:	2201      	movs	r2, #1
 80120a0:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 80120a2:	7bfa      	ldrb	r2, [r7, #15]
 80120a4:	6879      	ldr	r1, [r7, #4]
 80120a6:	4613      	mov	r3, r2
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	440b      	add	r3, r1
 80120ae:	330c      	adds	r3, #12
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	e03d      	b.n	8012130 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 80120b4:	2300      	movs	r3, #0
 80120b6:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 80120b8:	7b3b      	ldrb	r3, [r7, #12]
 80120ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	7a3b      	ldrb	r3, [r7, #8]
 80120c2:	f362 03c5 	bfi	r3, r2, #3, #3
 80120c6:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 80120c8:	78bb      	ldrb	r3, [r7, #2]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d013      	beq.n	80120f6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 80120ce:	7a3b      	ldrb	r3, [r7, #8]
 80120d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120d4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	79db      	ldrb	r3, [r3, #7]
 80120da:	3301      	adds	r3, #1
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	71da      	strb	r2, [r3, #7]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	79db      	ldrb	r3, [r3, #7]
 80120e6:	f003 0307 	and.w	r3, r3, #7
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	7a3b      	ldrb	r3, [r7, #8]
 80120ee:	f362 0302 	bfi	r3, r2, #0, #3
 80120f2:	723b      	strb	r3, [r7, #8]
 80120f4:	e00b      	b.n	801210e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80120f6:	7a3b      	ldrb	r3, [r7, #8]
 80120f8:	f36f 1386 	bfc	r3, #6, #1
 80120fc:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80120fe:	787b      	ldrb	r3, [r7, #1]
 8012100:	f003 0307 	and.w	r3, r3, #7
 8012104:	b2da      	uxtb	r2, r3
 8012106:	7a3b      	ldrb	r3, [r7, #8]
 8012108:	f362 0302 	bfi	r3, r2, #0, #3
 801210c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801210e:	7bfa      	ldrb	r2, [r7, #15]
 8012110:	6879      	ldr	r1, [r7, #4]
 8012112:	4613      	mov	r3, r2
 8012114:	00db      	lsls	r3, r3, #3
 8012116:	1a9b      	subs	r3, r3, r2
 8012118:	440b      	add	r3, r1
 801211a:	330c      	adds	r3, #12
 801211c:	7a3a      	ldrb	r2, [r7, #8]
 801211e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8012120:	7bfa      	ldrb	r2, [r7, #15]
 8012122:	6879      	ldr	r1, [r7, #4]
 8012124:	4613      	mov	r3, r2
 8012126:	00db      	lsls	r3, r3, #3
 8012128:	1a9b      	subs	r3, r3, r2
 801212a:	440b      	add	r3, r1
 801212c:	330c      	adds	r3, #12
 801212e:	781b      	ldrb	r3, [r3, #0]
        };
 8012130:	4618      	mov	r0, r3
 8012132:	3710      	adds	r7, #16
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	460b      	mov	r3, r1
 8012142:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8012144:	78fb      	ldrb	r3, [r7, #3]
 8012146:	2b41      	cmp	r3, #65	; 0x41
 8012148:	d103      	bne.n	8012152 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f841 	bl	80121d2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8012150:	e00b      	b.n	801216a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8012152:	78fb      	ldrb	r3, [r7, #3]
 8012154:	4619      	mov	r1, r3
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 f854 	bl	8012204 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801215c:	4603      	mov	r3, r0
 801215e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8012160:	7bfb      	ldrb	r3, [r7, #15]
 8012162:	4619      	mov	r1, r3
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f000 f893 	bl	8012290 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	460b      	mov	r3, r1
 801217a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801217c:	78fa      	ldrb	r2, [r7, #3]
 801217e:	6879      	ldr	r1, [r7, #4]
 8012180:	4613      	mov	r3, r2
 8012182:	00db      	lsls	r3, r3, #3
 8012184:	1a9b      	subs	r3, r3, r2
 8012186:	440b      	add	r3, r1
 8012188:	330c      	adds	r3, #12
 801218a:	2200      	movs	r2, #0
 801218c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801218e:	78fa      	ldrb	r2, [r7, #3]
 8012190:	6879      	ldr	r1, [r7, #4]
 8012192:	4613      	mov	r3, r2
 8012194:	00db      	lsls	r3, r3, #3
 8012196:	1a9b      	subs	r3, r3, r2
 8012198:	440b      	add	r3, r1
 801219a:	330d      	adds	r3, #13
 801219c:	2201      	movs	r2, #1
 801219e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 80121a0:	78fa      	ldrb	r2, [r7, #3]
 80121a2:	6879      	ldr	r1, [r7, #4]
 80121a4:	4613      	mov	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	1a9b      	subs	r3, r3, r2
 80121aa:	440b      	add	r3, r1
 80121ac:	330e      	adds	r3, #14
 80121ae:	2200      	movs	r2, #0
 80121b0:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 80121b2:	78fa      	ldrb	r2, [r7, #3]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	1d19      	adds	r1, r3, #4
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	4613      	mov	r3, r2
 80121bc:	00db      	lsls	r3, r3, #3
 80121be:	1a9b      	subs	r3, r3, r2
 80121c0:	4403      	add	r3, r0
 80121c2:	3308      	adds	r3, #8
 80121c4:	6019      	str	r1, [r3, #0]
        };
 80121c6:	bf00      	nop
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr

080121d2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b084      	sub	sp, #16
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80121da:	2301      	movs	r3, #1
 80121dc:	73fb      	strb	r3, [r7, #15]
 80121de:	7bfb      	ldrb	r3, [r7, #15]
 80121e0:	2b0f      	cmp	r3, #15
 80121e2:	d808      	bhi.n	80121f6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	4619      	mov	r1, r3
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7ff ffc1 	bl	8012170 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80121ee:	7bfb      	ldrb	r3, [r7, #15]
 80121f0:	3301      	adds	r3, #1
 80121f2:	73fb      	strb	r3, [r7, #15]
 80121f4:	e7f3      	b.n	80121de <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	71da      	strb	r2, [r3, #7]
        };
 80121fc:	bf00      	nop
 80121fe:	3710      	adds	r7, #16
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	460b      	mov	r3, r1
 801220e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012210:	2301      	movs	r3, #1
 8012212:	73fb      	strb	r3, [r7, #15]
 8012214:	7bfb      	ldrb	r3, [r7, #15]
 8012216:	2b0f      	cmp	r3, #15
 8012218:	d810      	bhi.n	801223c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801221a:	7bfa      	ldrb	r2, [r7, #15]
 801221c:	6879      	ldr	r1, [r7, #4]
 801221e:	4613      	mov	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	1a9b      	subs	r3, r3, r2
 8012224:	440b      	add	r3, r1
 8012226:	330c      	adds	r3, #12
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	78fa      	ldrb	r2, [r7, #3]
 801222c:	429a      	cmp	r2, r3
 801222e:	d101      	bne.n	8012234 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8012230:	7bfb      	ldrb	r3, [r7, #15]
 8012232:	e004      	b.n	801223e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012234:	7bfb      	ldrb	r3, [r7, #15]
 8012236:	3301      	adds	r3, #1
 8012238:	73fb      	strb	r3, [r7, #15]
 801223a:	e7eb      	b.n	8012214 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801223c:	2300      	movs	r3, #0
        };
 801223e:	4618      	mov	r0, r3
 8012240:	3714      	adds	r7, #20
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr

0801224a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801224a:	b580      	push	{r7, lr}
 801224c:	b084      	sub	sp, #16
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8012252:	2300      	movs	r3, #0
 8012254:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8012256:	21c8      	movs	r1, #200	; 0xc8
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ef fb2b 	bl	80018b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801225e:	4603      	mov	r3, r0
 8012260:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8012262:	7bbb      	ldrb	r3, [r7, #14]
 8012264:	f003 0320 	and.w	r3, r3, #32
 8012268:	2b00      	cmp	r3, #0
 801226a:	d006      	beq.n	801227a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ef fb43 	bl	80018f8 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8012272:	7bfb      	ldrb	r3, [r7, #15]
 8012274:	f043 0320 	orr.w	r3, r3, #32
 8012278:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801227a:	7bfb      	ldrb	r3, [r7, #15]
 801227c:	461a      	mov	r2, r3
 801227e:	21c8      	movs	r1, #200	; 0xc8
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7ef fac5 	bl	8001810 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8012286:	7bfb      	ldrb	r3, [r7, #15]
}
 8012288:	4618      	mov	r0, r3
 801228a:	3710      	adds	r7, #16
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801229c:	78fb      	ldrb	r3, [r7, #3]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d03a      	beq.n	8012318 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 80122a2:	78fa      	ldrb	r2, [r7, #3]
 80122a4:	6879      	ldr	r1, [r7, #4]
 80122a6:	4613      	mov	r3, r2
 80122a8:	00db      	lsls	r3, r3, #3
 80122aa:	1a9b      	subs	r3, r3, r2
 80122ac:	440b      	add	r3, r1
 80122ae:	330c      	adds	r3, #12
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 80122b4:	7b3b      	ldrb	r3, [r7, #12]
 80122b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d025      	beq.n	801230c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80122c0:	2301      	movs	r3, #1
 80122c2:	73fb      	strb	r3, [r7, #15]
 80122c4:	7bfb      	ldrb	r3, [r7, #15]
 80122c6:	461a      	mov	r2, r3
 80122c8:	7b39      	ldrb	r1, [r7, #12]
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 f828 	bl	8012320 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80122d0:	4603      	mov	r3, r0
 80122d2:	73fb      	strb	r3, [r7, #15]
 80122d4:	7bfb      	ldrb	r3, [r7, #15]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	bf14      	ite	ne
 80122da:	2301      	movne	r3, #1
 80122dc:	2300      	moveq	r3, #0
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d005      	beq.n	80122f0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	4619      	mov	r1, r3
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff ffd1 	bl	8012290 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80122ee:	e7e9      	b.n	80122c4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	79db      	ldrb	r3, [r3, #7]
 80122f4:	7b3a      	ldrb	r2, [r7, #12]
 80122f6:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80122fa:	b2d2      	uxtb	r2, r2
 80122fc:	4293      	cmp	r3, r2
 80122fe:	d105      	bne.n	801230c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	79db      	ldrb	r3, [r3, #7]
 8012304:	3b01      	subs	r3, #1
 8012306:	b2da      	uxtb	r2, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801230c:	78fb      	ldrb	r3, [r7, #3]
 801230e:	4619      	mov	r1, r3
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f7ff ff2d 	bl	8012170 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012316:	e000      	b.n	801231a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012318:	bf00      	nop
        }
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	7039      	strb	r1, [r7, #0]
 801232a:	4613      	mov	r3, r2
 801232c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801232e:	78fb      	ldrb	r3, [r7, #3]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d004      	beq.n	801233e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8012334:	78fb      	ldrb	r3, [r7, #3]
 8012336:	2b0f      	cmp	r3, #15
 8012338:	d801      	bhi.n	801233e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801233a:	78fb      	ldrb	r3, [r7, #3]
 801233c:	e000      	b.n	8012340 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801233e:	2301      	movs	r3, #1
 8012340:	73fb      	strb	r3, [r7, #15]
 8012342:	7bfb      	ldrb	r3, [r7, #15]
 8012344:	2b0f      	cmp	r3, #15
 8012346:	d816      	bhi.n	8012376 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8012348:	7bfa      	ldrb	r2, [r7, #15]
 801234a:	6879      	ldr	r1, [r7, #4]
 801234c:	4613      	mov	r3, r2
 801234e:	00db      	lsls	r3, r3, #3
 8012350:	1a9b      	subs	r3, r3, r2
 8012352:	440b      	add	r3, r1
 8012354:	3308      	adds	r3, #8
 8012356:	791b      	ldrb	r3, [r3, #4]
 8012358:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801235c:	b2da      	uxtb	r2, r3
 801235e:	783b      	ldrb	r3, [r7, #0]
 8012360:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012364:	b2db      	uxtb	r3, r3
 8012366:	429a      	cmp	r2, r3
 8012368:	d101      	bne.n	801236e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801236a:	7bfb      	ldrb	r3, [r7, #15]
 801236c:	e004      	b.n	8012378 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801236e:	7bfb      	ldrb	r3, [r7, #15]
 8012370:	3301      	adds	r3, #1
 8012372:	73fb      	strb	r3, [r7, #15]
 8012374:	e7e5      	b.n	8012342 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8012376:	2300      	movs	r3, #0
        };
 8012378:	4618      	mov	r0, r3
 801237a:	3714      	adds	r7, #20
 801237c:	46bd      	mov	sp, r7
 801237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012382:	4770      	bx	lr

08012384 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d101      	bne.n	801239c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8012398:	2300      	movs	r3, #0
 801239a:	e031      	b.n	8012400 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	791b      	ldrb	r3, [r3, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d022      	beq.n	80123ea <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	881b      	ldrh	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d01e      	beq.n	80123ea <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	68f9      	ldr	r1, [r7, #12]
 80123b6:	7949      	ldrb	r1, [r1, #5]
 80123b8:	4608      	mov	r0, r1
 80123ba:	68f9      	ldr	r1, [r7, #12]
 80123bc:	7909      	ldrb	r1, [r1, #4]
 80123be:	1a41      	subs	r1, r0, r1
 80123c0:	440b      	add	r3, r1
 80123c2:	7812      	ldrb	r2, [r2, #0]
 80123c4:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	791b      	ldrb	r3, [r3, #4]
 80123ca:	3b01      	subs	r3, #1
 80123cc:	b2da      	uxtb	r2, r3
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	711a      	strb	r2, [r3, #4]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	881b      	ldrh	r3, [r3, #0]
 80123d6:	3b01      	subs	r3, #1
 80123d8:	b29a      	uxth	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	801a      	strh	r2, [r3, #0]
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	1c5a      	adds	r2, r3, #1
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	601a      	str	r2, [r3, #0]
 80123e8:	e7d8      	b.n	801239c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	791b      	ldrb	r3, [r3, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d001      	beq.n	80123f6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80123f2:	2300      	movs	r3, #0
 80123f4:	e004      	b.n	8012400 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	795a      	ldrb	r2, [r3, #5]
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	711a      	strb	r2, [r3, #4]
        return true;
 80123fe:	2301      	movs	r3, #1
}
 8012400:	4618      	mov	r0, r3
 8012402:	3714      	adds	r7, #20
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <__cxa_pure_virtual>:
 801240c:	b508      	push	{r3, lr}
 801240e:	f000 f80d 	bl	801242c <_ZSt9terminatev>

08012412 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012412:	b508      	push	{r3, lr}
 8012414:	4780      	blx	r0
 8012416:	f000 f80e 	bl	8012436 <abort>
	...

0801241c <_ZSt13get_terminatev>:
 801241c:	4b02      	ldr	r3, [pc, #8]	; (8012428 <_ZSt13get_terminatev+0xc>)
 801241e:	6818      	ldr	r0, [r3, #0]
 8012420:	f3bf 8f5b 	dmb	ish
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	20000100 	.word	0x20000100

0801242c <_ZSt9terminatev>:
 801242c:	b508      	push	{r3, lr}
 801242e:	f7ff fff5 	bl	801241c <_ZSt13get_terminatev>
 8012432:	f7ff ffee 	bl	8012412 <_ZN10__cxxabiv111__terminateEPFvvE>

08012436 <abort>:
 8012436:	b508      	push	{r3, lr}
 8012438:	2006      	movs	r0, #6
 801243a:	f000 f86b 	bl	8012514 <raise>
 801243e:	2001      	movs	r0, #1
 8012440:	f7ef fc8a 	bl	8001d58 <_exit>

08012444 <__errno>:
 8012444:	4b01      	ldr	r3, [pc, #4]	; (801244c <__errno+0x8>)
 8012446:	6818      	ldr	r0, [r3, #0]
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop
 801244c:	20000104 	.word	0x20000104

08012450 <__libc_init_array>:
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	4d0d      	ldr	r5, [pc, #52]	; (8012488 <__libc_init_array+0x38>)
 8012454:	4c0d      	ldr	r4, [pc, #52]	; (801248c <__libc_init_array+0x3c>)
 8012456:	1b64      	subs	r4, r4, r5
 8012458:	10a4      	asrs	r4, r4, #2
 801245a:	2600      	movs	r6, #0
 801245c:	42a6      	cmp	r6, r4
 801245e:	d109      	bne.n	8012474 <__libc_init_array+0x24>
 8012460:	4d0b      	ldr	r5, [pc, #44]	; (8012490 <__libc_init_array+0x40>)
 8012462:	4c0c      	ldr	r4, [pc, #48]	; (8012494 <__libc_init_array+0x44>)
 8012464:	f000 f884 	bl	8012570 <_init>
 8012468:	1b64      	subs	r4, r4, r5
 801246a:	10a4      	asrs	r4, r4, #2
 801246c:	2600      	movs	r6, #0
 801246e:	42a6      	cmp	r6, r4
 8012470:	d105      	bne.n	801247e <__libc_init_array+0x2e>
 8012472:	bd70      	pop	{r4, r5, r6, pc}
 8012474:	f855 3b04 	ldr.w	r3, [r5], #4
 8012478:	4798      	blx	r3
 801247a:	3601      	adds	r6, #1
 801247c:	e7ee      	b.n	801245c <__libc_init_array+0xc>
 801247e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012482:	4798      	blx	r3
 8012484:	3601      	adds	r6, #1
 8012486:	e7f2      	b.n	801246e <__libc_init_array+0x1e>
 8012488:	08012990 	.word	0x08012990
 801248c:	08012990 	.word	0x08012990
 8012490:	08012990 	.word	0x08012990
 8012494:	08012998 	.word	0x08012998

08012498 <memcpy>:
 8012498:	440a      	add	r2, r1
 801249a:	4291      	cmp	r1, r2
 801249c:	f100 33ff 	add.w	r3, r0, #4294967295
 80124a0:	d100      	bne.n	80124a4 <memcpy+0xc>
 80124a2:	4770      	bx	lr
 80124a4:	b510      	push	{r4, lr}
 80124a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124ae:	4291      	cmp	r1, r2
 80124b0:	d1f9      	bne.n	80124a6 <memcpy+0xe>
 80124b2:	bd10      	pop	{r4, pc}

080124b4 <memset>:
 80124b4:	4402      	add	r2, r0
 80124b6:	4603      	mov	r3, r0
 80124b8:	4293      	cmp	r3, r2
 80124ba:	d100      	bne.n	80124be <memset+0xa>
 80124bc:	4770      	bx	lr
 80124be:	f803 1b01 	strb.w	r1, [r3], #1
 80124c2:	e7f9      	b.n	80124b8 <memset+0x4>

080124c4 <_raise_r>:
 80124c4:	291f      	cmp	r1, #31
 80124c6:	b538      	push	{r3, r4, r5, lr}
 80124c8:	4604      	mov	r4, r0
 80124ca:	460d      	mov	r5, r1
 80124cc:	d904      	bls.n	80124d8 <_raise_r+0x14>
 80124ce:	2316      	movs	r3, #22
 80124d0:	6003      	str	r3, [r0, #0]
 80124d2:	f04f 30ff 	mov.w	r0, #4294967295
 80124d6:	bd38      	pop	{r3, r4, r5, pc}
 80124d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124da:	b112      	cbz	r2, 80124e2 <_raise_r+0x1e>
 80124dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124e0:	b94b      	cbnz	r3, 80124f6 <_raise_r+0x32>
 80124e2:	4620      	mov	r0, r4
 80124e4:	f000 f830 	bl	8012548 <_getpid_r>
 80124e8:	462a      	mov	r2, r5
 80124ea:	4601      	mov	r1, r0
 80124ec:	4620      	mov	r0, r4
 80124ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124f2:	f000 b817 	b.w	8012524 <_kill_r>
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d00a      	beq.n	8012510 <_raise_r+0x4c>
 80124fa:	1c59      	adds	r1, r3, #1
 80124fc:	d103      	bne.n	8012506 <_raise_r+0x42>
 80124fe:	2316      	movs	r3, #22
 8012500:	6003      	str	r3, [r0, #0]
 8012502:	2001      	movs	r0, #1
 8012504:	e7e7      	b.n	80124d6 <_raise_r+0x12>
 8012506:	2400      	movs	r4, #0
 8012508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801250c:	4628      	mov	r0, r5
 801250e:	4798      	blx	r3
 8012510:	2000      	movs	r0, #0
 8012512:	e7e0      	b.n	80124d6 <_raise_r+0x12>

08012514 <raise>:
 8012514:	4b02      	ldr	r3, [pc, #8]	; (8012520 <raise+0xc>)
 8012516:	4601      	mov	r1, r0
 8012518:	6818      	ldr	r0, [r3, #0]
 801251a:	f7ff bfd3 	b.w	80124c4 <_raise_r>
 801251e:	bf00      	nop
 8012520:	20000104 	.word	0x20000104

08012524 <_kill_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4d07      	ldr	r5, [pc, #28]	; (8012544 <_kill_r+0x20>)
 8012528:	2300      	movs	r3, #0
 801252a:	4604      	mov	r4, r0
 801252c:	4608      	mov	r0, r1
 801252e:	4611      	mov	r1, r2
 8012530:	602b      	str	r3, [r5, #0]
 8012532:	f7ef fc01 	bl	8001d38 <_kill>
 8012536:	1c43      	adds	r3, r0, #1
 8012538:	d102      	bne.n	8012540 <_kill_r+0x1c>
 801253a:	682b      	ldr	r3, [r5, #0]
 801253c:	b103      	cbz	r3, 8012540 <_kill_r+0x1c>
 801253e:	6023      	str	r3, [r4, #0]
 8012540:	bd38      	pop	{r3, r4, r5, pc}
 8012542:	bf00      	nop
 8012544:	200058a8 	.word	0x200058a8

08012548 <_getpid_r>:
 8012548:	f7ef bbee 	b.w	8001d28 <_getpid>

0801254c <strncmp>:
 801254c:	b510      	push	{r4, lr}
 801254e:	b16a      	cbz	r2, 801256c <strncmp+0x20>
 8012550:	3901      	subs	r1, #1
 8012552:	1884      	adds	r4, r0, r2
 8012554:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012558:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801255c:	4293      	cmp	r3, r2
 801255e:	d103      	bne.n	8012568 <strncmp+0x1c>
 8012560:	42a0      	cmp	r0, r4
 8012562:	d001      	beq.n	8012568 <strncmp+0x1c>
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1f5      	bne.n	8012554 <strncmp+0x8>
 8012568:	1a98      	subs	r0, r3, r2
 801256a:	bd10      	pop	{r4, pc}
 801256c:	4610      	mov	r0, r2
 801256e:	e7fc      	b.n	801256a <strncmp+0x1e>

08012570 <_init>:
 8012570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012572:	bf00      	nop
 8012574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012576:	bc08      	pop	{r3}
 8012578:	469e      	mov	lr, r3
 801257a:	4770      	bx	lr

0801257c <_fini>:
 801257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257e:	bf00      	nop
 8012580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012582:	bc08      	pop	{r3}
 8012584:	469e      	mov	lr, r3
 8012586:	4770      	bx	lr
