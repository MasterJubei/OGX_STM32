
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010884  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08010a4c  08010a4c  00020a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ecc  08010ecc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010ecc  08010ecc  00020ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ed4  08010ed4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010ed4  08010ed4  00020ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010edc  08010edc  00020edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08010ee0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  200001dc  080110bc  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  080110bc  00030f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bedc  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b61  00000000  00000000  0007c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00082c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00084500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c459  00000000  00000000  00085c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff61  00000000  00000000  000b20c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef222  00000000  00000000  000d202a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c124c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ebc  00000000  00000000  001c12a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08010a34 	.word	0x08010a34

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	08010a34 	.word	0x08010a34

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96e 	b.w	8000f14 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8083 	bne.w	8000d66 <__udivmoddi4+0x116>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4617      	mov	r7, r2
 8000c64:	d947      	bls.n	8000cf6 <__udivmoddi4+0xa6>
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	b142      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6c:	f1c2 0020 	rsb	r0, r2, #32
 8000c70:	fa24 f000 	lsr.w	r0, r4, r0
 8000c74:	4091      	lsls	r1, r2
 8000c76:	4097      	lsls	r7, r2
 8000c78:	ea40 0c01 	orr.w	ip, r0, r1
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c82:	0c23      	lsrs	r3, r4, #16
 8000c84:	fbbc f6f8 	udiv	r6, ip, r8
 8000c88:	fa1f fe87 	uxth.w	lr, r7
 8000c8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb06 f10e 	mul.w	r1, r6, lr
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d909      	bls.n	8000cb0 <__udivmoddi4+0x60>
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 8119 	bcs.w	8000ed8 <__udivmoddi4+0x288>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 8116 	bls.w	8000ed8 <__udivmoddi4+0x288>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	443b      	add	r3, r7
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x8c>
 8000cc8:	193c      	adds	r4, r7, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	f080 8105 	bcs.w	8000edc <__udivmoddi4+0x28c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f240 8102 	bls.w	8000edc <__udivmoddi4+0x28c>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce0:	eba4 040e 	sub.w	r4, r4, lr
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa0>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xaa>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d150      	bne.n	8000da4 <__udivmoddi4+0x154>
 8000d02:	1bcb      	subs	r3, r1, r7
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fa1f f887 	uxth.w	r8, r7
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d12:	0c21      	lsrs	r1, r4, #16
 8000d14:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0xe4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0xe2>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	f200 80e9 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1ac9      	subs	r1, r1, r3
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x10c>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x10a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80d9 	bhi.w	8000f0c <__udivmoddi4+0x2bc>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e7bf      	b.n	8000ce6 <__udivmoddi4+0x96>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d909      	bls.n	8000d7e <__udivmoddi4+0x12e>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <__udivmoddi4+0x282>
 8000d70:	2600      	movs	r6, #0
 8000d72:	e9c5 0100 	strd	r0, r1, [r5]
 8000d76:	4630      	mov	r0, r6
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	fab3 f683 	clz	r6, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d14a      	bne.n	8000e1c <__udivmoddi4+0x1cc>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0x140>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 80b8 	bhi.w	8000f00 <__udivmoddi4+0x2b0>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb61 0103 	sbc.w	r1, r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	468c      	mov	ip, r1
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0a8      	beq.n	8000cf0 <__udivmoddi4+0xa0>
 8000d9e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f603 	lsr.w	r6, r0, r3
 8000dac:	4097      	lsls	r7, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db6:	40d9      	lsrs	r1, r3
 8000db8:	4330      	orrs	r0, r6
 8000dba:	0c03      	lsrs	r3, r0, #16
 8000dbc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dcc:	fb06 f108 	mul.w	r1, r6, r8
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x19c>
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dde:	f080 808d 	bcs.w	8000efc <__udivmoddi4+0x2ac>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 808a 	bls.w	8000efc <__udivmoddi4+0x2ac>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	443b      	add	r3, r7
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b281      	uxth	r1, r0
 8000df0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfc:	fb00 f308 	mul.w	r3, r0, r8
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x1c4>
 8000e04:	1879      	adds	r1, r7, r1
 8000e06:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e0a:	d273      	bcs.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d971      	bls.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4439      	add	r1, r7
 8000e14:	1acb      	subs	r3, r1, r3
 8000e16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e1a:	e778      	b.n	8000d0e <__udivmoddi4+0xbe>
 8000e1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e20:	fa03 f406 	lsl.w	r4, r3, r6
 8000e24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	0c3b      	lsrs	r3, r7, #16
 8000e3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e42:	fa1f f884 	uxth.w	r8, r4
 8000e46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e52:	458a      	cmp	sl, r1
 8000e54:	fa02 f206 	lsl.w	r2, r2, r6
 8000e58:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x220>
 8000e5e:	1861      	adds	r1, r4, r1
 8000e60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e64:	d248      	bcs.n	8000ef8 <__udivmoddi4+0x2a8>
 8000e66:	458a      	cmp	sl, r1
 8000e68:	d946      	bls.n	8000ef8 <__udivmoddi4+0x2a8>
 8000e6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6e:	4421      	add	r1, r4
 8000e70:	eba1 010a 	sub.w	r1, r1, sl
 8000e74:	b2bf      	uxth	r7, r7
 8000e76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e82:	fb00 f808 	mul.w	r8, r0, r8
 8000e86:	45b8      	cmp	r8, r7
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x24a>
 8000e8a:	19e7      	adds	r7, r4, r7
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d22e      	bcs.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d92c      	bls.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4427      	add	r7, r4
 8000e9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9e:	eba7 0708 	sub.w	r7, r7, r8
 8000ea2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea6:	454f      	cmp	r7, r9
 8000ea8:	46c6      	mov	lr, r8
 8000eaa:	4649      	mov	r1, r9
 8000eac:	d31a      	bcc.n	8000ee4 <__udivmoddi4+0x294>
 8000eae:	d017      	beq.n	8000ee0 <__udivmoddi4+0x290>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x27a>
 8000eb2:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ebe:	40f2      	lsrs	r2, r6
 8000ec0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec4:	40f7      	lsrs	r7, r6
 8000ec6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e70b      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fd      	b.n	8000cdc <__udivmoddi4+0x8c>
 8000ee0:	4543      	cmp	r3, r8
 8000ee2:	d2e5      	bcs.n	8000eb0 <__udivmoddi4+0x260>
 8000ee4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee8:	eb69 0104 	sbc.w	r1, r9, r4
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7df      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e7d2      	b.n	8000e9a <__udivmoddi4+0x24a>
 8000ef4:	4660      	mov	r0, ip
 8000ef6:	e78d      	b.n	8000e14 <__udivmoddi4+0x1c4>
 8000ef8:	4681      	mov	r9, r0
 8000efa:	e7b9      	b.n	8000e70 <__udivmoddi4+0x220>
 8000efc:	4666      	mov	r6, ip
 8000efe:	e775      	b.n	8000dec <__udivmoddi4+0x19c>
 8000f00:	4630      	mov	r0, r6
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0x14a>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	4439      	add	r1, r7
 8000f0a:	e713      	b.n	8000d34 <__udivmoddi4+0xe4>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e724      	b.n	8000d5c <__udivmoddi4+0x10c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0b00 	vstr	d0, [r7]
 8000f22:	683c      	ldr	r4, [r7, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	461e      	mov	r6, r3
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_ZSt5isinfd+0x5c>)
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff fdc4 	bl	8000ac4 <__aeabi_dcmpun>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10b      	bne.n	8000f5a <_ZSt5isinfd+0x42>
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <_ZSt5isinfd+0x5c>)
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f7ff fd9c 	bl	8000a88 <__aeabi_dcmple>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <_ZSt5isinfd+0x42>
 8000f56:	2300      	movs	r3, #0
 8000f58:	461e      	mov	r6, r3
 8000f5a:	b2f3      	uxtb	r3, r6
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f74:	7fefffff 	.word	0x7fefffff

08000f78 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0b00 	vstr	d0, [r7]
 8000f82:	2301      	movs	r3, #1
 8000f84:	461c      	mov	r4, r3
 8000f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f8e:	f7ff fd99 	bl	8000ac4 <__aeabi_dcmpun>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <_ZSt5isnand+0x24>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	b2e3      	uxtb	r3, r4
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf14      	ite	ne
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	2300      	moveq	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <_ZN5Print5writeEPKc+0x14>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e00d      	b.n	8000fe0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	681c      	ldr	r4, [r3, #0]
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f7ff f91b 	bl	8000208 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	47a0      	blx	r4
 8000fdc:	4603      	mov	r3, r0
 8000fde:	bf00      	nop
    }
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}

08000fe8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1e5a      	subs	r2, r3, #1
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00e      	beq.n	800102a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	4790      	blx	r2
 8001020:	4602      	mov	r2, r0
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	4413      	add	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
  while (size--) {
 8001028:	e7e6      	b.n	8000ff8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800102a:	697b      	ldr	r3, [r7, #20]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f805 	bl	8001050 <_ZN5Print5printEPKc>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  return write(str);
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffa7 	bl	8000fb0 <_ZN5Print5writeEPKc>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	4611      	mov	r1, r2
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	4798      	blx	r3
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f856 	bl	8001156 <_ZN5Print5printEmi>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f805 	bl	80010d4 <_ZN5Print5printEli>
 80010ca:	4603      	mov	r3, r0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <_ZN5Print5printEli+0x26>
    return write(n);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	4611      	mov	r1, r2
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	4798      	blx	r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	e029      	b.n	800114e <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	d11d      	bne.n	800113c <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	da12      	bge.n	800112c <_ZN5Print5printEli+0x58>
      int t = print('-');
 8001106:	212d      	movs	r1, #45	; 0x2d
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff ffaf 	bl	800106c <_ZN5Print5printEc>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
      n = -n;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	425b      	negs	r3, r3
 8001116:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	220a      	movs	r2, #10
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f84d 	bl	80011be <_ZN5Print11printNumberEmh>
 8001124:	4602      	mov	r2, r0
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	4413      	add	r3, r2
 800112a:	e010      	b.n	800114e <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	220a      	movs	r2, #10
 8001130:	4619      	mov	r1, r3
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f843 	bl	80011be <_ZN5Print11printNumberEmh>
 8001138:	4603      	mov	r3, r0
 800113a:	e008      	b.n	800114e <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	4619      	mov	r1, r3
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f83a 	bl	80011be <_ZN5Print11printNumberEmh>
 800114a:	4603      	mov	r3, r0
 800114c:	bf00      	nop
  }
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <_ZN5Print5printEmi+0x26>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	4611      	mov	r1, r2
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	4798      	blx	r3
 8001178:	4603      	mov	r3, r0
 800117a:	e008      	b.n	800118e <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 f81a 	bl	80011be <_ZN5Print11printNumberEmh>
 800118a:	4603      	mov	r3, r0
 800118c:	bf00      	nop
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	ed87 0b00 	vstr	d0, [r7]
 80011a2:	60b9      	str	r1, [r7, #8]
  return printFloat(n, digits);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	ed97 0b00 	vldr	d0, [r7]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f84a 	bl	8001248 <_ZN5Print10printFloatEdh>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b090      	sub	sp, #64	; 0x40
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	3320      	adds	r3, #32
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80011d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d801      	bhi.n	80011e4 <_ZN5Print11printNumberEmh+0x26>
 80011e0:	230a      	movs	r3, #10
 80011e2:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80011f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	79f9      	ldrb	r1, [r7, #7]
 80011fc:	fb11 f303 	smulbb	r3, r1, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8001208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800120c:	2b09      	cmp	r3, #9
 800120e:	d804      	bhi.n	800121a <_ZN5Print11printNumberEmh+0x5c>
 8001210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001214:	3330      	adds	r3, #48	; 0x30
 8001216:	b2db      	uxtb	r3, r3
 8001218:	e003      	b.n	8001222 <_ZN5Print11printNumberEmh+0x64>
 800121a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800121e:	3337      	adds	r3, #55	; 0x37
 8001220:	b2db      	uxtb	r3, r3
 8001222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001224:	3a01      	subs	r2, #1
 8001226:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800122a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d000      	beq.n	8001234 <_ZN5Print11printNumberEmh+0x76>
  do {
 8001232:	e7d7      	b.n	80011e4 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8001234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff feba 	bl	8000fb0 <_ZN5Print5writeEPKc>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits) 
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	ed87 0b00 	vstr	d0, [r7]
 8001254:	460b      	mov	r3, r1
 8001256:	72fb      	strb	r3, [r7, #11]
  size_t n = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (isnan(number)) return print("nan");
 800125c:	ed97 0b00 	vldr	d0, [r7]
 8001260:	f7ff fe8a 	bl	8000f78 <_ZSt5isnand>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <_ZN5Print10printFloatEdh+0x2e>
 800126a:	4969      	ldr	r1, [pc, #420]	; (8001410 <_ZN5Print10printFloatEdh+0x1c8>)
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff feef 	bl	8001050 <_ZN5Print5printEPKc>
 8001272:	4603      	mov	r3, r0
 8001274:	e0c7      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  if (isinf(number)) return print("inf");
 8001276:	ed97 0b00 	vldr	d0, [r7]
 800127a:	f7ff fe4d 	bl	8000f18 <_ZSt5isinfd>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <_ZN5Print10printFloatEdh+0x48>
 8001284:	4963      	ldr	r1, [pc, #396]	; (8001414 <_ZN5Print10printFloatEdh+0x1cc>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fee2 	bl	8001050 <_ZN5Print5printEPKc>
 800128c:	4603      	mov	r3, r0
 800128e:	e0ba      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8001290:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <_ZN5Print10printFloatEdh+0x1d0>)
 8001296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129a:	f7ff fc09 	bl	8000ab0 <__aeabi_dcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <_ZN5Print10printFloatEdh+0x68>
 80012a4:	495d      	ldr	r1, [pc, #372]	; (800141c <_ZN5Print10printFloatEdh+0x1d4>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fed2 	bl	8001050 <_ZN5Print5printEPKc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	e0aa      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80012b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80012b4:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <_ZN5Print10printFloatEdh+0x1d8>)
 80012b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ba:	f7ff fbdb 	bl	8000a74 <__aeabi_dcmplt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <_ZN5Print10printFloatEdh+0x88>
 80012c4:	4955      	ldr	r1, [pc, #340]	; (800141c <_ZN5Print10printFloatEdh+0x1d4>)
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff fec2 	bl	8001050 <_ZN5Print5printEPKc>
 80012cc:	4603      	mov	r3, r0
 80012ce:	e09a      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  
  // Handle negative numbers
  if (number < 0.0)
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012dc:	f7ff fbca 	bl	8000a74 <__aeabi_dcmplt>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00d      	beq.n	8001302 <_ZN5Print10printFloatEdh+0xba>
  {
     n += print('-');
 80012e6:	212d      	movs	r1, #45	; 0x2d
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff febf 	bl	800106c <_ZN5Print5printEc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	4413      	add	r3, r2
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
     number = -number;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001300:	607b      	str	r3, [r7, #4]
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <_ZN5Print10printFloatEdh+0x1dc>)
 8001308:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	429a      	cmp	r2, r3
 800131a:	d210      	bcs.n	800133e <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <_ZN5Print10printFloatEdh+0x1e0>)
 8001322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001326:	f7ff fa5d 	bl	80007e4 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
 8001332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001336:	3301      	adds	r3, #1
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133c:	e7e9      	b.n	8001312 <_ZN5Print10printFloatEdh+0xca>
  
  number += rounding;
 800133e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001346:	f7fe ff6d 	bl	8000224 <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	e9c7 2300 	strd	r2, r3, [r7]

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8001352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001356:	f7ff fbf3 	bl	8000b40 <__aeabi_d2uiz>
 800135a:	4603      	mov	r3, r0
 800135c:	617b      	str	r3, [r7, #20]
  double remainder = number - (double)int_part;
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff f89c 	bl	800049c <__aeabi_ui2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800136c:	f7fe ff58 	bl	8000220 <__aeabi_dsub>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	e9c7 2306 	strd	r2, r3, [r7, #24]
  n += print(int_part);
 8001378:	220a      	movs	r2, #10
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff feea 	bl	8001156 <_ZN5Print5printEmi>
 8001382:	4602      	mov	r2, r0
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	4413      	add	r3, r2
 8001388:	637b      	str	r3, [r7, #52]	; 0x34

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <_ZN5Print10printFloatEdh+0x158>
    n += print("."); 
 8001390:	4926      	ldr	r1, [pc, #152]	; (800142c <_ZN5Print10printFloatEdh+0x1e4>)
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff fe5c 	bl	8001050 <_ZN5Print5printEPKc>
 8001398:	4602      	mov	r2, r0
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	4413      	add	r3, r2
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	72fa      	strb	r2, [r7, #11]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bf14      	ite	ne
 80013aa:	2301      	movne	r3, #1
 80013ac:	2300      	moveq	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d027      	beq.n	8001404 <_ZN5Print10printFloatEdh+0x1bc>
  {
    remainder *= 10.0;
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <_ZN5Print10printFloatEdh+0x1e0>)
 80013ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013be:	f7ff f8e7 	bl	8000590 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int toPrint = int(remainder);
 80013ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ce:	f7ff fb8f 	bl	8000af0 <__aeabi_d2iz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	613b      	str	r3, [r7, #16]
    n += print(toPrint);
 80013d6:	220a      	movs	r2, #10
 80013d8:	6939      	ldr	r1, [r7, #16]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fe6a 	bl	80010b4 <_ZN5Print5printEii>
 80013e0:	4602      	mov	r2, r0
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	4413      	add	r3, r2
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
    remainder -= toPrint; 
 80013e8:	6938      	ldr	r0, [r7, #16]
 80013ea:	f7ff f867 	bl	80004bc <__aeabi_i2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013f6:	f7fe ff13 	bl	8000220 <__aeabi_dsub>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (digits-- > 0)
 8001402:	e7cd      	b.n	80013a0 <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001406:	4618      	mov	r0, r3
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08010a50 	.word	0x08010a50
 8001414:	08010a54 	.word	0x08010a54
 8001418:	41efffff 	.word	0x41efffff
 800141c:	08010a58 	.word	0x08010a58
 8001420:	c1efffff 	.word	0xc1efffff
 8001424:	3fe00000 	.word	0x3fe00000
 8001428:	40240000 	.word	0x40240000
 800142c:	08010a5c 	.word	0x08010a5c

08001430 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3304      	adds	r3, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1cf9      	adds	r1, r7, #3
 8001446:	2201      	movs	r2, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6918      	ldr	r0, [r3, #16]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	b29a      	uxth	r2, r3
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	6979      	ldr	r1, [r7, #20]
 8001474:	f005 f981 	bl	800677a <HAL_UART_Transmit>
	return size;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6918      	ldr	r0, [r3, #16]
 800148e:	f107 010f 	add.w	r1, r7, #15
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2201      	movs	r2, #1
 8001498:	f005 fa01 	bl	800689e <HAL_UART_Receive>
	return data;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <_ZN5PrintC1Ev+0x24>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	08010c6c 	.word	0x08010c6c

08001514 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffe4 	bl	80014ec <_ZN5PrintC1Ev>
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <_ZN6StreamC1Ev+0x28>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08010ce4 	.word	0x08010ce4

08001540 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffe1 	bl	8001514 <_ZN6StreamC1Ev>
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	611a      	str	r2, [r3, #16]
	};
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	08010c7c 	.word	0x08010c7c

0800156c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	4903      	ldr	r1, [pc, #12]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <_ZN2P910SetDirReadEv+0x28>)
 8001586:	f001 fef3 	bl	8003370 <HAL_GPIO_Init>
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001f8 	.word	0x200001f8
 8001594:	40020800 	.word	0x40020800

08001598 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
 800159c:	2201      	movs	r2, #1
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <_ZN3P103SetEv+0x14>)
 80015a2:	f002 f891 	bl	80036c8 <HAL_GPIO_WritePin>
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020400 	.word	0x40020400

080015b0 <_ZN3P105ClearEv>:
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <_ZN3P105ClearEv+0x14>)
 80015ba:	f002 f885 	bl	80036c8 <HAL_GPIO_WritePin>
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020400 	.word	0x40020400

080015c8 <_ZN3P1011SetDirWriteEv>:
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	4902      	ldr	r1, [pc, #8]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80015e8:	f001 fec2 	bl	8003370 <HAL_GPIO_Init>
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000020c 	.word	0x2000020c
 80015f4:	40020400 	.word	0x40020400

080015f8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2206      	movs	r2, #6
 8001612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffde 	bl	80015f8 <_ZN3BTD11pairWithHIDEv>
        };
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4798      	blx	r3
                OnInitBTHID();
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	331c      	adds	r3, #28
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
        };
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	460b      	mov	r3, r1
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	72fb      	strb	r3, [r7, #11]
                return;
 800167c:	bf00      	nop
        }
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_ZN9PS4ParserC1Ev+0x20>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
                Reset();
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f00d f9f8 	bl	800ea8c <_ZN9PS4Parser5ResetEv>
        };
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08010cd8 	.word	0x08010cd8

080016ac <_ZN9PS4Parser4getXEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns the x-coordinate of the finger.
         */
        uint16_t getX(uint8_t finger = 0, uint8_t xyId = 0) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	4613      	mov	r3, r2
 80016ba:	70bb      	strb	r3, [r7, #2]
                return ps4Data.xy[xyId].finger[finger].x;
 80016bc:	78ba      	ldrb	r2, [r7, #2]
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	0098      	lsls	r0, r3, #2
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	4403      	add	r3, r0
 80016cc:	440b      	add	r3, r1
 80016ce:	3320      	adds	r3, #32
 80016d0:	79da      	ldrb	r2, [r3, #7]
 80016d2:	7a1b      	ldrb	r3, [r3, #8]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	4313      	orrs	r3, r2
 80016dc:	b29b      	uxth	r3, r3
        };
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_ZN9PS4Parser4getYEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns the y-coordinate of the finger.
         */
        uint16_t getY(uint8_t finger = 0, uint8_t xyId = 0) {
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70fb      	strb	r3, [r7, #3]
 80016f6:	4613      	mov	r3, r2
 80016f8:	70bb      	strb	r3, [r7, #2]
                return ps4Data.xy[xyId].finger[finger].y;
 80016fa:	78ba      	ldrb	r2, [r7, #2]
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	0098      	lsls	r0, r3, #2
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	4403      	add	r3, r0
 800170a:	440b      	add	r3, r1
 800170c:	3320      	adds	r3, #32
 800170e:	7a1a      	ldrb	r2, [r3, #8]
 8001710:	0912      	lsrs	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	7a5b      	ldrb	r3, [r3, #9]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4313      	orrs	r3, r2
 800171a:	b29b      	uxth	r3, r3
        };
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
 8001734:	4613      	mov	r3, r2
 8001736:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 8001738:	78ba      	ldrb	r2, [r7, #2]
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	0098      	lsls	r0, r3, #2
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	4403      	add	r3, r0
 8001748:	440b      	add	r3, r1
 800174a:	3320      	adds	r3, #32
 800174c:	799b      	ldrb	r3, [r3, #6]
 800174e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f083 0301 	eor.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
        };
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <_ZN9PS4Parser8getAngleE9AngleEnum>:
        /**
         * Get the angle of the controller calculated using the accelerometer.
         * @param  a Either ::Pitch or ::Roll.
         * @return   Return the angle in the range of 0-360.
         */
        float getAngle(AngleEnum a) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
                if (a == Pitch)
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d12e      	bne.n	80017d8 <_ZN9PS4Parser8getAngleE9AngleEnum+0x70>
                        return (atan2f(ps4Data.accY, ps4Data.accZ) + PI) * RAD_TO_DEG;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800178e:	ee07 3a10 	vmov	s14, r3
 8001792:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001796:	eef0 0a47 	vmov.f32	s1, s14
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	f00e ff2e 	bl	80105fe <atan2f>
 80017a2:	ee10 3a10 	vmov	r3, s0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe9a 	bl	80004e0 <__aeabi_f2d>
 80017ac:	a326      	add	r3, pc, #152	; (adr r3, 8001848 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe0>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fd37 	bl	8000224 <__adddf3>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	a324      	add	r3, pc, #144	; (adr r3, 8001850 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe8>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe fee4 	bl	8000590 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9d6 	bl	8000b80 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	e02d      	b.n	8001834 <_ZN9PS4Parser8getAngleE9AngleEnum+0xcc>
                else
                        return (atan2f(ps4Data.accX, ps4Data.accZ) + PI) * RAD_TO_DEG;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80017ec:	ee07 3a10 	vmov	s14, r3
 80017f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017f4:	eef0 0a47 	vmov.f32	s1, s14
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f00e feff 	bl	80105fe <atan2f>
 8001800:	ee10 3a10 	vmov	r3, s0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe6b 	bl	80004e0 <__aeabi_f2d>
 800180a:	a30f      	add	r3, pc, #60	; (adr r3, 8001848 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe0>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fd08 	bl	8000224 <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	a30c      	add	r3, pc, #48	; (adr r3, 8001850 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe8>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe feb5 	bl	8000590 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9a7 	bl	8000b80 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
        };
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	54442d18 	.word	0x54442d18
 800184c:	400921fb 	.word	0x400921fb
 8001850:	1a63c1f8 	.word	0x1a63c1f8
 8001854:	404ca5dc 	.word	0x404ca5dc

08001858 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b20      	cmp	r3, #32
 8001868:	d105      	bne.n	8001876 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	2100      	movs	r1, #0
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f80a 	bl	8001888 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8001874:	e004      	b.n	8001880 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8001876:	2200      	movs	r2, #0
 8001878:	21ff      	movs	r1, #255	; 0xff
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f804 	bl	8001888 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
 8001894:	4613      	mov	r3, r2
 8001896:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	78ba      	ldrb	r2, [r7, #2]
 80018a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	70fb      	strb	r3, [r7, #3]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70bb      	strb	r3, [r7, #2]
 80018d2:	4613      	mov	r3, r2
 80018d4:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	78ba      	ldrb	r2, [r7, #2]
 80018e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	787a      	ldrb	r2, [r7, #1]
 80018ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	141b      	asrs	r3, r3, #16
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	121b      	asrs	r3, r3, #8
 8001916:	b2da      	uxtb	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffcd 	bl	80018bc <_ZN9PS4Parser6setLedEhhh>
        };
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_ZN9PS4Parser11setLedFlashEhh>:
        /**
         * Set the LEDs flash time.
         * @param flashOn  Time to flash bright (255 = 2.5 seconds).
         * @param flashOff Time to flash dark (255 = 2.5 seconds).
         */
        void setLedFlash(uint8_t flashOn, uint8_t flashOff) {
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
 8001936:	4613      	mov	r3, r2
 8001938:	70bb      	strb	r3, [r7, #2]
                ps4Output.flashOn = flashOn;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                ps4Output.flashOff = flashOff;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	78ba      	ldrb	r2, [r7, #2]
 8001946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                ps4Output.reportChanged = true;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	f00b febc 	bl	800d6f4 <_ZN5BTHIDC1EP3BTDbPKc>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3378      	adds	r3, #120	; 0x78
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe81 	bl	8001688 <_ZN9PS4ParserC1Ev>
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3378      	adds	r3, #120	; 0x78
 8001996:	4618      	mov	r0, r3
 8001998:	f00d f878 	bl	800ea8c <_ZN9PS4Parser5ResetEv>
        };
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08010c9c 	.word	0x08010c9c
 80019ac:	08010ccc 	.word	0x08010ccc

080019b0 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7d5b      	ldrb	r3, [r3, #21]
        };
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	460b      	mov	r3, r1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3378      	adds	r3, #120	; 0x78
 80019da:	7af9      	ldrb	r1, [r7, #11]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f00c ff8f 	bl	800e902 <_ZN9PS4Parser5ParseEhPh>
        };
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3378      	adds	r3, #120	; 0x78
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00d f847 	bl	800ea8c <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f855 	bl	8001aae <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3378      	adds	r3, #120	; 0x78
 8001a10:	21ff      	movs	r1, #255	; 0xff
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff75 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3378      	adds	r3, #120	; 0x78
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00d f82d 	bl	800ea8c <_ZN9PS4Parser5ResetEv>
        };
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b096      	sub	sp, #88	; 0x58
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	224f      	movs	r2, #79	; 0x4f
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00e ff93 	bl	8010978 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8001a52:	2352      	movs	r3, #82	; 0x52
 8001a54:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8001a56:	2311      	movs	r3, #17
 8001a58:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8001a5e:	23ff      	movs	r3, #255	; 0xff
 8001a60:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	78db      	ldrb	r3, [r3, #3]
 8001a78:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	795b      	ldrb	r3, [r3, #5]
 8001a84:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	799b      	ldrb	r3, [r3, #6]
 8001a8a:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	224f      	movs	r2, #79	; 0x4f
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f81a 	bl	8001ad4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8001aa0:	bf00      	nop
 8001aa2:	3758      	adds	r7, #88	; 0x58
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8001aa8:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8001aac:	e7c5      	b.n	8001a3a <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08001aae <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8001ab6:	2343      	movs	r3, #67	; 0x43
 8001ab8:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8001aba:	2302      	movs	r3, #2
 8001abc:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f804 	bl	8001ad4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6898      	ldr	r0, [r3, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8999      	ldrh	r1, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	7d9b      	ldrb	r3, [r3, #22]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	7dd2      	ldrb	r2, [r2, #23]
 8001af2:	79fc      	ldrb	r4, [r7, #7]
 8001af4:	9201      	str	r2, [sp, #4]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4623      	mov	r3, r4
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f00a fe92 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0e:	f000 fff9 	bl	8002b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b12:	f000 fb35 	bl	8002180 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 8001b16:	f003 f88d 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a9a      	ldr	r2, [pc, #616]	; (8001d88 <main+0x280>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fbfa 	bl	800331e <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f001 fc04 	bl	8003338 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f001 fbc7 	bl	80032ca <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f000 fc80 	bl	8002440 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001b40:	f000 fc50 	bl	80023e4 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001b44:	f000 fc12 	bl	800236c <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8001b48:	f007 ffa2 	bl	8009a90 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001b4c:	f000 fbb2 	bl	80022b4 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8001b50:	4a8e      	ldr	r2, [pc, #568]	; (8001d8c <main+0x284>)
 8001b52:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <main+0x288>)
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	2358      	movs	r3, #88	; 0x58
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f00e fefe 	bl	801095c <memcpy>
  UART_Handle = huart2;
 8001b60:	4a8c      	ldr	r2, [pc, #560]	; (8001d94 <main+0x28c>)
 8001b62:	4b8d      	ldr	r3, [pc, #564]	; (8001d98 <main+0x290>)
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	2344      	movs	r3, #68	; 0x44
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f00e fef6 	bl	801095c <memcpy>

  if (Usb.Init() == -1) {
 8001b70:	488a      	ldr	r0, [pc, #552]	; (8001d9c <main+0x294>)
 8001b72:	f000 fcc4 	bl	80024fe <_ZN8MAX3421eI3P102P9E4InitEv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <main+0x8a>
  		Serial.print(F("\r\nOSC did not start"));
 8001b88:	4985      	ldr	r1, [pc, #532]	; (8001da0 <main+0x298>)
 8001b8a:	4886      	ldr	r0, [pc, #536]	; (8001da4 <main+0x29c>)
 8001b8c:	f7ff fa52 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8001b90:	e7fe      	b.n	8001b90 <main+0x88>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8001b92:	4985      	ldr	r1, [pc, #532]	; (8001da8 <main+0x2a0>)
 8001b94:	4883      	ldr	r0, [pc, #524]	; (8001da4 <main+0x29c>)
 8001b96:	f7ff fa4d 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8001b9a:	4880      	ldr	r0, [pc, #512]	; (8001d9c <main+0x294>)
 8001b9c:	f00d fcd2 	bl	800f544 <_ZN3USB4TaskEv>

		if (PS4.connected()) {
 8001ba0:	4882      	ldr	r0, [pc, #520]	; (8001dac <main+0x2a4>)
 8001ba2:	f7ff ff05 	bl	80019b0 <_ZN5PS4BT9connectedEv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 82bb 	beq.w	8002124 <main+0x61c>
			if (PS4.getAnalogHat(LeftHatX) > 137 || PS4.getAnalogHat(LeftHatX) < 117 || PS4.getAnalogHat(LeftHatY) > 137 || PS4.getAnalogHat(LeftHatY) < 117 || PS4.getAnalogHat(RightHatX) > 137 || PS4.getAnalogHat(RightHatX) < 117 || PS4.getAnalogHat(RightHatY) > 137 || PS4.getAnalogHat(RightHatY) < 117) {
 8001bae:	2100      	movs	r1, #0
 8001bb0:	487f      	ldr	r0, [pc, #508]	; (8001db0 <main+0x2a8>)
 8001bb2:	f00c fe96 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b89      	cmp	r3, #137	; 0x89
 8001bba:	d830      	bhi.n	8001c1e <main+0x116>
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	487c      	ldr	r0, [pc, #496]	; (8001db0 <main+0x2a8>)
 8001bc0:	f00c fe8f 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b74      	cmp	r3, #116	; 0x74
 8001bc8:	d929      	bls.n	8001c1e <main+0x116>
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4878      	ldr	r0, [pc, #480]	; (8001db0 <main+0x2a8>)
 8001bce:	f00c fe88 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b89      	cmp	r3, #137	; 0x89
 8001bd6:	d822      	bhi.n	8001c1e <main+0x116>
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4875      	ldr	r0, [pc, #468]	; (8001db0 <main+0x2a8>)
 8001bdc:	f00c fe81 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b74      	cmp	r3, #116	; 0x74
 8001be4:	d91b      	bls.n	8001c1e <main+0x116>
 8001be6:	2102      	movs	r1, #2
 8001be8:	4871      	ldr	r0, [pc, #452]	; (8001db0 <main+0x2a8>)
 8001bea:	f00c fe7a 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b89      	cmp	r3, #137	; 0x89
 8001bf2:	d814      	bhi.n	8001c1e <main+0x116>
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	486e      	ldr	r0, [pc, #440]	; (8001db0 <main+0x2a8>)
 8001bf8:	f00c fe73 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b74      	cmp	r3, #116	; 0x74
 8001c00:	d90d      	bls.n	8001c1e <main+0x116>
 8001c02:	2103      	movs	r1, #3
 8001c04:	486a      	ldr	r0, [pc, #424]	; (8001db0 <main+0x2a8>)
 8001c06:	f00c fe6c 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b89      	cmp	r3, #137	; 0x89
 8001c0e:	d806      	bhi.n	8001c1e <main+0x116>
 8001c10:	2103      	movs	r1, #3
 8001c12:	4867      	ldr	r0, [pc, #412]	; (8001db0 <main+0x2a8>)
 8001c14:	f00c fe65 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b74      	cmp	r3, #116	; 0x74
 8001c1c:	d801      	bhi.n	8001c22 <main+0x11a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <main+0x11c>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d037      	beq.n	8001c98 <main+0x190>
				Serial.print(F("\r\nLeftHatX: "));
 8001c28:	4962      	ldr	r1, [pc, #392]	; (8001db4 <main+0x2ac>)
 8001c2a:	485e      	ldr	r0, [pc, #376]	; (8001da4 <main+0x29c>)
 8001c2c:	f7ff fa02 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(LeftHatX));
 8001c30:	2100      	movs	r1, #0
 8001c32:	485f      	ldr	r0, [pc, #380]	; (8001db0 <main+0x2a8>)
 8001c34:	f00c fe55 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220a      	movs	r2, #10
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4859      	ldr	r0, [pc, #356]	; (8001da4 <main+0x29c>)
 8001c40:	f7ff fa26 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tLeftHatY: "));
 8001c44:	495c      	ldr	r1, [pc, #368]	; (8001db8 <main+0x2b0>)
 8001c46:	4857      	ldr	r0, [pc, #348]	; (8001da4 <main+0x29c>)
 8001c48:	f7ff f9f4 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(LeftHatY));
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4858      	ldr	r0, [pc, #352]	; (8001db0 <main+0x2a8>)
 8001c50:	f00c fe47 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220a      	movs	r2, #10
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4852      	ldr	r0, [pc, #328]	; (8001da4 <main+0x29c>)
 8001c5c:	f7ff fa18 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tRightHatX: "));
 8001c60:	4956      	ldr	r1, [pc, #344]	; (8001dbc <main+0x2b4>)
 8001c62:	4850      	ldr	r0, [pc, #320]	; (8001da4 <main+0x29c>)
 8001c64:	f7ff f9e6 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(RightHatX));
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4851      	ldr	r0, [pc, #324]	; (8001db0 <main+0x2a8>)
 8001c6c:	f00c fe39 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220a      	movs	r2, #10
 8001c74:	4619      	mov	r1, r3
 8001c76:	484b      	ldr	r0, [pc, #300]	; (8001da4 <main+0x29c>)
 8001c78:	f7ff fa0a 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tRightHatY: "));
 8001c7c:	4950      	ldr	r1, [pc, #320]	; (8001dc0 <main+0x2b8>)
 8001c7e:	4849      	ldr	r0, [pc, #292]	; (8001da4 <main+0x29c>)
 8001c80:	f7ff f9d8 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(RightHatY));
 8001c84:	2103      	movs	r1, #3
 8001c86:	484a      	ldr	r0, [pc, #296]	; (8001db0 <main+0x2a8>)
 8001c88:	f00c fe2b 	bl	800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220a      	movs	r2, #10
 8001c90:	4619      	mov	r1, r3
 8001c92:	4844      	ldr	r0, [pc, #272]	; (8001da4 <main+0x29c>)
 8001c94:	f7ff f9fc 	bl	8001090 <_ZN5Print5printEhi>
			}

			if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
 8001c98:	2108      	movs	r1, #8
 8001c9a:	4845      	ldr	r0, [pc, #276]	; (8001db0 <main+0x2a8>)
 8001c9c:	f00c fe08 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <main+0x1ac>
 8001ca6:	2109      	movs	r1, #9
 8001ca8:	4841      	ldr	r0, [pc, #260]	; (8001db0 <main+0x2a8>)
 8001caa:	f00c fe01 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <main+0x1b0>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <main+0x1b2>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01b      	beq.n	8001cf6 <main+0x1ee>
				Serial.print(F("\r\nL2: "));
 8001cbe:	4941      	ldr	r1, [pc, #260]	; (8001dc4 <main+0x2bc>)
 8001cc0:	4838      	ldr	r0, [pc, #224]	; (8001da4 <main+0x29c>)
 8001cc2:	f7ff f9b7 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogButton(L2));
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4839      	ldr	r0, [pc, #228]	; (8001db0 <main+0x2a8>)
 8001cca:	f00c fdf1 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4833      	ldr	r0, [pc, #204]	; (8001da4 <main+0x29c>)
 8001cd6:	f7ff f9db 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tR2: "));
 8001cda:	493b      	ldr	r1, [pc, #236]	; (8001dc8 <main+0x2c0>)
 8001cdc:	4831      	ldr	r0, [pc, #196]	; (8001da4 <main+0x29c>)
 8001cde:	f7ff f9a9 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogButton(R2));
 8001ce2:	2109      	movs	r1, #9
 8001ce4:	4832      	ldr	r0, [pc, #200]	; (8001db0 <main+0x2a8>)
 8001ce6:	f00c fde3 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001cea:	4603      	mov	r3, r0
 8001cec:	220a      	movs	r2, #10
 8001cee:	4619      	mov	r1, r3
 8001cf0:	482c      	ldr	r0, [pc, #176]	; (8001da4 <main+0x29c>)
 8001cf2:	f7ff f9cd 	bl	8001090 <_ZN5Print5printEhi>
			}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) // Only write value if it's different
 8001cf6:	2108      	movs	r1, #8
 8001cf8:	482d      	ldr	r0, [pc, #180]	; (8001db0 <main+0x2a8>)
 8001cfa:	f00c fdd9 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <main+0x2c4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d109      	bne.n	8001d1e <main+0x216>
 8001d0a:	2109      	movs	r1, #9
 8001d0c:	4828      	ldr	r0, [pc, #160]	; (8001db0 <main+0x2a8>)
 8001d0e:	f00c fdcf 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <main+0x2c8>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <main+0x21a>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <main+0x21c>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00f      	beq.n	8001d48 <main+0x240>
				PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
 8001d28:	2108      	movs	r1, #8
 8001d2a:	4821      	ldr	r0, [pc, #132]	; (8001db0 <main+0x2a8>)
 8001d2c:	f00c fdc0 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461c      	mov	r4, r3
 8001d34:	2109      	movs	r1, #9
 8001d36:	481e      	ldr	r0, [pc, #120]	; (8001db0 <main+0x2a8>)
 8001d38:	f00c fdba 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4621      	mov	r1, r4
 8001d42:	481b      	ldr	r0, [pc, #108]	; (8001db0 <main+0x2a8>)
 8001d44:	f7ff fda0 	bl	8001888 <_ZN9PS4Parser11setRumbleOnEhh>
			oldL2Value = PS4.getAnalogButton(L2);
 8001d48:	2108      	movs	r1, #8
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <main+0x2a8>)
 8001d4c:	f00c fdb0 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <main+0x2c4>)
 8001d56:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8001d58:	2109      	movs	r1, #9
 8001d5a:	4815      	ldr	r0, [pc, #84]	; (8001db0 <main+0x2a8>)
 8001d5c:	f00c fda8 	bl	800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <main+0x2c8>)
 8001d66:	701a      	strb	r2, [r3, #0]

			if (PS4.getButtonClick(PS)) {
 8001d68:	2110      	movs	r1, #16
 8001d6a:	4811      	ldr	r0, [pc, #68]	; (8001db0 <main+0x2a8>)
 8001d6c:	f00c fd60 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d030      	beq.n	8001dd8 <main+0x2d0>
				Serial.print(F("\r\nPS"));
 8001d76:	4917      	ldr	r1, [pc, #92]	; (8001dd4 <main+0x2cc>)
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <main+0x29c>)
 8001d7a:	f7ff f95b 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.disconnect();
 8001d7e:	480b      	ldr	r0, [pc, #44]	; (8001dac <main+0x2a4>)
 8001d80:	f00b fd29 	bl	800d7d6 <_ZN5BTHID10disconnectEv>
 8001d84:	e709      	b.n	8001b9a <main+0x92>
 8001d86:	bf00      	nop
 8001d88:	431bde83 	.word	0x431bde83
 8001d8c:	20000304 	.word	0x20000304
 8001d90:	20000268 	.word	0x20000268
 8001d94:	2000035c 	.word	0x2000035c
 8001d98:	200002c0 	.word	0x200002c0
 8001d9c:	200003b4 	.word	0x200003b4
 8001da0:	08010a60 	.word	0x08010a60
 8001da4:	200003a0 	.word	0x200003a0
 8001da8:	08010a74 	.word	0x08010a74
 8001dac:	20000588 	.word	0x20000588
 8001db0:	20000600 	.word	0x20000600
 8001db4:	08010a94 	.word	0x08010a94
 8001db8:	08010aa4 	.word	0x08010aa4
 8001dbc:	08010ab0 	.word	0x08010ab0
 8001dc0:	08010ac0 	.word	0x08010ac0
 8001dc4:	08010ad0 	.word	0x08010ad0
 8001dc8:	08010ad8 	.word	0x08010ad8
 8001dcc:	20000652 	.word	0x20000652
 8001dd0:	20000653 	.word	0x20000653
 8001dd4:	08010ae0 	.word	0x08010ae0
			} else {
				if (PS4.getButtonClick(TRIANGLE)) {
 8001dd8:	210c      	movs	r1, #12
 8001dda:	48b7      	ldr	r0, [pc, #732]	; (80020b8 <main+0x5b0>)
 8001ddc:	f00c fd28 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <main+0x2ee>
					Serial.print(F("\r\nTraingle"));
 8001de6:	49b5      	ldr	r1, [pc, #724]	; (80020bc <main+0x5b4>)
 8001de8:	48b5      	ldr	r0, [pc, #724]	; (80020c0 <main+0x5b8>)
 8001dea:	f7ff f923 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setRumbleOn(RumbleLow);
 8001dee:	2120      	movs	r1, #32
 8001df0:	48b1      	ldr	r0, [pc, #708]	; (80020b8 <main+0x5b0>)
 8001df2:	f7ff fd31 	bl	8001858 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
				}
				if (PS4.getButtonClick(CIRCLE)) {
 8001df6:	210d      	movs	r1, #13
 8001df8:	48af      	ldr	r0, [pc, #700]	; (80020b8 <main+0x5b0>)
 8001dfa:	f00c fd19 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <main+0x30c>
					Serial.print(F("\r\nCircle"));
 8001e04:	49af      	ldr	r1, [pc, #700]	; (80020c4 <main+0x5bc>)
 8001e06:	48ae      	ldr	r0, [pc, #696]	; (80020c0 <main+0x5b8>)
 8001e08:	f7ff f914 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setRumbleOn(RumbleHigh);
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	48aa      	ldr	r0, [pc, #680]	; (80020b8 <main+0x5b0>)
 8001e10:	f7ff fd22 	bl	8001858 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
				}
				if (PS4.getButtonClick(CROSS)) {
 8001e14:	210e      	movs	r1, #14
 8001e16:	48a8      	ldr	r0, [pc, #672]	; (80020b8 <main+0x5b0>)
 8001e18:	f00c fd0a 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <main+0x32c>
					Serial.print(F("\r\nCross"));
 8001e22:	49a9      	ldr	r1, [pc, #676]	; (80020c8 <main+0x5c0>)
 8001e24:	48a6      	ldr	r0, [pc, #664]	; (80020c0 <main+0x5b8>)
 8001e26:	f7ff f905 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLedFlash(10, 10); // Set it to blink rapidly
 8001e2a:	220a      	movs	r2, #10
 8001e2c:	210a      	movs	r1, #10
 8001e2e:	48a2      	ldr	r0, [pc, #648]	; (80020b8 <main+0x5b0>)
 8001e30:	f7ff fd7b 	bl	800192a <_ZN9PS4Parser11setLedFlashEhh>
				}
				if (PS4.getButtonClick(SQUARE)) {
 8001e34:	210f      	movs	r1, #15
 8001e36:	48a0      	ldr	r0, [pc, #640]	; (80020b8 <main+0x5b0>)
 8001e38:	f00c fcfa 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <main+0x34c>
					Serial.print(F("\r\nSquare"));
 8001e42:	49a2      	ldr	r1, [pc, #648]	; (80020cc <main+0x5c4>)
 8001e44:	489e      	ldr	r0, [pc, #632]	; (80020c0 <main+0x5b8>)
 8001e46:	f7ff f8f5 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLedFlash(0, 0); // Turn off blinking
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	489a      	ldr	r0, [pc, #616]	; (80020b8 <main+0x5b0>)
 8001e50:	f7ff fd6b 	bl	800192a <_ZN9PS4Parser11setLedFlashEhh>
				}

				if (PS4.getButtonClick(UP)) {
 8001e54:	2100      	movs	r1, #0
 8001e56:	4898      	ldr	r0, [pc, #608]	; (80020b8 <main+0x5b0>)
 8001e58:	f00c fcea 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <main+0x36c>
					Serial.print(F("\r\nUp"));
 8001e62:	499b      	ldr	r1, [pc, #620]	; (80020d0 <main+0x5c8>)
 8001e64:	4896      	ldr	r0, [pc, #600]	; (80020c0 <main+0x5b8>)
 8001e66:	f7ff f8e5 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Red);
 8001e6a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8001e6e:	4892      	ldr	r0, [pc, #584]	; (80020b8 <main+0x5b0>)
 8001e70:	f7ff fd47 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}
				if (PS4.getButtonClick(RIGHT)) {
 8001e74:	2101      	movs	r1, #1
 8001e76:	4890      	ldr	r0, [pc, #576]	; (80020b8 <main+0x5b0>)
 8001e78:	f00c fcda 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <main+0x38a>
					Serial.print(F("\r\nRight"));
 8001e82:	4994      	ldr	r1, [pc, #592]	; (80020d4 <main+0x5cc>)
 8001e84:	488e      	ldr	r0, [pc, #568]	; (80020c0 <main+0x5b8>)
 8001e86:	f7ff f8d5 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Blue);
 8001e8a:	21ff      	movs	r1, #255	; 0xff
 8001e8c:	488a      	ldr	r0, [pc, #552]	; (80020b8 <main+0x5b0>)
 8001e8e:	f7ff fd38 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}
				if (PS4.getButtonClick(DOWN)) {
 8001e92:	2102      	movs	r1, #2
 8001e94:	4888      	ldr	r0, [pc, #544]	; (80020b8 <main+0x5b0>)
 8001e96:	f00c fccb 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <main+0x3a8>
					Serial.print(F("\r\nDown"));
 8001ea0:	498d      	ldr	r1, [pc, #564]	; (80020d8 <main+0x5d0>)
 8001ea2:	4887      	ldr	r0, [pc, #540]	; (80020c0 <main+0x5b8>)
 8001ea4:	f7ff f8c6 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Yellow);
 8001ea8:	498c      	ldr	r1, [pc, #560]	; (80020dc <main+0x5d4>)
 8001eaa:	4883      	ldr	r0, [pc, #524]	; (80020b8 <main+0x5b0>)
 8001eac:	f7ff fd29 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}
				if (PS4.getButtonClick(LEFT)) {
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	4881      	ldr	r0, [pc, #516]	; (80020b8 <main+0x5b0>)
 8001eb4:	f00c fcbc 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <main+0x3c8>
					Serial.print(F("\r\nLeft"));
 8001ebe:	4988      	ldr	r1, [pc, #544]	; (80020e0 <main+0x5d8>)
 8001ec0:	487f      	ldr	r0, [pc, #508]	; (80020c0 <main+0x5b8>)
 8001ec2:	f7ff f8b7 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Green);
 8001ec6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001eca:	487b      	ldr	r0, [pc, #492]	; (80020b8 <main+0x5b0>)
 8001ecc:	f7ff fd19 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}

				if (PS4.getButtonClick(L1))
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	4879      	ldr	r0, [pc, #484]	; (80020b8 <main+0x5b0>)
 8001ed4:	f00c fcac 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <main+0x3de>
					Serial.print(F("\r\nL1"));
 8001ede:	4981      	ldr	r1, [pc, #516]	; (80020e4 <main+0x5dc>)
 8001ee0:	4877      	ldr	r0, [pc, #476]	; (80020c0 <main+0x5b8>)
 8001ee2:	f7ff f8a7 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				if (PS4.getButtonClick(L3))
 8001ee6:	2106      	movs	r1, #6
 8001ee8:	4873      	ldr	r0, [pc, #460]	; (80020b8 <main+0x5b0>)
 8001eea:	f00c fca1 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <main+0x3f4>
					Serial.print(F("\r\nL3"));
 8001ef4:	497c      	ldr	r1, [pc, #496]	; (80020e8 <main+0x5e0>)
 8001ef6:	4872      	ldr	r0, [pc, #456]	; (80020c0 <main+0x5b8>)
 8001ef8:	f7ff f89c 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				if (PS4.getButtonClick(R1))
 8001efc:	210b      	movs	r1, #11
 8001efe:	486e      	ldr	r0, [pc, #440]	; (80020b8 <main+0x5b0>)
 8001f00:	f00c fc96 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <main+0x40a>
					Serial.print(F("\r\nR1"));
 8001f0a:	4978      	ldr	r1, [pc, #480]	; (80020ec <main+0x5e4>)
 8001f0c:	486c      	ldr	r0, [pc, #432]	; (80020c0 <main+0x5b8>)
 8001f0e:	f7ff f891 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				if (PS4.getButtonClick(R3))
 8001f12:	2107      	movs	r1, #7
 8001f14:	4868      	ldr	r0, [pc, #416]	; (80020b8 <main+0x5b0>)
 8001f16:	f00c fc8b 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <main+0x420>
					Serial.print(F("\r\nR3"));
 8001f20:	4973      	ldr	r1, [pc, #460]	; (80020f0 <main+0x5e8>)
 8001f22:	4867      	ldr	r0, [pc, #412]	; (80020c0 <main+0x5b8>)
 8001f24:	f7ff f886 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>

				if (PS4.getButtonClick(SHARE))
 8001f28:	2104      	movs	r1, #4
 8001f2a:	4863      	ldr	r0, [pc, #396]	; (80020b8 <main+0x5b0>)
 8001f2c:	f00c fc80 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <main+0x436>
					Serial.print(F("\r\nShare"));
 8001f36:	496f      	ldr	r1, [pc, #444]	; (80020f4 <main+0x5ec>)
 8001f38:	4861      	ldr	r0, [pc, #388]	; (80020c0 <main+0x5b8>)
 8001f3a:	f7ff f87b 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				if (PS4.getButtonClick(OPTIONS)) {
 8001f3e:	2105      	movs	r1, #5
 8001f40:	485d      	ldr	r0, [pc, #372]	; (80020b8 <main+0x5b0>)
 8001f42:	f00c fc75 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <main+0x45a>
					Serial.print(F("\r\nOptions"));
 8001f4c:	496a      	ldr	r1, [pc, #424]	; (80020f8 <main+0x5f0>)
 8001f4e:	485c      	ldr	r0, [pc, #368]	; (80020c0 <main+0x5b8>)
 8001f50:	f7ff f870 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					printAngle = !printAngle;
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <main+0x5f4>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <main+0x5f4>)
 8001f60:	701a      	strb	r2, [r3, #0]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 8001f62:	2111      	movs	r1, #17
 8001f64:	4854      	ldr	r0, [pc, #336]	; (80020b8 <main+0x5b0>)
 8001f66:	f00c fc63 	bl	800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <main+0x47e>
					Serial.print(F("\r\nTouchpad"));
 8001f70:	4963      	ldr	r1, [pc, #396]	; (8002100 <main+0x5f8>)
 8001f72:	4853      	ldr	r0, [pc, #332]	; (80020c0 <main+0x5b8>)
 8001f74:	f7ff f85e 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					printTouch = !printTouch;
 8001f78:	4b62      	ldr	r3, [pc, #392]	; (8002104 <main+0x5fc>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b60      	ldr	r3, [pc, #384]	; (8002104 <main+0x5fc>)
 8001f84:	701a      	strb	r2, [r3, #0]
				}

				if (printAngle) { // Print angle calculated using the accelerometer only
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <main+0x5f4>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d029      	beq.n	8001fe2 <main+0x4da>
					Serial.print("\r\nPitch: "); // As I have set "-specs=nano.specs" in the linker flags, printf does not support printing floating point number
 8001f8e:	495e      	ldr	r1, [pc, #376]	; (8002108 <main+0x600>)
 8001f90:	484b      	ldr	r0, [pc, #300]	; (80020c0 <main+0x5b8>)
 8001f92:	f7ff f85d 	bl	8001050 <_ZN5Print5printEPKc>
					Serial.print(PS4.getAngle(Pitch));
 8001f96:	2101      	movs	r1, #1
 8001f98:	4847      	ldr	r0, [pc, #284]	; (80020b8 <main+0x5b0>)
 8001f9a:	f7ff fbe5 	bl	8001768 <_ZN9PS4Parser8getAngleE9AngleEnum>
 8001f9e:	ee10 3a10 	vmov	r3, s0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fa9c 	bl	80004e0 <__aeabi_f2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	2102      	movs	r1, #2
 8001fae:	ec43 2b10 	vmov	d0, r2, r3
 8001fb2:	4843      	ldr	r0, [pc, #268]	; (80020c0 <main+0x5b8>)
 8001fb4:	f7ff f8ef 	bl	8001196 <_ZN5Print5printEdi>
					Serial.print("\tRoll: ");
 8001fb8:	4954      	ldr	r1, [pc, #336]	; (800210c <main+0x604>)
 8001fba:	4841      	ldr	r0, [pc, #260]	; (80020c0 <main+0x5b8>)
 8001fbc:	f7ff f848 	bl	8001050 <_ZN5Print5printEPKc>
					Serial.print(PS4.getAngle(Roll));
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	483d      	ldr	r0, [pc, #244]	; (80020b8 <main+0x5b0>)
 8001fc4:	f7ff fbd0 	bl	8001768 <_ZN9PS4Parser8getAngleE9AngleEnum>
 8001fc8:	ee10 3a10 	vmov	r3, s0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa87 	bl	80004e0 <__aeabi_f2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	ec43 2b10 	vmov	d0, r2, r3
 8001fdc:	4838      	ldr	r0, [pc, #224]	; (80020c0 <main+0x5b8>)
 8001fde:	f7ff f8da 	bl	8001196 <_ZN5Print5printEdi>
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <main+0x5fc>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f43f add7 	beq.w	8001b9a <main+0x92>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4831      	ldr	r0, [pc, #196]	; (80020b8 <main+0x5b0>)
 8001ff2:	f7ff fb99 	bl	8001728 <_ZN9PS4Parser10isTouchingEhh>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <main+0x504>
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2101      	movs	r1, #1
 8002000:	482d      	ldr	r0, [pc, #180]	; (80020b8 <main+0x5b0>)
 8002002:	f7ff fb91 	bl	8001728 <_ZN9PS4Parser10isTouchingEhh>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <main+0x508>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <main+0x50a>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <main+0x516>
						Serial.print(F("\r\n"));
 8002016:	493e      	ldr	r1, [pc, #248]	; (8002110 <main+0x608>)
 8002018:	4829      	ldr	r0, [pc, #164]	; (80020c0 <main+0x5b8>)
 800201a:	f7ff f80b 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b01      	cmp	r3, #1
 8002026:	f63f adb8 	bhi.w	8001b9a <main+0x92>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	4821      	ldr	r0, [pc, #132]	; (80020b8 <main+0x5b0>)
 8002032:	f7ff fb79 	bl	8001728 <_ZN9PS4Parser10isTouchingEhh>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d039      	beq.n	80020b0 <main+0x5a8>
							Serial.print(F("X")); Serial.print(i + 1); Serial.print(F(": "));
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <main+0x60c>)
 800203e:	4820      	ldr	r0, [pc, #128]	; (80020c0 <main+0x5b8>)
 8002040:	f7fe fff8 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	3301      	adds	r3, #1
 8002048:	220a      	movs	r2, #10
 800204a:	4619      	mov	r1, r3
 800204c:	481c      	ldr	r0, [pc, #112]	; (80020c0 <main+0x5b8>)
 800204e:	f7ff f831 	bl	80010b4 <_ZN5Print5printEii>
 8002052:	4931      	ldr	r1, [pc, #196]	; (8002118 <main+0x610>)
 8002054:	481a      	ldr	r0, [pc, #104]	; (80020c0 <main+0x5b8>)
 8002056:	f7fe ffed 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
							Serial.print(PS4.getX(i));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	4815      	ldr	r0, [pc, #84]	; (80020b8 <main+0x5b0>)
 8002062:	f7ff fb23 	bl	80016ac <_ZN9PS4Parser4getXEhh>
 8002066:	4603      	mov	r3, r0
 8002068:	220a      	movs	r2, #10
 800206a:	4619      	mov	r1, r3
 800206c:	4814      	ldr	r0, [pc, #80]	; (80020c0 <main+0x5b8>)
 800206e:	f7ff f821 	bl	80010b4 <_ZN5Print5printEii>
							Serial.print(F("\tY")); Serial.print(i + 1); Serial.print(F(": "));
 8002072:	492a      	ldr	r1, [pc, #168]	; (800211c <main+0x614>)
 8002074:	4812      	ldr	r0, [pc, #72]	; (80020c0 <main+0x5b8>)
 8002076:	f7fe ffdd 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	3301      	adds	r3, #1
 800207e:	220a      	movs	r2, #10
 8002080:	4619      	mov	r1, r3
 8002082:	480f      	ldr	r0, [pc, #60]	; (80020c0 <main+0x5b8>)
 8002084:	f7ff f816 	bl	80010b4 <_ZN5Print5printEii>
 8002088:	4923      	ldr	r1, [pc, #140]	; (8002118 <main+0x610>)
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <main+0x5b8>)
 800208c:	f7fe ffd2 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
							Serial.print(PS4.getY(i));
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <main+0x5b0>)
 8002098:	f7ff fb27 	bl	80016ea <_ZN9PS4Parser4getYEhh>
 800209c:	4603      	mov	r3, r0
 800209e:	220a      	movs	r2, #10
 80020a0:	4619      	mov	r1, r3
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <main+0x5b8>)
 80020a4:	f7ff f806 	bl	80010b4 <_ZN5Print5printEii>
							Serial.print(F("\t"));
 80020a8:	491d      	ldr	r1, [pc, #116]	; (8002120 <main+0x618>)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <main+0x5b8>)
 80020ac:	f7fe ffc2 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	3301      	adds	r3, #1
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	e7b4      	b.n	8002022 <main+0x51a>
 80020b8:	20000600 	.word	0x20000600
 80020bc:	08010ae8 	.word	0x08010ae8
 80020c0:	200003a0 	.word	0x200003a0
 80020c4:	08010af4 	.word	0x08010af4
 80020c8:	08010b00 	.word	0x08010b00
 80020cc:	08010b08 	.word	0x08010b08
 80020d0:	08010b14 	.word	0x08010b14
 80020d4:	08010b1c 	.word	0x08010b1c
 80020d8:	08010b24 	.word	0x08010b24
 80020dc:	00ffeb04 	.word	0x00ffeb04
 80020e0:	08010b2c 	.word	0x08010b2c
 80020e4:	08010b34 	.word	0x08010b34
 80020e8:	08010b3c 	.word	0x08010b3c
 80020ec:	08010b44 	.word	0x08010b44
 80020f0:	08010b4c 	.word	0x08010b4c
 80020f4:	08010b54 	.word	0x08010b54
 80020f8:	08010b5c 	.word	0x08010b5c
 80020fc:	20000650 	.word	0x20000650
 8002100:	08010b68 	.word	0x08010b68
 8002104:	20000651 	.word	0x20000651
 8002108:	08010b74 	.word	0x08010b74
 800210c:	08010b80 	.word	0x08010b80
 8002110:	08010b88 	.word	0x08010b88
 8002114:	08010b8c 	.word	0x08010b8c
 8002118:	08010b90 	.word	0x08010b90
 800211c:	08010b94 	.word	0x08010b94
 8002120:	08010b98 	.word	0x08010b98
						}
					}
				}
			}
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8002124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <main+0x664>)
 800212a:	f001 fab5 	bl	8003698 <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d011      	beq.n	8002162 <main+0x65a>
		    if (!buttonPressed) {
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <main+0x668>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	f083 0301 	eor.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <main+0x652>
		    	Serial.print(F("\r\nButton Pressed"));
 800214c:	4909      	ldr	r1, [pc, #36]	; (8002174 <main+0x66c>)
 800214e:	480a      	ldr	r0, [pc, #40]	; (8002178 <main+0x670>)
 8002150:	f7fe ff70 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <main+0x674>)
 8002156:	f7ff fa64 	bl	8001622 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <main+0x668>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e51b      	b.n	8001b9a <main+0x92>
		} else
		    buttonPressed = false;
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <main+0x668>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
  }
 8002168:	e517      	b.n	8001b9a <main+0x92>
 800216a:	bf00      	nop
 800216c:	40020800 	.word	0x40020800
 8002170:	20000654 	.word	0x20000654
 8002174:	08010b9c 	.word	0x08010b9c
 8002178:	200003a0 	.word	0x200003a0
 800217c:	20000588 	.word	0x20000588

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0ac      	sub	sp, #176	; 0xb0
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800218a:	2234      	movs	r2, #52	; 0x34
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f00e fbf2 	bl	8010978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	225c      	movs	r2, #92	; 0x5c
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00e fbe3 	bl	8010978 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <SystemClock_Config+0x12c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <SystemClock_Config+0x12c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <SystemClock_Config+0x12c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <SystemClock_Config+0x130>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021da:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <SystemClock_Config+0x130>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <SystemClock_Config+0x130>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002200:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002208:	2304      	movs	r3, #4
 800220a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800220e:	2348      	movs	r3, #72	; 0x48
 8002210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800221a:	2303      	movs	r3, #3
 800221c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fa12 	bl	8005654 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002240:	f000 f958 	bl	80024f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002244:	230f      	movs	r3, #15
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002248:	2302      	movs	r3, #2
 800224a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800225a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800225e:	2102      	movs	r1, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fc01 	bl	8004a68 <HAL_RCC_ClockConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8002276:	f000 f93d 	bl	80024f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800227a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002280:	2300      	movs	r3, #0
 8002282:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fd07 	bl	8004c9c <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800229e:	f000 f929 	bl	80024f4 <Error_Handler>
  }

}
 80022a2:	bf00      	nop
 80022a4:	37b0      	adds	r7, #176	; 0xb0
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000

080022b4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <_ZL12MX_ADC1_Initv+0xb0>)
 80022ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022f4:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <_ZL12MX_ADC1_Initv+0xb4>)
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 8002300:	2201      	movs	r2, #1
 8002302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002312:	4813      	ldr	r0, [pc, #76]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 8002314:	f000 fc8c 	bl	8002c30 <HAL_ADC_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002328:	f000 f8e4 	bl	80024f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800232c:	230d      	movs	r3, #13
 800232e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002330:	2301      	movs	r3, #1
 8002332:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4808      	ldr	r0, [pc, #32]	; (8002360 <_ZL12MX_ADC1_Initv+0xac>)
 800233e:	f000 fcbb 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8002352:	f000 f8cf 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000220 	.word	0x20000220
 8002364:	40012000 	.word	0x40012000
 8002368:	0f000001 	.word	0x0f000001

0800236c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 8002372:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <_ZL12MX_SPI1_Initv+0x74>)
 8002374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 8002378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800237c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 80023a0:	2218      	movs	r2, #24
 80023a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 80023b8:	220a      	movs	r2, #10
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <_ZL12MX_SPI1_Initv+0x70>)
 80023be:	f003 fbe7 	bl	8005b90 <HAL_SPI_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80023d2:	f000 f88f 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000268 	.word	0x20000268
 80023e0:	40013000 	.word	0x40013000

080023e4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <_ZL19MX_USART2_UART_Initv+0x58>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800241a:	4807      	ldr	r0, [pc, #28]	; (8002438 <_ZL19MX_USART2_UART_Initv+0x54>)
 800241c:	f004 f960 	bl	80066e0 <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002430:	f000 f860 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200002c0 	.word	0x200002c0
 800243c:	40004400 	.word	0x40004400

08002440 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <_ZL12MX_GPIO_Initv+0xa8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <_ZL12MX_GPIO_Initv+0xac>)
 80024ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80024dc:	f000 ff48 	bl	8003370 <HAL_GPIO_Init>

}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	10210000 	.word	0x10210000
 80024f0:	40020800 	.word	0x40020800

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	e7fe      	b.n	80024fc <Error_Handler+0x8>

080024fe <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8002506:	f7ff f85f 	bl	80015c8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 800250a:	f7ff f845 	bl	8001598 <_ZN3P103SetEv>
        spi::init();
 800250e:	f000 f845 	bl	800259c <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8002512:	f7ff f82b 	bl	800156c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8002516:	2218      	movs	r2, #24
 8002518:	2188      	movs	r1, #136	; 0x88
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f846 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f865 	bl	80025f0 <_ZN8MAX3421eI3P102P9E5resetEv>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e02b      	b.n	8002594 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 800253c:	22c1      	movs	r2, #193	; 0xc1
 800253e:	21d8      	movs	r1, #216	; 0xd8
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f833 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8002546:	2260      	movs	r2, #96	; 0x60
 8002548:	21d0      	movs	r1, #208	; 0xd0
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f82e 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8002550:	2204      	movs	r2, #4
 8002552:	21e8      	movs	r1, #232	; 0xe8
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f829 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 800255a:	21e8      	movs	r1, #232	; 0xe8
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f877 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d000      	beq.n	8002578 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8002576:	e7f0      	b.n	800255a <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f88b 	bl	8002694 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 800257e:	2220      	movs	r2, #32
 8002580:	21c8      	movs	r1, #200	; 0xc8
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f812 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8002588:	2201      	movs	r2, #1
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f80d 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
        }
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
 80025b8:	4613      	mov	r3, r2
 80025ba:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80025bc:	f7fe fff8 	bl	80015b0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80025ca:	78bb      	ldrb	r3, [r7, #2]
 80025cc:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80025ce:	f107 010c 	add.w	r1, r7, #12
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	2202      	movs	r2, #2
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80025da:	f003 fb62 	bl	8005ca2 <HAL_SPI_Transmit>
        SPI_SS::Set();
 80025de:	f7fe ffdb 	bl	8001598 <_ZN3P103SetEv>
        return;
 80025e2:	bf00      	nop
};
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000304 	.word	0x20000304

080025f0 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 80025fc:	2220      	movs	r2, #32
 80025fe:	2178      	movs	r1, #120	; 0x78
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ffd3 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8002606:	2200      	movs	r2, #0
 8002608:	2178      	movs	r1, #120	; 0x78
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffce 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	3301      	adds	r3, #1
 8002614:	81fb      	strh	r3, [r7, #14]
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8002626:	2168      	movs	r1, #104	; 0x68
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f811 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d100      	bne.n	8002644 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8002642:	e7e5      	b.n	8002610 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8002644:	bf00      	nop
        return ( i);
 8002646:	89fb      	ldrh	r3, [r7, #14]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 800265c:	f7fe ffa8 	bl	80015b0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8002660:	1cf9      	adds	r1, r7, #3
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	2201      	movs	r2, #1
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800266a:	f003 fb1a 	bl	8005ca2 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8002672:	f107 010f 	add.w	r1, r7, #15
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	2201      	movs	r2, #1
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800267e:	f003 fc4c 	bl	8005f1a <HAL_SPI_Receive>
        SPI_SS::Set();
 8002682:	f7fe ff89 	bl	8001598 <_ZN3P103SetEv>
        return (rv);
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000304 	.word	0x20000304

08002694 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 800269c:	21f8      	movs	r1, #248	; 0xf8
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffd6 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ae:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2bc0      	cmp	r3, #192	; 0xc0
 80026b4:	d04a      	beq.n	800274c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80026b6:	2bc0      	cmp	r3, #192	; 0xc0
 80026b8:	dc55      	bgt.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d006      	beq.n	80026cc <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	dc51      	bgt.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d046      	beq.n	8002754 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d020      	beq.n	800270c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80026ca:	e04c      	b.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80026cc:	21d8      	movs	r1, #216	; 0xd8
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffbe 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf0c      	ite	eq
 80026de:	2301      	moveq	r3, #1
 80026e0:	2300      	movne	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80026e8:	22c9      	movs	r2, #201	; 0xc9
 80026ea:	21d8      	movs	r1, #216	; 0xd8
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff5d 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
                        break;
 80026f8:	e035      	b.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80026fa:	22cb      	movs	r2, #203	; 0xcb
 80026fc:	21d8      	movs	r1, #216	; 0xd8
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ff54 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002706:	2203      	movs	r2, #3
 8002708:	701a      	strb	r2, [r3, #0]
                        break;
 800270a:	e02c      	b.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800270c:	21d8      	movs	r1, #216	; 0xd8
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ff9e 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002728:	22cb      	movs	r2, #203	; 0xcb
 800272a:	21d8      	movs	r1, #216	; 0xd8
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff3d 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002734:	2203      	movs	r2, #3
 8002736:	701a      	strb	r2, [r3, #0]
                        break;
 8002738:	e015      	b.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800273a:	22c9      	movs	r2, #201	; 0xc9
 800273c:	21d8      	movs	r1, #216	; 0xd8
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff34 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
                        break;
 800274a:	e00c      	b.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
                        break;
 8002752:	e008      	b.n	8002766 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8002754:	22d1      	movs	r2, #209	; 0xd1
 8002756:	21d8      	movs	r1, #216	; 0xd8
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff27 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
                        break;
 8002764:	bf00      	nop
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000655 	.word	0x20000655

08002774 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d115      	bne.n	80027b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278a:	4293      	cmp	r3, r2
 800278c:	d110      	bne.n	80027b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002792:	f7fe fed5 	bl	8001540 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8002796:	480a      	ldr	r0, [pc, #40]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002798:	f00c fa16 	bl	800ebc8 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 800279c:	4908      	ldr	r1, [pc, #32]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800279e:	4809      	ldr	r0, [pc, #36]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80027a0:	f008 f81c 	bl	800a7dc <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80027ac:	f7ff f8d8 	bl	8001960 <_ZN5PS4BTC1EP3BTDbPKc>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200002c0 	.word	0x200002c0
 80027bc:	200003a0 	.word	0x200003a0
 80027c0:	200003b4 	.word	0x200003b4
 80027c4:	20000470 	.word	0x20000470
 80027c8:	08010bb0 	.word	0x08010bb0
 80027cc:	20000588 	.word	0x20000588

080027d0 <_GLOBAL__sub_I_hadc1>:
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff ffcb 	bl	8002774 <_Z41__static_initialization_and_destruction_0ii>
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_MspInit+0x4c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_MspInit+0x4c>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_MspInit+0x4c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_MspInit+0x4c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_MspInit+0x4c>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800281e:	2007      	movs	r0, #7
 8002820:	f000 fd48 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_ADC_MspInit+0x7c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d127      	bne.n	80028a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800288a:	2308      	movs	r3, #8
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800288e:	2303      	movs	r3, #3
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <HAL_ADC_MspInit+0x84>)
 800289e:	f000 fd67 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40012000 	.word	0x40012000
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020800 	.word	0x40020800

080028b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_SPI_MspInit+0x84>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12b      	bne.n	8002932 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_SPI_MspInit+0x88>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_SPI_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002912:	23e0      	movs	r3, #224	; 0xe0
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002922:	2305      	movs	r3, #5
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <HAL_SPI_MspInit+0x8c>)
 800292e:	f000 fd1f 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40013000 	.word	0x40013000
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000

08002948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_UART_MspInit+0x84>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d12b      	bne.n	80029c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_UART_MspInit+0x88>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_UART_MspInit+0x88>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_UART_MspInit+0x88>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_UART_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_UART_MspInit+0x88>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_UART_MspInit+0x88>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029a2:	230c      	movs	r3, #12
 80029a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b2:	2307      	movs	r3, #7
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_UART_MspInit+0x8c>)
 80029be:	f000 fcd7 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40004400 	.word	0x40004400
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020000 	.word	0x40020000

080029d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <NMI_Handler+0x4>

080029de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <HardFault_Handler+0x4>

080029e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <MemManage_Handler+0x4>

080029ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <BusFault_Handler+0x4>

080029f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <UsageFault_Handler+0x4>

080029f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a24:	f000 f8c0 	bl	8002ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <OTG_FS_IRQHandler+0x10>)
 8002a32:	f000 ffb9 	bl	80039a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000b48 	.word	0x20000b48

08002a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
	return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_kill>:

int _kill(int pid, int sig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a5a:	f00d ff55 	bl	8010908 <__errno>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2216      	movs	r2, #22
 8002a62:	601a      	str	r2, [r3, #0]
	return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_exit>:

void _exit (int status)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffe7 	bl	8002a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a82:	e7fe      	b.n	8002a82 <_exit+0x12>

08002a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <SystemInit+0x28>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <SystemInit+0x28>)
 8002a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <SystemInit+0x28>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ab4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ab6:	e003      	b.n	8002ac0 <LoopCopyDataInit>

08002ab8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002abc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002abe:	3104      	adds	r1, #4

08002ac0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ac4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ac6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ac8:	d3f6      	bcc.n	8002ab8 <CopyDataInit>
  ldr  r2, =_sbss
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002acc:	e002      	b.n	8002ad4 <LoopFillZerobss>

08002ace <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ace:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ad0:	f842 3b04 	str.w	r3, [r2], #4

08002ad4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ad6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ad8:	d3f9      	bcc.n	8002ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ada:	f7ff ffd3 	bl	8002a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ade:	f00d ff19 	bl	8010914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae2:	f7ff f811 	bl	8001b08 <main>
  bx  lr    
 8002ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002aec:	08010ee0 	.word	0x08010ee0
  ldr  r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002af4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002af8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002afc:	20000f54 	.word	0x20000f54

08002b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b00:	e7fe      	b.n	8002b00 <ADC_IRQHandler>
	...

08002b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_Init+0x40>)
 8002b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <HAL_Init+0x40>)
 8002b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_Init+0x40>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	f000 fbc1 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f000 f808 	bl	8002b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b38:	f7ff fe52 	bl	80027e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00

08002b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_InitTick+0x54>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_InitTick+0x58>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fbd9 	bl	800331e <HAL_SYSTICK_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00e      	b.n	8002b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d80a      	bhi.n	8002b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f000 fba1 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b88:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_InitTick+0x5c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_IncTick+0x20>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_IncTick+0x24>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_IncTick+0x24>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	20000674 	.word	0x20000674

08002bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_GetTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000674 	.word	0x20000674

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff ffee 	bl	8002bd0 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_Delay+0x44>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffde 	bl	8002bd0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000008 	.word	0x20000008

08002c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e033      	b.n	8002cae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fdee 	bl	8002830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c76:	f023 0302 	bic.w	r3, r3, #2
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f94a 	bl	8002f1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c9e:	e001      	b.n	8002ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e113      	b.n	8002efc <HAL_ADC_ConfigChannel+0x244>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d925      	bls.n	8002d30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b1e      	subs	r3, #30
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43da      	mvns	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	400a      	ands	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68d9      	ldr	r1, [r3, #12]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4403      	add	r3, r0
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	409a      	lsls	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	e022      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6919      	ldr	r1, [r3, #16]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	2207      	movs	r2, #7
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6919      	ldr	r1, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4403      	add	r3, r0
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d824      	bhi.n	8002dc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b05      	subs	r3, #5
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b05      	subs	r3, #5
 8002dba:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc6:	e04c      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d824      	bhi.n	8002e1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	3b23      	subs	r3, #35	; 0x23
 8002de2:	221f      	movs	r2, #31
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43da      	mvns	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	400a      	ands	r2, r1
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b23      	subs	r3, #35	; 0x23
 8002e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
 8002e18:	e023      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b41      	subs	r3, #65	; 0x41
 8002e2c:	221f      	movs	r2, #31
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b41      	subs	r3, #65	; 0x41
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_ADC_ConfigChannel+0x250>)
 8002e64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_ADC_ConfigChannel+0x254>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10f      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1d8>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_ADC_ConfigChannel+0x254>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12b      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_ADC_ConfigChannel+0x258>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x1f4>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b11      	cmp	r3, #17
 8002eaa:	d122      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_ADC_ConfigChannel+0x258>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_ADC_ConfigChannel+0x25c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <HAL_ADC_ConfigChannel+0x260>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9a      	lsrs	r2, r3, #18
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f9      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012300 	.word	0x40012300
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	10000012 	.word	0x10000012
 8002f14:	20000000 	.word	0x20000000
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f24:	4b79      	ldr	r3, [pc, #484]	; (800310c <ADC_Init+0x1f0>)
 8002f26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	021a      	lsls	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	4a58      	ldr	r2, [pc, #352]	; (8003110 <ADC_Init+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e00f      	b.n	800301a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003018:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0202 	bic.w	r2, r2, #2
 8003028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7e1b      	ldrb	r3, [r3, #24]
 8003034:	005a      	lsls	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003056:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	3b01      	subs	r3, #1
 8003074:	035a      	lsls	r2, r3, #13
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e007      	b.n	8003090 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	051a      	lsls	r2, r3, #20
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030d2:	025a      	lsls	r2, r3, #9
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	029a      	lsls	r2, r3, #10
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40012300 	.word	0x40012300
 8003110:	0f000001 	.word	0x0f000001

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff29 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032dc:	f7ff ff3e 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff8e 	bl	8003208 <NVIC_EncodePriority>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff5d 	bl	80031b4 <__NVIC_SetPriority>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff31 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffa2 	bl	8003270 <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d106      	bne.n	8003354 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003352:	e005      	b.n	8003360 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800335a:	f023 0304 	bic.w	r3, r3, #4
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e010 	.word	0xe000e010

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e165      	b.n	8003658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f040 8154 	bne.w	8003652 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d005      	beq.n	80033c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d130      	bne.n	8003424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f8:	2201      	movs	r2, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 0201 	and.w	r2, r3, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b03      	cmp	r3, #3
 800342e:	d017      	beq.n	8003460 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d123      	bne.n	80034b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	220f      	movs	r2, #15
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	08da      	lsrs	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3208      	adds	r2, #8
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0203 	and.w	r2, r3, #3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80ae 	beq.w	8003652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <HAL_GPIO_Init+0x300>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_GPIO_Init+0x300>)
 8003500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003504:	6453      	str	r3, [r2, #68]	; 0x44
 8003506:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_GPIO_Init+0x300>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003512:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_GPIO_Init+0x304>)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	3302      	adds	r3, #2
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	220f      	movs	r2, #15
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4f      	ldr	r2, [pc, #316]	; (8003678 <HAL_GPIO_Init+0x308>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d025      	beq.n	800358a <HAL_GPIO_Init+0x21a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4e      	ldr	r2, [pc, #312]	; (800367c <HAL_GPIO_Init+0x30c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <HAL_GPIO_Init+0x216>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4d      	ldr	r2, [pc, #308]	; (8003680 <HAL_GPIO_Init+0x310>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d019      	beq.n	8003582 <HAL_GPIO_Init+0x212>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_GPIO_Init+0x314>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0x20e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <HAL_GPIO_Init+0x318>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00d      	beq.n	800357a <HAL_GPIO_Init+0x20a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <HAL_GPIO_Init+0x31c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <HAL_GPIO_Init+0x206>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a49      	ldr	r2, [pc, #292]	; (8003690 <HAL_GPIO_Init+0x320>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_GPIO_Init+0x202>
 800356e:	2306      	movs	r3, #6
 8003570:	e00c      	b.n	800358c <HAL_GPIO_Init+0x21c>
 8003572:	2307      	movs	r3, #7
 8003574:	e00a      	b.n	800358c <HAL_GPIO_Init+0x21c>
 8003576:	2305      	movs	r3, #5
 8003578:	e008      	b.n	800358c <HAL_GPIO_Init+0x21c>
 800357a:	2304      	movs	r3, #4
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x21c>
 800357e:	2303      	movs	r3, #3
 8003580:	e004      	b.n	800358c <HAL_GPIO_Init+0x21c>
 8003582:	2302      	movs	r3, #2
 8003584:	e002      	b.n	800358c <HAL_GPIO_Init+0x21c>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_GPIO_Init+0x21c>
 800358a:	2300      	movs	r3, #0
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	f002 0203 	and.w	r2, r2, #3
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	4093      	lsls	r3, r2
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800359c:	4935      	ldr	r1, [pc, #212]	; (8003674 <HAL_GPIO_Init+0x304>)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	3302      	adds	r3, #2
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035aa:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <HAL_GPIO_Init+0x324>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ce:	4a31      	ldr	r2, [pc, #196]	; (8003694 <HAL_GPIO_Init+0x324>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_GPIO_Init+0x324>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f8:	4a26      	ldr	r2, [pc, #152]	; (8003694 <HAL_GPIO_Init+0x324>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_GPIO_Init+0x324>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_GPIO_Init+0x324>)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_GPIO_Init+0x324>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800364c:	4a11      	ldr	r2, [pc, #68]	; (8003694 <HAL_GPIO_Init+0x324>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3301      	adds	r3, #1
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	f67f ae96 	bls.w	800338c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40013800 	.word	0x40013800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40021400 	.word	0x40021400
 8003690:	40021800 	.word	0x40021800
 8003694:	40013c00 	.word	0x40013c00

08003698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e001      	b.n	80036ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d8:	787b      	ldrb	r3, [r7, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	041a      	lsls	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	619a      	str	r2, [r3, #24]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fc:	b08f      	sub	sp, #60	; 0x3c
 80036fe:	af0a      	add	r7, sp, #40	; 0x28
 8003700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e116      	b.n	800393a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f006 fafa 	bl	8009d20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2203      	movs	r2, #3
 8003730:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fc71 	bl	8007032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	687e      	ldr	r6, [r7, #4]
 8003758:	466d      	mov	r5, sp
 800375a:	f106 0410 	add.w	r4, r6, #16
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800376a:	e885 0003 	stmia.w	r5, {r0, r1}
 800376e:	1d33      	adds	r3, r6, #4
 8003770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f003 fb48 	bl	8006e08 <USB_CoreInit>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0d7      	b.n	800393a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f003 fc5f 	bl	8007054 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e04a      	b.n	8003832 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	333d      	adds	r3, #61	; 0x3d
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	333c      	adds	r3, #60	; 0x3c
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	b298      	uxth	r0, r3
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3342      	adds	r3, #66	; 0x42
 80037d8:	4602      	mov	r2, r0
 80037da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	333f      	adds	r3, #63	; 0x3f
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3344      	adds	r3, #68	; 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3348      	adds	r3, #72	; 0x48
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3350      	adds	r3, #80	; 0x50
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d3af      	bcc.n	800379c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e044      	b.n	80038cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3b5      	bcc.n	8003842 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	687e      	ldr	r6, [r7, #4]
 80038de:	466d      	mov	r5, sp
 80038e0:	f106 0410 	add.w	r4, r6, #16
 80038e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038f4:	1d33      	adds	r3, r6, #4
 80038f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f003 fbd5 	bl	80070a8 <USB_DevInit>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e014      	b.n	800393a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f001 f879 	bl	8004a20 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fc10 	bl	8008158 <USB_DevDisconnect>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003942 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_PCD_Start+0x1c>
 800395a:	2302      	movs	r3, #2
 800395c:	e020      	b.n	80039a0 <HAL_PCD_Start+0x5e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	2b01      	cmp	r3, #1
 800396c:	d109      	bne.n	8003982 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003972:	2b01      	cmp	r3, #1
 8003974:	d005      	beq.n	8003982 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f003 fb42 	bl	8007010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f004 fbc0 	bl	8008116 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b08d      	sub	sp, #52	; 0x34
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f004 fc7e 	bl	80082c0 <USB_GetMode>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 83ca 	bne.w	8004160 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f004 fbe2 	bl	800819a <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 83c0 	beq.w	800415e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f004 fbd9 	bl	800819a <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d107      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 0202 	and.w	r2, r2, #2
 8003a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 fbc7 	bl	800819a <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d161      	bne.n	8003ada <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0210 	bic.w	r2, r2, #16
 8003a24:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	0c5b      	lsrs	r3, r3, #17
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d124      	bne.n	8003a9c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d035      	beq.n	8003aca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6a38      	ldr	r0, [r7, #32]
 8003a72:	f004 fa2d 	bl	8007ed0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a82:	441a      	add	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a94:	441a      	add	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	619a      	str	r2, [r3, #24]
 8003a9a:	e016      	b.n	8003aca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	0c5b      	lsrs	r3, r3, #17
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d110      	bne.n	8003aca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aae:	2208      	movs	r2, #8
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6a38      	ldr	r0, [r7, #32]
 8003ab4:	f004 fa0c 	bl	8007ed0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac4:	441a      	add	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0210 	orr.w	r2, r2, #16
 8003ad8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 fb5b 	bl	800819a <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aee:	d16e      	bne.n	8003bce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 fb61 	bl	80081c0 <USB_ReadDevAllOutEpInterrupt>
 8003afe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b00:	e062      	b.n	8003bc8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d057      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 fb86 	bl	8008228 <USB_ReadDevOutEPInterrupt>
 8003b1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00c      	beq.n	8003b42 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2301      	movs	r3, #1
 8003b38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fdc5 	bl	80046cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 febf 	bl	80048e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2310      	movs	r3, #16
 8003b80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d199      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 fae1 	bl	800819a <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be2:	f040 80c0 	bne.w	8003d66 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 fb02 	bl	80081f4 <USB_ReadDevAllInEpInterrupt>
 8003bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003bf6:	e0b2      	b.n	8003d5e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80a7 	beq.w	8003d52 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f004 fb28 	bl	8008264 <USB_ReadDevInEPInterrupt>
 8003c14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d057      	beq.n	8003cd0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	2201      	movs	r2, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69f9      	ldr	r1, [r7, #28]
 8003c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c40:	4013      	ands	r3, r2
 8003c42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	461a      	mov	r2, r3
 8003c52:	2301      	movs	r3, #1
 8003c54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d132      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3348      	adds	r3, #72	; 0x48
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4403      	add	r3, r0
 8003c7e:	3344      	adds	r3, #68	; 0x44
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4419      	add	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4403      	add	r3, r0
 8003c92:	3348      	adds	r3, #72	; 0x48
 8003c94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x31c>
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3350      	adds	r3, #80	; 0x50
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	f004 fb30 	bl	8008324 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f006 f8a9 	bl	8009e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2308      	movs	r3, #8
 8003cea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	461a      	mov	r2, r3
 8003d04:	2310      	movs	r3, #16
 8003d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fc30 	bl	80045b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	3301      	adds	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af49 	bne.w	8003bf8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 fa15 	bl	800819a <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d7a:	d122      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d108      	bne.n	8003dac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003da2:	2100      	movs	r1, #0
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f006 fa79 	bl	800a29c <HAL_PCDEx_LPM_Callback>
 8003daa:	e002      	b.n	8003db2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f006 f8af 	bl	8009f10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 f9e7 	bl	800819a <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d112      	bne.n	8003dfe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f006 f86b 	bl	8009ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dfc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 f9c9 	bl	800819a <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e12:	d121      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e22:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d111      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e48:	2101      	movs	r1, #1
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f006 fa26 	bl	800a29c <HAL_PCDEx_LPM_Callback>
 8003e50:	e002      	b.n	8003e58 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f006 f836 	bl	8009ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 f99c 	bl	800819a <USB_ReadInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6c:	f040 80c7 	bne.w	8003ffe <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2110      	movs	r1, #16
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f003 fa6a 	bl	8007364 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e94:	e056      	b.n	8003f44 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ea8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ec8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003efc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	3301      	adds	r3, #1
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d3a3      	bcc.n	8003e96 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7a:	f043 030b 	orr.w	r3, r3, #11
 8003f7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f90:	f043 030b 	orr.w	r3, r3, #11
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	e015      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003faa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fbe:	f043 030b 	orr.w	r3, r3, #11
 8003fc2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fd6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f004 f99b 	bl	8008324 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f004 f8c9 	bl	800819a <USB_ReadInterrupts>
 8004008:	4603      	mov	r3, r0
 800400a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	d124      	bne.n	800405e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f004 f95f 	bl	80082dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f003 f9ff 	bl	8007426 <USB_GetDevSpeed>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681c      	ldr	r4, [r3, #0]
 8004034:	f000 fdfe 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004038:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	4620      	mov	r0, r4
 8004044:	f002 ff42 	bl	8006ecc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f005 ff12 	bl	8009e72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800405c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 f899 	bl	800819a <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b08      	cmp	r3, #8
 8004070:	d10a      	bne.n	8004088 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f005 feef 	bl	8009e56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f002 0208 	and.w	r2, r2, #8
 8004086:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f004 f884 	bl	800819a <USB_ReadInterrupts>
 8004092:	4603      	mov	r3, r0
 8004094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409c:	d10f      	bne.n	80040be <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f005 ff51 	bl	8009f50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f004 f869 	bl	800819a <USB_ReadInterrupts>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d2:	d10f      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f005 ff24 	bl	8009f2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f004 f84e 	bl	800819a <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d10a      	bne.n	8004120 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f005 ff32 	bl	8009f74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f004 f838 	bl	800819a <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d115      	bne.n	8004160 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f005 ff22 	bl	8009f90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	e000      	b.n	8004160 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800415e:	bf00      	nop
    }
  }
}
 8004160:	3734      	adds	r7, #52	; 0x34
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}

08004166 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_PCD_SetAddress+0x1a>
 800417c:	2302      	movs	r3, #2
 800417e:	e013      	b.n	80041a8 <HAL_PCD_SetAddress+0x42>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f003 ff96 	bl	80080ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	70fb      	strb	r3, [r7, #3]
 80041c2:	460b      	mov	r3, r1
 80041c4:	803b      	strh	r3, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da0f      	bge.n	80041f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 020f 	and.w	r2, r3, #15
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3338      	adds	r3, #56	; 0x38
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	3304      	adds	r3, #4
 80041ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	705a      	strb	r2, [r3, #1]
 80041f4:	e00f      	b.n	8004216 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	f003 020f 	and.w	r2, r3, #15
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	3304      	adds	r3, #4
 800420e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004222:	883a      	ldrh	r2, [r7, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	78ba      	ldrb	r2, [r7, #2]
 800422c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004240:	78bb      	ldrb	r3, [r7, #2]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d102      	bne.n	800424c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_PCD_EP_Open+0xaa>
 8004256:	2302      	movs	r3, #2
 8004258:	e00e      	b.n	8004278 <HAL_PCD_EP_Open+0xc8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68f9      	ldr	r1, [r7, #12]
 8004268:	4618      	mov	r0, r3
 800426a:	f003 f901 	bl	8007470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004276:	7afb      	ldrb	r3, [r7, #11]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da0f      	bge.n	80042b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	3338      	adds	r3, #56	; 0x38
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	705a      	strb	r2, [r3, #1]
 80042b2:	e00f      	b.n	80042d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_PCD_EP_Close+0x6e>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e00e      	b.n	800430c <HAL_PCD_EP_Close+0x8c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f003 f93f 	bl	8007580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	460b      	mov	r3, r1
 8004322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004324:	7afb      	ldrb	r3, [r7, #11]
 8004326:	f003 020f 	and.w	r2, r3, #15
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	3304      	adds	r3, #4
 800433c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2200      	movs	r2, #0
 8004354:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004356:	7afb      	ldrb	r3, [r7, #11]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	b2da      	uxtb	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d102      	bne.n	8004370 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004370:	7afb      	ldrb	r3, [r7, #11]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	6979      	ldr	r1, [r7, #20]
 8004388:	f003 fc1a 	bl	8007bc0 <USB_EP0StartXfer>
 800438c:	e008      	b.n	80043a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	f003 f9cc 	bl	8007738 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	460b      	mov	r3, r1
 80043b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	f003 020f 	and.w	r2, r3, #15
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	3338      	adds	r3, #56	; 0x38
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	3304      	adds	r3, #4
 80043d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2201      	movs	r2, #1
 80043e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ea:	7afb      	ldrb	r3, [r7, #11]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	f003 fbd0 	bl	8007bc0 <USB_EP0StartXfer>
 8004420:	e008      	b.n	8004434 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	f003 f982 	bl	8007738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 020f 	and.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d901      	bls.n	800445c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e050      	b.n	80044fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800445c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	da0f      	bge.n	8004484 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 020f 	and.w	r2, r3, #15
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	3338      	adds	r3, #56	; 0x38
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	3304      	adds	r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	705a      	strb	r2, [r3, #1]
 8004482:	e00d      	b.n	80044a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_PCD_EP_SetStall+0x82>
 80044bc:	2302      	movs	r3, #2
 80044be:	e01e      	b.n	80044fe <HAL_PCD_EP_SetStall+0xc0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68f9      	ldr	r1, [r7, #12]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f003 fd27 	bl	8007f22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	b2d9      	uxtb	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044ee:	461a      	mov	r2, r3
 80044f0:	f003 ff18 	bl	8008324 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d901      	bls.n	8004524 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e042      	b.n	80045aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004528:	2b00      	cmp	r3, #0
 800452a:	da0f      	bge.n	800454c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 020f 	and.w	r2, r3, #15
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	3338      	adds	r3, #56	; 0x38
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	4413      	add	r3, r2
 8004540:	3304      	adds	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	705a      	strb	r2, [r3, #1]
 800454a:	e00f      	b.n	800456c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	3304      	adds	r3, #4
 8004564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_PCD_EP_ClrStall+0x86>
 8004588:	2302      	movs	r3, #2
 800458a:	e00e      	b.n	80045aa <HAL_PCD_EP_ClrStall+0xa4>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	4618      	mov	r0, r3
 800459c:	f003 fd2f 	bl	8007ffe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b08a      	sub	sp, #40	; 0x28
 80045b6:	af02      	add	r7, sp, #8
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	3338      	adds	r3, #56	; 0x38
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	3304      	adds	r3, #4
 80045d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d901      	bls.n	80045ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06c      	b.n	80046c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d902      	bls.n	8004606 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3303      	adds	r3, #3
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800460e:	e02b      	b.n	8004668 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	429a      	cmp	r2, r3
 8004624:	d902      	bls.n	800462c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	3303      	adds	r3, #3
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68d9      	ldr	r1, [r3, #12]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004644:	b2db      	uxtb	r3, r3
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	4603      	mov	r3, r0
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f003 fc0b 	bl	8007e66 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	441a      	add	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	699a      	ldr	r2, [r3, #24]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	441a      	add	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	b29b      	uxth	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	429a      	cmp	r2, r3
 800467c:	d809      	bhi.n	8004692 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004686:	429a      	cmp	r2, r3
 8004688:	d203      	bcs.n	8004692 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1be      	bne.n	8004610 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	429a      	cmp	r2, r3
 800469c:	d811      	bhi.n	80046c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	2201      	movs	r2, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	43db      	mvns	r3, r3
 80046b8:	6939      	ldr	r1, [r7, #16]
 80046ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046be:	4013      	ands	r3, r2
 80046c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	333c      	adds	r3, #60	; 0x3c
 80046e4:	3304      	adds	r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	f040 80a0 	bne.w	8004844 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d015      	beq.n	800473a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a72      	ldr	r2, [pc, #456]	; (80048dc <PCD_EP_OutXfrComplete_int+0x210>)
 8004712:	4293      	cmp	r3, r2
 8004714:	f240 80dd 	bls.w	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80d7 	beq.w	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	461a      	mov	r2, r3
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	6093      	str	r3, [r2, #8]
 8004738:	e0cb      	b.n	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	461a      	mov	r2, r3
 8004752:	2320      	movs	r3, #32
 8004754:	6093      	str	r3, [r2, #8]
 8004756:	e0bc      	b.n	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 80b7 	bne.w	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <PCD_EP_OutXfrComplete_int+0x210>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d90f      	bls.n	800478c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	461a      	mov	r2, r3
 8004784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004788:	6093      	str	r3, [r2, #8]
 800478a:	e0a2      	b.n	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800479e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	0159      	lsls	r1, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	440b      	add	r3, r1
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4403      	add	r3, r0
 80047c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4403      	add	r3, r0
 80047ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4419      	add	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4403      	add	r3, r0
 8004800:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004804:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d114      	bne.n	8004836 <PCD_EP_OutXfrComplete_int+0x16a>
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800482e:	461a      	mov	r2, r3
 8004830:	2101      	movs	r1, #1
 8004832:	f003 fd77 	bl	8008324 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	4619      	mov	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f005 fad5 	bl	8009dec <HAL_PCD_DataOutStageCallback>
 8004842:	e046      	b.n	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d124      	bne.n	8004896 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004868:	6093      	str	r3, [r2, #8]
 800486a:	e032      	b.n	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	461a      	mov	r2, r3
 8004884:	2320      	movs	r3, #32
 8004886:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f005 faac 	bl	8009dec <HAL_PCD_DataOutStageCallback>
 8004894:	e01d      	b.n	80048d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048be:	461a      	mov	r2, r3
 80048c0:	2100      	movs	r1, #0
 80048c2:	f003 fd2f 	bl	8008324 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f005 fa8d 	bl	8009dec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	4f54300a 	.word	0x4f54300a
 80048e0:	4f54310a 	.word	0x4f54310a

080048e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	333c      	adds	r3, #60	; 0x3c
 80048fc:	3304      	adds	r3, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <PCD_EP_OutSetupPacket_int+0x88>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d90e      	bls.n	8004938 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	461a      	mov	r2, r3
 8004932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004936:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f005 fa45 	bl	8009dc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <PCD_EP_OutSetupPacket_int+0x88>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d90c      	bls.n	8004960 <PCD_EP_OutSetupPacket_int+0x7c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d108      	bne.n	8004960 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004958:	461a      	mov	r2, r3
 800495a:	2101      	movs	r1, #1
 800495c:	f003 fce2 	bl	8008324 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	4f54300a 	.word	0x4f54300a

08004970 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
 800497c:	4613      	mov	r3, r2
 800497e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800498e:	883b      	ldrh	r3, [r7, #0]
 8004990:	0419      	lsls	r1, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	430a      	orrs	r2, r1
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
 800499c:	e028      	b.n	80049f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	4413      	add	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e00d      	b.n	80049ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	3340      	adds	r3, #64	; 0x40
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	3301      	adds	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3ec      	bcc.n	80049b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049d8:	883b      	ldrh	r3, [r7, #0]
 80049da:	0418      	lsls	r0, r3, #16
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	4302      	orrs	r2, r0
 80049e8:	3340      	adds	r3, #64	; 0x40
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a52:	f043 0303 	orr.w	r3, r3, #3
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cc      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b68      	ldr	r3, [pc, #416]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d90c      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0b8      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004abc:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	494d      	ldr	r1, [pc, #308]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d044      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d119      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b26:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e06f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b36:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e067      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 0203 	bic.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4934      	ldr	r1, [pc, #208]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b58:	f7fe f83a 	bl	8002bd0 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b60:	f7fe f836 	bl	8002bd0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e04f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 020c 	and.w	r2, r3, #12
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d1eb      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d20c      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e032      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4916      	ldr	r1, [pc, #88]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	490e      	ldr	r1, [pc, #56]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bee:	f000 fb7f 	bl	80052f0 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	490a      	ldr	r1, [pc, #40]	; (8004c28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd ff9a 	bl	8002b48 <HAL_InitTick>

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023c00 	.word	0x40023c00
 8004c24:	40023800 	.word	0x40023800
 8004c28:	08010cfc 	.word	0x08010cfc
 8004c2c:	20000000 	.word	0x20000000
 8004c30:	20000004 	.word	0x20000004

08004c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000000 	.word	0x20000000

08004c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c50:	f7ff fff0 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0a9b      	lsrs	r3, r3, #10
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	08010d0c 	.word	0x08010d0c

08004c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c78:	f7ff ffdc 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0b5b      	lsrs	r3, r3, #13
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40023800 	.word	0x40023800
 8004c98:	08010d0c 	.word	0x08010d0c

08004c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	496c      	ldr	r1, [pc, #432]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d010      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d02:	4b64      	ldr	r3, [pc, #400]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	4960      	ldr	r1, [pc, #384]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004d20:	2301      	movs	r3, #1
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d017      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d30:	4b58      	ldr	r3, [pc, #352]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4955      	ldr	r1, [pc, #340]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d017      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d6c:	4b49      	ldr	r3, [pc, #292]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	4946      	ldr	r1, [pc, #280]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 808a 	beq.w	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	4a38      	ldr	r2, [pc, #224]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dc6:	4b34      	ldr	r3, [pc, #208]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a33      	ldr	r2, [pc, #204]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dd2:	f7fd fefd 	bl	8002bd0 <HAL_GetTick>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dda:	f7fd fef9 	bl	8002bd0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e278      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dec:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df8:	4b26      	ldr	r3, [pc, #152]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e00:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d02f      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d028      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e20:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e32:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d114      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e3e:	f7fd fec7 	bl	8002bd0 <HAL_GetTick>
 8004e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fd fec3 	bl	8002bd0 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e240      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ee      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e74:	d114      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	4902      	ldr	r1, [pc, #8]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]
 8004e90:	e00c      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	42470e40 	.word	0x42470e40
 8004ea0:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a49      	ldr	r2, [pc, #292]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ea6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004eaa:	6093      	str	r3, [r2, #8]
 8004eac:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb8:	4944      	ldr	r1, [pc, #272]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004ed0:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004ed2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004ee0:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	4937      	ldr	r1, [pc, #220]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f02:	4b32      	ldr	r3, [pc, #200]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f08:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f10:	492e      	ldr	r1, [pc, #184]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d011      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f24:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	4926      	ldr	r1, [pc, #152]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f42:	d101      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004f44:	2301      	movs	r3, #1
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	491a      	ldr	r1, [pc, #104]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	4911      	ldr	r1, [pc, #68]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f94:	d101      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004f96:	2301      	movs	r3, #1
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d005      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa8:	f040 80ff 	bne.w	80051aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb2:	f7fd fe0d 	bl	8002bd0 <HAL_GetTick>
 8004fb6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb8:	e00e      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fba:	f7fd fe09 	bl	8002bd0 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d907      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e188      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	424711e0 	.word	0x424711e0
 8004fd4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd8:	4b7e      	ldr	r3, [pc, #504]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ea      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005000:	2b00      	cmp	r3, #0
 8005002:	d028      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d124      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800500c:	4b71      	ldr	r3, [pc, #452]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800500e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005012:	0c1b      	lsrs	r3, r3, #16
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	3301      	adds	r3, #1
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800501e:	4b6d      	ldr	r3, [pc, #436]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005024:	0e1b      	lsrs	r3, r3, #24
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	431a      	orrs	r2, r3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	3b01      	subs	r3, #1
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	431a      	orrs	r2, r3
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	4961      	ldr	r1, [pc, #388]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005074:	2b00      	cmp	r3, #0
 8005076:	d035      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005080:	d130      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005082:	4b54      	ldr	r3, [pc, #336]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	3301      	adds	r3, #1
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005094:	4b4f      	ldr	r3, [pc, #316]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509a:	0f1b      	lsrs	r3, r3, #28
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	019b      	lsls	r3, r3, #6
 80050ac:	431a      	orrs	r2, r3
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	431a      	orrs	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	071b      	lsls	r3, r3, #28
 80050c4:	4943      	ldr	r1, [pc, #268]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050cc:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d2:	f023 021f 	bic.w	r2, r3, #31
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	3b01      	subs	r3, #1
 80050dc:	493d      	ldr	r1, [pc, #244]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d029      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f8:	d124      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80050fa:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	3301      	adds	r3, #1
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800510c:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800510e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005112:	0f1b      	lsrs	r3, r3, #28
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	019b      	lsls	r3, r3, #6
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	3b01      	subs	r3, #1
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	431a      	orrs	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	071b      	lsls	r3, r3, #28
 800513c:	4925      	ldr	r1, [pc, #148]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514c:	2b00      	cmp	r3, #0
 800514e:	d016      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	019b      	lsls	r3, r3, #6
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	3b01      	subs	r3, #1
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	061b      	lsls	r3, r3, #24
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	071b      	lsls	r3, r3, #28
 8005176:	4917      	ldr	r1, [pc, #92]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005184:	f7fd fd24 	bl	8002bd0 <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800518c:	f7fd fd20 	bl	8002bd0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e09f      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 8095 	bne.w	80052dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fd0a 	bl	8002bd0 <HAL_GetTick>
 80051bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051be:	e00f      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051c0:	f7fd fd06 	bl	8002bd0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d908      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e085      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	42470068 	.word	0x42470068
 80051dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ec:	d0e8      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800520a:	2b00      	cmp	r3, #0
 800520c:	d02b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005212:	2b00      	cmp	r3, #0
 8005214:	d127      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	3301      	adds	r3, #1
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	431a      	orrs	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	3b01      	subs	r3, #1
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	061b      	lsls	r3, r3, #24
 8005244:	4928      	ldr	r1, [pc, #160]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800524c:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800524e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005252:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	3b01      	subs	r3, #1
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	4922      	ldr	r1, [pc, #136]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01d      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527a:	d118      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800527c:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	0e1b      	lsrs	r3, r3, #24
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	019b      	lsls	r3, r3, #6
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	3b01      	subs	r3, #1
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	4910      	ldr	r1, [pc, #64]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052b4:	f7fd fc8c 	bl	8002bd0 <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052bc:	f7fd fc88 	bl	8002bd0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e007      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052da:	d1ef      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800
 80052ec:	42470070 	.word	0x42470070

080052f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f4:	b088      	sub	sp, #32
 80052f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800530c:	4bce      	ldr	r3, [pc, #824]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b0c      	cmp	r3, #12
 8005316:	f200 818d 	bhi.w	8005634 <HAL_RCC_GetSysClockFreq+0x344>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <HAL_RCC_GetSysClockFreq+0x30>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005355 	.word	0x08005355
 8005324:	08005635 	.word	0x08005635
 8005328:	08005635 	.word	0x08005635
 800532c:	08005635 	.word	0x08005635
 8005330:	0800535b 	.word	0x0800535b
 8005334:	08005635 	.word	0x08005635
 8005338:	08005635 	.word	0x08005635
 800533c:	08005635 	.word	0x08005635
 8005340:	08005361 	.word	0x08005361
 8005344:	08005635 	.word	0x08005635
 8005348:	08005635 	.word	0x08005635
 800534c:	08005635 	.word	0x08005635
 8005350:	080054d5 	.word	0x080054d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005354:	4bbd      	ldr	r3, [pc, #756]	; (800564c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005356:	61bb      	str	r3, [r7, #24]
       break;
 8005358:	e16f      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800535a:	4bbd      	ldr	r3, [pc, #756]	; (8005650 <HAL_RCC_GetSysClockFreq+0x360>)
 800535c:	61bb      	str	r3, [r7, #24]
      break;
 800535e:	e16c      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005360:	4bb9      	ldr	r3, [pc, #740]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005368:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800536a:	4bb7      	ldr	r3, [pc, #732]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d053      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4bb4      	ldr	r3, [pc, #720]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	099b      	lsrs	r3, r3, #6
 800537c:	461a      	mov	r2, r3
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	ea02 0400 	and.w	r4, r2, r0
 800538e:	603c      	str	r4, [r7, #0]
 8005390:	400b      	ands	r3, r1
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005398:	4620      	mov	r0, r4
 800539a:	4629      	mov	r1, r5
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	014b      	lsls	r3, r1, #5
 80053a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053aa:	0142      	lsls	r2, r0, #5
 80053ac:	4610      	mov	r0, r2
 80053ae:	4619      	mov	r1, r3
 80053b0:	4623      	mov	r3, r4
 80053b2:	1ac0      	subs	r0, r0, r3
 80053b4:	462b      	mov	r3, r5
 80053b6:	eb61 0103 	sbc.w	r1, r1, r3
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	018b      	lsls	r3, r1, #6
 80053c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053c8:	0182      	lsls	r2, r0, #6
 80053ca:	1a12      	subs	r2, r2, r0
 80053cc:	eb63 0301 	sbc.w	r3, r3, r1
 80053d0:	f04f 0000 	mov.w	r0, #0
 80053d4:	f04f 0100 	mov.w	r1, #0
 80053d8:	00d9      	lsls	r1, r3, #3
 80053da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053de:	00d0      	lsls	r0, r2, #3
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4621      	mov	r1, r4
 80053e6:	1852      	adds	r2, r2, r1
 80053e8:	4629      	mov	r1, r5
 80053ea:	eb43 0101 	adc.w	r1, r3, r1
 80053ee:	460b      	mov	r3, r1
 80053f0:	f04f 0000 	mov.w	r0, #0
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	0259      	lsls	r1, r3, #9
 80053fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053fe:	0250      	lsls	r0, r2, #9
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	461a      	mov	r2, r3
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	f7fb fc06 	bl	8000c20 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4613      	mov	r3, r2
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e04c      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541e:	4b8a      	ldr	r3, [pc, #552]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	ea02 0a00 	and.w	sl, r2, r0
 8005436:	ea03 0b01 	and.w	fp, r3, r1
 800543a:	4650      	mov	r0, sl
 800543c:	4659      	mov	r1, fp
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	014b      	lsls	r3, r1, #5
 8005448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800544c:	0142      	lsls	r2, r0, #5
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	ebb0 000a 	subs.w	r0, r0, sl
 8005456:	eb61 010b 	sbc.w	r1, r1, fp
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	018b      	lsls	r3, r1, #6
 8005464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005468:	0182      	lsls	r2, r0, #6
 800546a:	1a12      	subs	r2, r2, r0
 800546c:	eb63 0301 	sbc.w	r3, r3, r1
 8005470:	f04f 0000 	mov.w	r0, #0
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	00d9      	lsls	r1, r3, #3
 800547a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547e:	00d0      	lsls	r0, r2, #3
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	eb12 020a 	adds.w	r2, r2, sl
 8005488:	eb43 030b 	adc.w	r3, r3, fp
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	0299      	lsls	r1, r3, #10
 8005496:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800549a:	0290      	lsls	r0, r2, #10
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f7fb fbb8 	bl	8000c20 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b8:	4b63      	ldr	r3, [pc, #396]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	3301      	adds	r3, #1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	61bb      	str	r3, [r7, #24]
      break;
 80054d2:	e0b2      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d4:	4b5c      	ldr	r3, [pc, #368]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054de:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d04d      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ea:	4b57      	ldr	r3, [pc, #348]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	ea02 0800 	and.w	r8, r2, r0
 8005502:	ea03 0901 	and.w	r9, r3, r1
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	014b      	lsls	r3, r1, #5
 8005514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005518:	0142      	lsls	r2, r0, #5
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	ebb0 0008 	subs.w	r0, r0, r8
 8005522:	eb61 0109 	sbc.w	r1, r1, r9
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	018b      	lsls	r3, r1, #6
 8005530:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005534:	0182      	lsls	r2, r0, #6
 8005536:	1a12      	subs	r2, r2, r0
 8005538:	eb63 0301 	sbc.w	r3, r3, r1
 800553c:	f04f 0000 	mov.w	r0, #0
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	00d9      	lsls	r1, r3, #3
 8005546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800554a:	00d0      	lsls	r0, r2, #3
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	eb12 0208 	adds.w	r2, r2, r8
 8005554:	eb43 0309 	adc.w	r3, r3, r9
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	0259      	lsls	r1, r3, #9
 8005562:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005566:	0250      	lsls	r0, r2, #9
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	461a      	mov	r2, r3
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	f7fb fb52 	bl	8000c20 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e04a      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005586:	4b30      	ldr	r3, [pc, #192]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	099b      	lsrs	r3, r3, #6
 800558c:	461a      	mov	r2, r3
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	ea02 0400 	and.w	r4, r2, r0
 800559e:	ea03 0501 	and.w	r5, r3, r1
 80055a2:	4620      	mov	r0, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	014b      	lsls	r3, r1, #5
 80055b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055b4:	0142      	lsls	r2, r0, #5
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	1b00      	subs	r0, r0, r4
 80055bc:	eb61 0105 	sbc.w	r1, r1, r5
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	018b      	lsls	r3, r1, #6
 80055ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055ce:	0182      	lsls	r2, r0, #6
 80055d0:	1a12      	subs	r2, r2, r0
 80055d2:	eb63 0301 	sbc.w	r3, r3, r1
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	00d9      	lsls	r1, r3, #3
 80055e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e4:	00d0      	lsls	r0, r2, #3
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	1912      	adds	r2, r2, r4
 80055ec:	eb45 0303 	adc.w	r3, r5, r3
 80055f0:	f04f 0000 	mov.w	r0, #0
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	0299      	lsls	r1, r3, #10
 80055fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055fe:	0290      	lsls	r0, r2, #10
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	f7fb fb06 	bl	8000c20 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <HAL_RCC_GetSysClockFreq+0x358>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	0f1b      	lsrs	r3, r3, #28
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	61bb      	str	r3, [r7, #24]
      break;
 8005632:	e002      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005636:	61bb      	str	r3, [r7, #24]
      break;
 8005638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563a:	69bb      	ldr	r3, [r7, #24]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800
 800564c:	00f42400 	.word	0x00f42400
 8005650:	007a1200 	.word	0x007a1200

08005654 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e28d      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8083 	beq.w	800577a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005674:	4b94      	ldr	r3, [pc, #592]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b04      	cmp	r3, #4
 800567e:	d019      	beq.n	80056b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005680:	4b91      	ldr	r3, [pc, #580]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005688:	2b08      	cmp	r3, #8
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800568c:	4b8e      	ldr	r3, [pc, #568]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005698:	d00c      	beq.n	80056b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800569a:	4b8b      	ldr	r3, [pc, #556]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d112      	bne.n	80056cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a6:	4b88      	ldr	r3, [pc, #544]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b2:	d10b      	bne.n	80056cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b4:	4b84      	ldr	r3, [pc, #528]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05b      	beq.n	8005778 <HAL_RCC_OscConfig+0x124>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d157      	bne.n	8005778 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e25a      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d106      	bne.n	80056e4 <HAL_RCC_OscConfig+0x90>
 80056d6:	4b7c      	ldr	r3, [pc, #496]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7b      	ldr	r2, [pc, #492]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e01d      	b.n	8005720 <HAL_RCC_OscConfig+0xcc>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0xb4>
 80056ee:	4b76      	ldr	r3, [pc, #472]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a75      	ldr	r2, [pc, #468]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b73      	ldr	r3, [pc, #460]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a72      	ldr	r2, [pc, #456]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0xcc>
 8005708:	4b6f      	ldr	r3, [pc, #444]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a6e      	ldr	r2, [pc, #440]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800570e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b6c      	ldr	r3, [pc, #432]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6b      	ldr	r2, [pc, #428]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd fa52 	bl	8002bd0 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005730:	f7fd fa4e 	bl	8002bd0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e21f      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b61      	ldr	r3, [pc, #388]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0xdc>
 800574e:	e014      	b.n	800577a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fd fa3e 	bl	8002bd0 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005758:	f7fd fa3a 	bl	8002bd0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	; 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e20b      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	4b57      	ldr	r3, [pc, #348]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x104>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d06f      	beq.n	8005866 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005786:	4b50      	ldr	r3, [pc, #320]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005792:	4b4d      	ldr	r3, [pc, #308]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800579a:	2b08      	cmp	r3, #8
 800579c:	d105      	bne.n	80057aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800579e:	4b4a      	ldr	r3, [pc, #296]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057aa:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d11c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b6:	4b44      	ldr	r3, [pc, #272]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d116      	bne.n	80057f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c2:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_RCC_OscConfig+0x186>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e1d3      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057da:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4937      	ldr	r1, [pc, #220]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	e03a      	b.n	8005866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f8:	4b34      	ldr	r3, [pc, #208]	; (80058cc <HAL_RCC_OscConfig+0x278>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fd f9e7 	bl	8002bd0 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005806:	f7fd f9e3 	bl	8002bd0 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1b4      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4925      	ldr	r1, [pc, #148]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
 8005838:	e015      	b.n	8005866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <HAL_RCC_OscConfig+0x278>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fd f9c6 	bl	8002bd0 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005848:	f7fd f9c2 	bl	8002bd0 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e193      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d036      	beq.n	80058e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_RCC_OscConfig+0x27c>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fd f9a6 	bl	8002bd0 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005888:	f7fd f9a2 	bl	8002bd0 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e173      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 800589c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x234>
 80058a6:	e01b      	b.n	80058e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_RCC_OscConfig+0x27c>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ae:	f7fd f98f 	bl	8002bd0 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b4:	e00e      	b.n	80058d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b6:	f7fd f98b 	bl	8002bd0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d907      	bls.n	80058d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e15c      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
 80058c8:	40023800 	.word	0x40023800
 80058cc:	42470000 	.word	0x42470000
 80058d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d4:	4b8a      	ldr	r3, [pc, #552]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80058d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ea      	bne.n	80058b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8097 	beq.w	8005a1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f2:	4b83      	ldr	r3, [pc, #524]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	4b7f      	ldr	r3, [pc, #508]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	4a7e      	ldr	r2, [pc, #504]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	6413      	str	r3, [r2, #64]	; 0x40
 800590e:	4b7c      	ldr	r3, [pc, #496]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591e:	4b79      	ldr	r3, [pc, #484]	; (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d118      	bne.n	800595c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592a:	4b76      	ldr	r3, [pc, #472]	; (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a75      	ldr	r2, [pc, #468]	; (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005936:	f7fd f94b 	bl	8002bd0 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fd f947 	bl	8002bd0 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e118      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	4b6c      	ldr	r3, [pc, #432]	; (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d106      	bne.n	8005972 <HAL_RCC_OscConfig+0x31e>
 8005964:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a65      	ldr	r2, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	e01c      	b.n	80059ac <HAL_RCC_OscConfig+0x358>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b05      	cmp	r3, #5
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0x340>
 800597a:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	4a60      	ldr	r2, [pc, #384]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	6713      	str	r3, [r2, #112]	; 0x70
 8005986:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	4a5d      	ldr	r2, [pc, #372]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6713      	str	r3, [r2, #112]	; 0x70
 8005992:	e00b      	b.n	80059ac <HAL_RCC_OscConfig+0x358>
 8005994:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a59      	ldr	r2, [pc, #356]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	4b57      	ldr	r3, [pc, #348]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a4:	4a56      	ldr	r2, [pc, #344]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80059a6:	f023 0304 	bic.w	r3, r3, #4
 80059aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fd f90c 	bl	8002bd0 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ba:	e00a      	b.n	80059d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059bc:	f7fd f908 	bl	8002bd0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e0d7      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d2:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0ee      	beq.n	80059bc <HAL_RCC_OscConfig+0x368>
 80059de:	e014      	b.n	8005a0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fd f8f6 	bl	8002bd0 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e8:	f7fd f8f2 	bl	8002bd0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0c1      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fe:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ee      	bne.n	80059e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a10:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	4a3a      	ldr	r2, [pc, #232]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80ad 	beq.w	8005b80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d060      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d145      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <HAL_RCC_OscConfig+0x4b4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd f8c6 	bl	8002bd0 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fd f8c2 	bl	8002bd0 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e093      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	4b29      	ldr	r3, [pc, #164]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	061b      	lsls	r3, r3, #24
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	491b      	ldr	r1, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCC_OscConfig+0x4b4>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fd f897 	bl	8002bd0 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fd f893 	bl	8002bd0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e064      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x452>
 8005ac4:	e05c      	b.n	8005b80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <HAL_RCC_OscConfig+0x4b4>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fd f880 	bl	8002bd0 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fd f87c 	bl	8002bd0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e04d      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x480>
 8005af2:	e045      	b.n	8005b80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e040      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40007000 	.word	0x40007000
 8005b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b0c:	4b1f      	ldr	r3, [pc, #124]	; (8005b8c <HAL_RCC_OscConfig+0x538>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d030      	beq.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d129      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d122      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d119      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	3b01      	subs	r3, #1
 8005b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d10f      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800

08005b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e07b      	b.n	8005c9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb2:	d009      	beq.n	8005bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	61da      	str	r2, [r3, #28]
 8005bba:	e005      	b.n	8005bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fe68 	bl	80028b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	f003 0104 	and.w	r1, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0210 	and.w	r2, r3, #16
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b088      	sub	sp, #32
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_SPI_Transmit+0x22>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e126      	b.n	8005f12 <HAL_SPI_Transmit+0x270>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ccc:	f7fc ff80 	bl	8002bd0 <HAL_GetTick>
 8005cd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ce6:	e10b      	b.n	8005f00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <HAL_SPI_Transmit+0x52>
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cf8:	e102      	b.n	8005f00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d40:	d10f      	bne.n	8005d62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d007      	beq.n	8005d80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d88:	d14b      	bne.n	8005e22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_SPI_Transmit+0xf6>
 8005d92:	8afb      	ldrh	r3, [r7, #22]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d13e      	bne.n	8005e16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dbc:	e02b      	b.n	8005e16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d112      	bne.n	8005df2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	86da      	strh	r2, [r3, #54]	; 0x36
 8005df0:	e011      	b.n	8005e16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df2:	f7fc feed 	bl	8002bd0 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d803      	bhi.n	8005e0a <HAL_SPI_Transmit+0x168>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d102      	bne.n	8005e10 <HAL_SPI_Transmit+0x16e>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e14:	e074      	b.n	8005f00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ce      	bne.n	8005dbe <HAL_SPI_Transmit+0x11c>
 8005e20:	e04c      	b.n	8005ebc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Transmit+0x18e>
 8005e2a:	8afb      	ldrh	r3, [r7, #22]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d140      	bne.n	8005eb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e56:	e02c      	b.n	8005eb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d113      	bne.n	8005e8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e8c:	e011      	b.n	8005eb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8e:	f7fc fe9f 	bl	8002bd0 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d803      	bhi.n	8005ea6 <HAL_SPI_Transmit+0x204>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d102      	bne.n	8005eac <HAL_SPI_Transmit+0x20a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eb0:	e026      	b.n	8005f00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1cd      	bne.n	8005e58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fbcb 	bl	800665c <SPI_EndRxTxTransaction>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e000      	b.n	8005f00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005efe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f36:	d112      	bne.n	8005f5e <HAL_SPI_Receive+0x44>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10e      	bne.n	8005f5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2204      	movs	r2, #4
 8005f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f8f1 	bl	800613c <HAL_SPI_TransmitReceive>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e0ea      	b.n	8006134 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_SPI_Receive+0x52>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e0e3      	b.n	8006134 <HAL_SPI_Receive+0x21a>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f74:	f7fc fe2c 	bl	8002bd0 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d002      	beq.n	8005f8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f86:	2302      	movs	r3, #2
 8005f88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f8a:	e0ca      	b.n	8006122 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Receive+0x7e>
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f9c:	e0c1      	b.n	8006122 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe4:	d10f      	bne.n	8006006 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006004:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d007      	beq.n	8006024 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006022:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d162      	bne.n	80060f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800602c:	e02e      	b.n	800608c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d115      	bne.n	8006068 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f103 020c 	add.w	r2, r3, #12
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006066:	e011      	b.n	800608c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006068:	f7fc fdb2 	bl	8002bd0 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d803      	bhi.n	8006080 <HAL_SPI_Receive+0x166>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d102      	bne.n	8006086 <HAL_SPI_Receive+0x16c>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	75fb      	strb	r3, [r7, #23]
          goto error;
 800608a:	e04a      	b.n	8006122 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1cb      	bne.n	800602e <HAL_SPI_Receive+0x114>
 8006096:	e031      	b.n	80060fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d113      	bne.n	80060ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	b292      	uxth	r2, r2
 80060b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060cc:	e011      	b.n	80060f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ce:	f7fc fd7f 	bl	8002bd0 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d803      	bhi.n	80060e6 <HAL_SPI_Receive+0x1cc>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d102      	bne.n	80060ec <HAL_SPI_Receive+0x1d2>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060f0:	e017      	b.n	8006122 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1cd      	bne.n	8006098 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fa45 	bl	8006590 <SPI_EndRxTransaction>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
 800611e:	e000      	b.n	8006122 <HAL_SPI_Receive+0x208>
  }

error :
 8006120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800614a:	2301      	movs	r3, #1
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x26>
 800615e:	2302      	movs	r3, #2
 8006160:	e18a      	b.n	8006478 <HAL_SPI_TransmitReceive+0x33c>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800616a:	f7fc fd31 	bl	8002bd0 <HAL_GetTick>
 800616e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006188:	2b01      	cmp	r3, #1
 800618a:	d00f      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x70>
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d107      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d103      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x68>
 800619c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d003      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061aa:	e15b      	b.n	8006464 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_SPI_TransmitReceive+0x82>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_SPI_TransmitReceive+0x82>
 80061b8:	887b      	ldrh	r3, [r7, #2]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061c4:	e14e      	b.n	8006464 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d003      	beq.n	80061da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2205      	movs	r2, #5
 80061d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	887a      	ldrh	r2, [r7, #2]
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	887a      	ldrh	r2, [r7, #2]
 80061f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	887a      	ldrh	r2, [r7, #2]
 80061fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	887a      	ldrh	r2, [r7, #2]
 8006202:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621a:	2b40      	cmp	r3, #64	; 0x40
 800621c:	d007      	beq.n	800622e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006236:	d178      	bne.n	800632a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_TransmitReceive+0x10a>
 8006240:	8b7b      	ldrh	r3, [r7, #26]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d166      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	881a      	ldrh	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	1c9a      	adds	r2, r3, #2
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626a:	e053      	b.n	8006314 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d11b      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x176>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d016      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x176>
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	2b01      	cmp	r3, #1
 8006288:	d113      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	881a      	ldrh	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	1c9a      	adds	r2, r3, #2
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d119      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x1b8>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	b292      	uxth	r2, r2
 80062d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	1c9a      	adds	r2, r3, #2
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f0:	2301      	movs	r3, #1
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062f4:	f7fc fc6c 	bl	8002bd0 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006300:	429a      	cmp	r2, r3
 8006302:	d807      	bhi.n	8006314 <HAL_SPI_TransmitReceive+0x1d8>
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d003      	beq.n	8006314 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006312:	e0a7      	b.n	8006464 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1a6      	bne.n	800626c <HAL_SPI_TransmitReceive+0x130>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1a1      	bne.n	800626c <HAL_SPI_TransmitReceive+0x130>
 8006328:	e07c      	b.n	8006424 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x1fc>
 8006332:	8b7b      	ldrh	r3, [r7, #26]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d16b      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800635e:	e057      	b.n	8006410 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d11c      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x26c>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x26c>
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d114      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d119      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x2ae>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d014      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063e6:	2301      	movs	r3, #1
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063ea:	f7fc fbf1 	bl	8002bd0 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d803      	bhi.n	8006402 <HAL_SPI_TransmitReceive+0x2c6>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d102      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x2cc>
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800640e:	e029      	b.n	8006464 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1a2      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x224>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d19d      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f917 	bl	800665c <SPI_EndRxTxTransaction>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006440:	e010      	b.n	8006464 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e000      	b.n	8006464 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006478:	4618      	mov	r0, r3
 800647a:	3730      	adds	r7, #48	; 0x30
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4613      	mov	r3, r2
 800648e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006490:	f7fc fb9e 	bl	8002bd0 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	4413      	add	r3, r2
 800649e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064a0:	f7fc fb96 	bl	8002bd0 <HAL_GetTick>
 80064a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	015b      	lsls	r3, r3, #5
 80064ac:	0d1b      	lsrs	r3, r3, #20
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064b6:	e054      	b.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d050      	beq.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064c0:	f7fc fb86 	bl	8002bd0 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d902      	bls.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d13d      	bne.n	8006552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ee:	d111      	bne.n	8006514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f8:	d004      	beq.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006502:	d107      	bne.n	8006514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651c:	d10f      	bne.n	800653e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800653c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e017      	b.n	8006582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	3b01      	subs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d19b      	bne.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000000 	.word	0x20000000

08006590 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a4:	d111      	bne.n	80065ca <SPI_EndRxTransaction+0x3a>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ae:	d004      	beq.n	80065ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d107      	bne.n	80065ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d2:	d12a      	bne.n	800662a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065dc:	d012      	beq.n	8006604 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2200      	movs	r2, #0
 80065e6:	2180      	movs	r1, #128	; 0x80
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff ff49 	bl	8006480 <SPI_WaitFlagStateUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02d      	beq.n	8006650 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e026      	b.n	8006652 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	2101      	movs	r1, #1
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff ff36 	bl	8006480 <SPI_WaitFlagStateUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01a      	beq.n	8006650 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e013      	b.n	8006652 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	2101      	movs	r1, #1
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff ff23 	bl	8006480 <SPI_WaitFlagStateUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e000      	b.n	8006652 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006668:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <SPI_EndRxTxTransaction+0x7c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <SPI_EndRxTxTransaction+0x80>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	0d5b      	lsrs	r3, r3, #21
 8006674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006686:	d112      	bne.n	80066ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	2180      	movs	r1, #128	; 0x80
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fef4 	bl	8006480 <SPI_WaitFlagStateUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e00f      	b.n	80066ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d0f2      	beq.n	80066ae <SPI_EndRxTxTransaction+0x52>
 80066c8:	e000      	b.n	80066cc <SPI_EndRxTxTransaction+0x70>
        break;
 80066ca:	bf00      	nop
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000000 	.word	0x20000000
 80066dc:	165e9f81 	.word	0x165e9f81

080066e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e03f      	b.n	8006772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fc f91e 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	; 0x24
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f9a7 	bl	8006a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b08a      	sub	sp, #40	; 0x28
 800677e:	af02      	add	r7, sp, #8
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	d17c      	bne.n	8006894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_UART_Transmit+0x2c>
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e075      	b.n	8006896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_UART_Transmit+0x3e>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e06e      	b.n	8006896 <HAL_UART_Transmit+0x11c>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2221      	movs	r2, #33	; 0x21
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ce:	f7fc f9ff 	bl	8002bd0 <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d108      	bne.n	80067fc <HAL_UART_Transmit+0x82>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e003      	b.n	8006804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800680c:	e02a      	b.n	8006864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2200      	movs	r2, #0
 8006816:	2180      	movs	r1, #128	; 0x80
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f8e2 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e036      	b.n	8006896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800683c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	3302      	adds	r3, #2
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	e007      	b.n	8006856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	3301      	adds	r3, #1
 8006854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1cf      	bne.n	800680e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2200      	movs	r2, #0
 8006876:	2140      	movs	r1, #64	; 0x40
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f8b2 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e006      	b.n	8006896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3720      	adds	r7, #32
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b08a      	sub	sp, #40	; 0x28
 80068a2:	af02      	add	r7, sp, #8
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	f040 808c 	bne.w	80069d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Receive+0x2e>
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e084      	b.n	80069da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_UART_Receive+0x40>
 80068da:	2302      	movs	r3, #2
 80068dc:	e07d      	b.n	80069da <HAL_UART_Receive+0x13c>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2222      	movs	r2, #34	; 0x22
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068fa:	f7fc f969 	bl	8002bd0 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006914:	d108      	bne.n	8006928 <HAL_UART_Receive+0x8a>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	e003      	b.n	8006930 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006938:	e043      	b.n	80069c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	2120      	movs	r1, #32
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f84c 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e042      	b.n	80069da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	b29a      	uxth	r2, r3
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	3302      	adds	r3, #2
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e01f      	b.n	80069b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d007      	beq.n	800698e <HAL_UART_Receive+0xf0>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <HAL_UART_Receive+0xfe>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e008      	b.n	80069ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1b6      	bne.n	800693a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e000      	b.n	80069da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	e02c      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d028      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a02:	f7fc f8e5 	bl	8002bd0 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d21d      	bcs.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0201 	bic.w	r2, r2, #1
 8006a30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e00f      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d0c3      	beq.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	b09f      	sub	sp, #124	; 0x7c
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8e:	68d9      	ldr	r1, [r3, #12]
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	ea40 0301 	orr.w	r3, r0, r1
 8006a98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006abc:	f021 010c 	bic.w	r1, r1, #12
 8006ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	6999      	ldr	r1, [r3, #24]
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	ea40 0301 	orr.w	r3, r0, r1
 8006ae0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4bc5      	ldr	r3, [pc, #788]	; (8006dfc <UART_SetConfig+0x384>)
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d004      	beq.n	8006af6 <UART_SetConfig+0x7e>
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4bc3      	ldr	r3, [pc, #780]	; (8006e00 <UART_SetConfig+0x388>)
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d103      	bne.n	8006afe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006af6:	f7fe f8bd 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8006afa:	6778      	str	r0, [r7, #116]	; 0x74
 8006afc:	e002      	b.n	8006b04 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006afe:	f7fe f8a5 	bl	8004c4c <HAL_RCC_GetPCLK1Freq>
 8006b02:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0c:	f040 80b6 	bne.w	8006c7c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b12:	461c      	mov	r4, r3
 8006b14:	f04f 0500 	mov.w	r5, #0
 8006b18:	4622      	mov	r2, r4
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	6439      	str	r1, [r7, #64]	; 0x40
 8006b20:	415b      	adcs	r3, r3
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
 8006b24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b28:	1912      	adds	r2, r2, r4
 8006b2a:	eb45 0303 	adc.w	r3, r5, r3
 8006b2e:	f04f 0000 	mov.w	r0, #0
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	00d9      	lsls	r1, r3, #3
 8006b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b3c:	00d0      	lsls	r0, r2, #3
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	1911      	adds	r1, r2, r4
 8006b44:	6639      	str	r1, [r7, #96]	; 0x60
 8006b46:	416b      	adcs	r3, r5
 8006b48:	667b      	str	r3, [r7, #100]	; 0x64
 8006b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	1891      	adds	r1, r2, r2
 8006b56:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b58:	415b      	adcs	r3, r3
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b64:	f7fa f85c 	bl	8000c20 <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4ba5      	ldr	r3, [pc, #660]	; (8006e04 <UART_SetConfig+0x38c>)
 8006b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	011e      	lsls	r6, r3, #4
 8006b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b78:	461c      	mov	r4, r3
 8006b7a:	f04f 0500 	mov.w	r5, #0
 8006b7e:	4622      	mov	r2, r4
 8006b80:	462b      	mov	r3, r5
 8006b82:	1891      	adds	r1, r2, r2
 8006b84:	6339      	str	r1, [r7, #48]	; 0x30
 8006b86:	415b      	adcs	r3, r3
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b8e:	1912      	adds	r2, r2, r4
 8006b90:	eb45 0303 	adc.w	r3, r5, r3
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	f04f 0100 	mov.w	r1, #0
 8006b9c:	00d9      	lsls	r1, r3, #3
 8006b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ba2:	00d0      	lsls	r0, r2, #3
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	1911      	adds	r1, r2, r4
 8006baa:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bac:	416b      	adcs	r3, r5
 8006bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	1891      	adds	r1, r2, r2
 8006bbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bbe:	415b      	adcs	r3, r3
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bc6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bca:	f7fa f829 	bl	8000c20 <__aeabi_uldivmod>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4b8c      	ldr	r3, [pc, #560]	; (8006e04 <UART_SetConfig+0x38c>)
 8006bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd8:	095b      	lsrs	r3, r3, #5
 8006bda:	2164      	movs	r1, #100	; 0x64
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	3332      	adds	r3, #50	; 0x32
 8006be6:	4a87      	ldr	r2, [pc, #540]	; (8006e04 <UART_SetConfig+0x38c>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bf4:	441e      	add	r6, r3
 8006bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	1894      	adds	r4, r2, r2
 8006c04:	623c      	str	r4, [r7, #32]
 8006c06:	415b      	adcs	r3, r3
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c0e:	1812      	adds	r2, r2, r0
 8006c10:	eb41 0303 	adc.w	r3, r1, r3
 8006c14:	f04f 0400 	mov.w	r4, #0
 8006c18:	f04f 0500 	mov.w	r5, #0
 8006c1c:	00dd      	lsls	r5, r3, #3
 8006c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c22:	00d4      	lsls	r4, r2, #3
 8006c24:	4622      	mov	r2, r4
 8006c26:	462b      	mov	r3, r5
 8006c28:	1814      	adds	r4, r2, r0
 8006c2a:	653c      	str	r4, [r7, #80]	; 0x50
 8006c2c:	414b      	adcs	r3, r1
 8006c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	461a      	mov	r2, r3
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	1891      	adds	r1, r2, r2
 8006c3c:	61b9      	str	r1, [r7, #24]
 8006c3e:	415b      	adcs	r3, r3
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c4a:	f7f9 ffe9 	bl	8000c20 <__aeabi_uldivmod>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4b6c      	ldr	r3, [pc, #432]	; (8006e04 <UART_SetConfig+0x38c>)
 8006c54:	fba3 1302 	umull	r1, r3, r3, r2
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	2164      	movs	r1, #100	; 0x64
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	3332      	adds	r3, #50	; 0x32
 8006c66:	4a67      	ldr	r2, [pc, #412]	; (8006e04 <UART_SetConfig+0x38c>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	f003 0207 	and.w	r2, r3, #7
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4432      	add	r2, r6
 8006c78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c7a:	e0b9      	b.n	8006df0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c7e:	461c      	mov	r4, r3
 8006c80:	f04f 0500 	mov.w	r5, #0
 8006c84:	4622      	mov	r2, r4
 8006c86:	462b      	mov	r3, r5
 8006c88:	1891      	adds	r1, r2, r2
 8006c8a:	6139      	str	r1, [r7, #16]
 8006c8c:	415b      	adcs	r3, r3
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c94:	1912      	adds	r2, r2, r4
 8006c96:	eb45 0303 	adc.w	r3, r5, r3
 8006c9a:	f04f 0000 	mov.w	r0, #0
 8006c9e:	f04f 0100 	mov.w	r1, #0
 8006ca2:	00d9      	lsls	r1, r3, #3
 8006ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ca8:	00d0      	lsls	r0, r2, #3
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	eb12 0804 	adds.w	r8, r2, r4
 8006cb2:	eb43 0905 	adc.w	r9, r3, r5
 8006cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f04f 0100 	mov.w	r1, #0
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	008b      	lsls	r3, r1, #2
 8006cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cce:	0082      	lsls	r2, r0, #2
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	f7f9 ffa4 	bl	8000c20 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4b49      	ldr	r3, [pc, #292]	; (8006e04 <UART_SetConfig+0x38c>)
 8006cde:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	011e      	lsls	r6, r3, #4
 8006ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	1894      	adds	r4, r2, r2
 8006cf4:	60bc      	str	r4, [r7, #8]
 8006cf6:	415b      	adcs	r3, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cfe:	1812      	adds	r2, r2, r0
 8006d00:	eb41 0303 	adc.w	r3, r1, r3
 8006d04:	f04f 0400 	mov.w	r4, #0
 8006d08:	f04f 0500 	mov.w	r5, #0
 8006d0c:	00dd      	lsls	r5, r3, #3
 8006d0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d12:	00d4      	lsls	r4, r2, #3
 8006d14:	4622      	mov	r2, r4
 8006d16:	462b      	mov	r3, r5
 8006d18:	1814      	adds	r4, r2, r0
 8006d1a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d1c:	414b      	adcs	r3, r1
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f04f 0100 	mov.w	r1, #0
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	008b      	lsls	r3, r1, #2
 8006d34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d38:	0082      	lsls	r2, r0, #2
 8006d3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d3e:	f7f9 ff6f 	bl	8000c20 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4b2f      	ldr	r3, [pc, #188]	; (8006e04 <UART_SetConfig+0x38c>)
 8006d48:	fba3 1302 	umull	r1, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	2164      	movs	r1, #100	; 0x64
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	3332      	adds	r3, #50	; 0x32
 8006d5a:	4a2a      	ldr	r2, [pc, #168]	; (8006e04 <UART_SetConfig+0x38c>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d66:	441e      	add	r6, r3
 8006d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	1894      	adds	r4, r2, r2
 8006d76:	603c      	str	r4, [r7, #0]
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d80:	1812      	adds	r2, r2, r0
 8006d82:	eb41 0303 	adc.w	r3, r1, r3
 8006d86:	f04f 0400 	mov.w	r4, #0
 8006d8a:	f04f 0500 	mov.w	r5, #0
 8006d8e:	00dd      	lsls	r5, r3, #3
 8006d90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d94:	00d4      	lsls	r4, r2, #3
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	eb12 0a00 	adds.w	sl, r2, r0
 8006d9e:	eb43 0b01 	adc.w	fp, r3, r1
 8006da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	008b      	lsls	r3, r1, #2
 8006db6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dba:	0082      	lsls	r2, r0, #2
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	4659      	mov	r1, fp
 8006dc0:	f7f9 ff2e 	bl	8000c20 <__aeabi_uldivmod>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <UART_SetConfig+0x38c>)
 8006dca:	fba3 1302 	umull	r1, r3, r3, r2
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	2164      	movs	r1, #100	; 0x64
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	3332      	adds	r3, #50	; 0x32
 8006ddc:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <UART_SetConfig+0x38c>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4432      	add	r2, r6
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	377c      	adds	r7, #124	; 0x7c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40011000 	.word	0x40011000
 8006e00:	40011400 	.word	0x40011400
 8006e04:	51eb851f 	.word	0x51eb851f

08006e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e08:	b084      	sub	sp, #16
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	f107 001c 	add.w	r0, r7, #28
 8006e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d122      	bne.n	8006e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fac0 	bl	80083e0 <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	e01a      	b.n	8006e9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fab4 	bl	80083e0 <USB_CoreReset>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e8e:	e005      	b.n	8006e9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d10b      	bne.n	8006eba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f043 0206 	orr.w	r2, r3, #6
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f043 0220 	orr.w	r2, r3, #32
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec6:	b004      	add	sp, #16
 8006ec8:	4770      	bx	lr
	...

08006ecc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d165      	bne.n	8006fac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4a41      	ldr	r2, [pc, #260]	; (8006fe8 <USB_SetTurnaroundTime+0x11c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d906      	bls.n	8006ef6 <USB_SetTurnaroundTime+0x2a>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4a40      	ldr	r2, [pc, #256]	; (8006fec <USB_SetTurnaroundTime+0x120>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d202      	bcs.n	8006ef6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e062      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4a3c      	ldr	r2, [pc, #240]	; (8006fec <USB_SetTurnaroundTime+0x120>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d306      	bcc.n	8006f0c <USB_SetTurnaroundTime+0x40>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4a3b      	ldr	r2, [pc, #236]	; (8006ff0 <USB_SetTurnaroundTime+0x124>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d202      	bcs.n	8006f0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f06:	230e      	movs	r3, #14
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e057      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4a38      	ldr	r2, [pc, #224]	; (8006ff0 <USB_SetTurnaroundTime+0x124>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d306      	bcc.n	8006f22 <USB_SetTurnaroundTime+0x56>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4a37      	ldr	r2, [pc, #220]	; (8006ff4 <USB_SetTurnaroundTime+0x128>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d202      	bcs.n	8006f22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f1c:	230d      	movs	r3, #13
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e04c      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4a33      	ldr	r2, [pc, #204]	; (8006ff4 <USB_SetTurnaroundTime+0x128>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d306      	bcc.n	8006f38 <USB_SetTurnaroundTime+0x6c>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4a32      	ldr	r2, [pc, #200]	; (8006ff8 <USB_SetTurnaroundTime+0x12c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d802      	bhi.n	8006f38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f32:	230c      	movs	r3, #12
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e041      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4a2f      	ldr	r2, [pc, #188]	; (8006ff8 <USB_SetTurnaroundTime+0x12c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d906      	bls.n	8006f4e <USB_SetTurnaroundTime+0x82>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4a2e      	ldr	r2, [pc, #184]	; (8006ffc <USB_SetTurnaroundTime+0x130>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d802      	bhi.n	8006f4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f48:	230b      	movs	r3, #11
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	e036      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <USB_SetTurnaroundTime+0x130>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d906      	bls.n	8006f64 <USB_SetTurnaroundTime+0x98>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4a29      	ldr	r2, [pc, #164]	; (8007000 <USB_SetTurnaroundTime+0x134>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d802      	bhi.n	8006f64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f5e:	230a      	movs	r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	e02b      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4a26      	ldr	r2, [pc, #152]	; (8007000 <USB_SetTurnaroundTime+0x134>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d906      	bls.n	8006f7a <USB_SetTurnaroundTime+0xae>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4a25      	ldr	r2, [pc, #148]	; (8007004 <USB_SetTurnaroundTime+0x138>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d202      	bcs.n	8006f7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f74:	2309      	movs	r3, #9
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e020      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <USB_SetTurnaroundTime+0x138>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d306      	bcc.n	8006f90 <USB_SetTurnaroundTime+0xc4>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4a20      	ldr	r2, [pc, #128]	; (8007008 <USB_SetTurnaroundTime+0x13c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d802      	bhi.n	8006f90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e015      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <USB_SetTurnaroundTime+0x13c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d906      	bls.n	8006fa6 <USB_SetTurnaroundTime+0xda>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	; (800700c <USB_SetTurnaroundTime+0x140>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d202      	bcs.n	8006fa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fa0:	2307      	movs	r3, #7
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e00a      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006fa6:	2306      	movs	r3, #6
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e007      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fb2:	2309      	movs	r3, #9
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e001      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fb8:	2309      	movs	r3, #9
 8006fba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	00d8acbf 	.word	0x00d8acbf
 8006fec:	00e4e1c0 	.word	0x00e4e1c0
 8006ff0:	00f42400 	.word	0x00f42400
 8006ff4:	01067380 	.word	0x01067380
 8006ff8:	011a499f 	.word	0x011a499f
 8006ffc:	01312cff 	.word	0x01312cff
 8007000:	014ca43f 	.word	0x014ca43f
 8007004:	016e3600 	.word	0x016e3600
 8007008:	01a6ab1f 	.word	0x01a6ab1f
 800700c:	01e84800 	.word	0x01e84800

08007010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f043 0201 	orr.w	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f023 0201 	bic.w	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d106      	bne.n	8007080 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	e00b      	b.n	8007098 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e001      	b.n	8007098 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e003      	b.n	80070a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007098:	2032      	movs	r0, #50	; 0x32
 800709a:	f7fb fda5 	bl	8002be8 <HAL_Delay>

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070a8:	b084      	sub	sp, #16
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b086      	sub	sp, #24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	e009      	b.n	80070dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3340      	adds	r3, #64	; 0x40
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	3301      	adds	r3, #1
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b0e      	cmp	r3, #14
 80070e0:	d9f2      	bls.n	80070c8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11c      	bne.n	8007122 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070f6:	f043 0302 	orr.w	r3, r3, #2
 80070fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e005      	b.n	800712e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007134:	461a      	mov	r2, r3
 8007136:	2300      	movs	r3, #0
 8007138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	4619      	mov	r1, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007148:	461a      	mov	r2, r3
 800714a:	680b      	ldr	r3, [r1, #0]
 800714c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10c      	bne.n	800716e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f949 	bl	80073f4 <USB_SetDevSpeed>
 8007162:	e008      	b.n	8007176 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007164:	2101      	movs	r1, #1
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f944 	bl	80073f4 <USB_SetDevSpeed>
 800716c:	e003      	b.n	8007176 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800716e:	2103      	movs	r1, #3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f93f 	bl	80073f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007176:	2110      	movs	r1, #16
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8f3 	bl	8007364 <USB_FlushTxFifo>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f911 	bl	80073b0 <USB_FlushRxFifo>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	461a      	mov	r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	461a      	mov	r2, r3
 80071ac:	2300      	movs	r3, #0
 80071ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b6:	461a      	mov	r2, r3
 80071b8:	2300      	movs	r3, #0
 80071ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	e043      	b.n	800724a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d8:	d118      	bne.n	800720c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	461a      	mov	r2, r3
 80071ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	e013      	b.n	800721e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	461a      	mov	r2, r3
 8007204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	e008      	b.n	800721e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007218:	461a      	mov	r2, r3
 800721a:	2300      	movs	r3, #0
 800721c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	461a      	mov	r2, r3
 800722c:	2300      	movs	r3, #0
 800722e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	461a      	mov	r2, r3
 800723e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	3301      	adds	r3, #1
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d3b7      	bcc.n	80071c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	e043      	b.n	80072e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800726a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800726e:	d118      	bne.n	80072a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	461a      	mov	r2, r3
 8007284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	e013      	b.n	80072b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	461a      	mov	r2, r3
 800729a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	e008      	b.n	80072b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	461a      	mov	r2, r3
 80072b0:	2300      	movs	r3, #0
 80072b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	461a      	mov	r2, r3
 80072c2:	2300      	movs	r3, #0
 80072c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d2:	461a      	mov	r2, r3
 80072d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3301      	adds	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d3b7      	bcc.n	8007258 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007308:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2b00      	cmp	r3, #0
 800730e:	d105      	bne.n	800731c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f043 0210 	orr.w	r2, r3, #16
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699a      	ldr	r2, [r3, #24]
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <USB_DevInit+0x2b8>)
 8007322:	4313      	orrs	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f043 0208 	orr.w	r2, r3, #8
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800733a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733c:	2b01      	cmp	r3, #1
 800733e:	d107      	bne.n	8007350 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007348:	f043 0304 	orr.w	r3, r3, #4
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800735c:	b004      	add	sp, #16
 800735e:	4770      	bx	lr
 8007360:	803c3800 	.word	0x803c3800

08007364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	019b      	lsls	r3, r3, #6
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <USB_FlushTxFifo+0x48>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d901      	bls.n	8007390 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e006      	b.n	800739e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b20      	cmp	r3, #32
 800739a:	d0f0      	beq.n	800737e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	00030d40 	.word	0x00030d40

080073b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2210      	movs	r2, #16
 80073c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <USB_FlushRxFifo+0x40>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d901      	bls.n	80073d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e006      	b.n	80073e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b10      	cmp	r3, #16
 80073de:	d0f0      	beq.n	80073c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	00030d40 	.word	0x00030d40

080073f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007426:	b480      	push	{r7}
 8007428:	b087      	sub	sp, #28
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 0306 	and.w	r3, r3, #6
 800743e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e00a      	b.n	8007462 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d002      	beq.n	8007458 <USB_GetDevSpeed+0x32>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b06      	cmp	r3, #6
 8007456:	d102      	bne.n	800745e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007458:	2302      	movs	r3, #2
 800745a:	75fb      	strb	r3, [r7, #23]
 800745c:	e001      	b.n	8007462 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800745e:	230f      	movs	r3, #15
 8007460:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d13a      	bne.n	8007502 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	2101      	movs	r1, #1
 800749e:	fa01 f303 	lsl.w	r3, r1, r3
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	68f9      	ldr	r1, [r7, #12]
 80074a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d155      	bne.n	8007570 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	78db      	ldrb	r3, [r3, #3]
 80074de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	059b      	lsls	r3, r3, #22
 80074e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074e8:	4313      	orrs	r3, r2
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e036      	b.n	8007570 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	2101      	movs	r1, #1
 8007514:	fa01 f303 	lsl.w	r3, r1, r3
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	68f9      	ldr	r1, [r7, #12]
 800751c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007520:	4313      	orrs	r3, r2
 8007522:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11a      	bne.n	8007570 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	78db      	ldrb	r3, [r3, #3]
 8007554:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007556:	430b      	orrs	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d161      	bne.n	8007660 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b2:	d11f      	bne.n	80075f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	2101      	movs	r1, #1
 8007606:	fa01 f303 	lsl.w	r3, r1, r3
 800760a:	b29b      	uxth	r3, r3
 800760c:	43db      	mvns	r3, r3
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007614:	4013      	ands	r3, r2
 8007616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	2101      	movs	r1, #1
 800762a:	fa01 f303 	lsl.w	r3, r1, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	43db      	mvns	r3, r3
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007638:	4013      	ands	r3, r2
 800763a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	0159      	lsls	r1, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	440b      	add	r3, r1
 8007652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007656:	4619      	mov	r1, r3
 8007658:	4b35      	ldr	r3, [pc, #212]	; (8007730 <USB_DeactivateEndpoint+0x1b0>)
 800765a:	4013      	ands	r3, r2
 800765c:	600b      	str	r3, [r1, #0]
 800765e:	e060      	b.n	8007722 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007676:	d11f      	bne.n	80076b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	0151      	lsls	r1, r2, #5
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	440a      	add	r2, r1
 800768e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007696:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	2101      	movs	r1, #1
 80076ca:	fa01 f303 	lsl.w	r3, r1, r3
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	43db      	mvns	r3, r3
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d8:	4013      	ands	r3, r2
 80076da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	43db      	mvns	r3, r3
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fc:	4013      	ands	r3, r2
 80076fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	0159      	lsls	r1, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	440b      	add	r3, r1
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	4619      	mov	r1, r3
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <USB_DeactivateEndpoint+0x1b4>)
 800771e:	4013      	ands	r3, r2
 8007720:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	ec337800 	.word	0xec337800
 8007734:	eff37800 	.word	0xeff37800

08007738 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 815c 	bne.w	8007a12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d132      	bne.n	80077c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c0:	0cdb      	lsrs	r3, r3, #19
 80077c2:	04db      	lsls	r3, r3, #19
 80077c4:	6113      	str	r3, [r2, #16]
 80077c6:	e074      	b.n	80078b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e2:	0cdb      	lsrs	r3, r3, #19
 80077e4:	04db      	lsls	r3, r3, #19
 80077e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800780a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6959      	ldr	r1, [r3, #20]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	440b      	add	r3, r1
 8007824:	1e59      	subs	r1, r3, #1
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	fbb1 f3f3 	udiv	r3, r1, r3
 800782e:	04d9      	lsls	r1, r3, #19
 8007830:	4b9d      	ldr	r3, [pc, #628]	; (8007aa8 <USB_EPStartXfer+0x370>)
 8007832:	400b      	ands	r3, r1
 8007834:	69b9      	ldr	r1, [r7, #24]
 8007836:	0148      	lsls	r0, r1, #5
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	4401      	add	r1, r0
 800783c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007840:	4313      	orrs	r3, r2
 8007842:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800785a:	69b9      	ldr	r1, [r7, #24]
 800785c:	0148      	lsls	r0, r1, #5
 800785e:	69f9      	ldr	r1, [r7, #28]
 8007860:	4401      	add	r1, r0
 8007862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007866:	4313      	orrs	r3, r2
 8007868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	78db      	ldrb	r3, [r3, #3]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d11f      	bne.n	80078b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	0151      	lsls	r1, r2, #5
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	440a      	add	r2, r1
 80078a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d14b      	bne.n	8007950 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	461a      	mov	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	78db      	ldrb	r3, [r3, #3]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d128      	bne.n	800792e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d110      	bne.n	800790e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e00f      	b.n	800792e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800792c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	0151      	lsls	r1, r2, #5
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	440a      	add	r2, r1
 8007944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	e12f      	b.n	8007bb0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	440a      	add	r2, r1
 8007966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800796a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800796e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	78db      	ldrb	r3, [r3, #3]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d015      	beq.n	80079a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8117 	beq.w	8007bb0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	2101      	movs	r1, #1
 8007994:	fa01 f303 	lsl.w	r3, r1, r3
 8007998:	69f9      	ldr	r1, [r7, #28]
 800799a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800799e:	4313      	orrs	r3, r2
 80079a0:	634b      	str	r3, [r1, #52]	; 0x34
 80079a2:	e105      	b.n	8007bb0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d110      	bne.n	80079d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e00f      	b.n	80079f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	68d9      	ldr	r1, [r3, #12]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	b298      	uxth	r0, r3
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4603      	mov	r3, r0
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fa2b 	bl	8007e66 <USB_WritePacket>
 8007a10:	e0ce      	b.n	8007bb0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2c:	0cdb      	lsrs	r3, r3, #19
 8007a2e:	04db      	lsls	r3, r3, #19
 8007a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d126      	bne.n	8007aac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a74:	69b9      	ldr	r1, [r7, #24]
 8007a76:	0148      	lsls	r0, r1, #5
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	4401      	add	r1, r0
 8007a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a80:	4313      	orrs	r3, r2
 8007a82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa2:	6113      	str	r3, [r2, #16]
 8007aa4:	e036      	b.n	8007b14 <USB_EPStartXfer+0x3dc>
 8007aa6:	bf00      	nop
 8007aa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	1e5a      	subs	r2, r3, #1
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	8afb      	ldrh	r3, [r7, #22]
 8007ad2:	04d9      	lsls	r1, r3, #19
 8007ad4:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <USB_EPStartXfer+0x484>)
 8007ad6:	400b      	ands	r3, r1
 8007ad8:	69b9      	ldr	r1, [r7, #24]
 8007ada:	0148      	lsls	r0, r1, #5
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	4401      	add	r1, r0
 8007ae0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	8af9      	ldrh	r1, [r7, #22]
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	0148      	lsls	r0, r1, #5
 8007b08:	69f9      	ldr	r1, [r7, #28]
 8007b0a:	4401      	add	r1, r0
 8007b0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b10:	4313      	orrs	r3, r2
 8007b12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d10d      	bne.n	8007b36 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	68d9      	ldr	r1, [r3, #12]
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	460a      	mov	r2, r1
 8007b34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	78db      	ldrb	r3, [r3, #3]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d128      	bne.n	8007b90 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d110      	bne.n	8007b70 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	e00f      	b.n	8007b90 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	0151      	lsls	r1, r2, #5
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007baa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	1ff80000 	.word	0x1ff80000

08007bc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	f040 80cd 	bne.w	8007d7c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d132      	bne.n	8007c50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c48:	0cdb      	lsrs	r3, r3, #19
 8007c4a:	04db      	lsls	r3, r3, #19
 8007c4c:	6113      	str	r3, [r2, #16]
 8007c4e:	e04e      	b.n	8007cee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	0cdb      	lsrs	r3, r3, #19
 8007c6c:	04db      	lsls	r3, r3, #19
 8007c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d903      	bls.n	8007ca8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cde:	6939      	ldr	r1, [r7, #16]
 8007ce0:	0148      	lsls	r0, r1, #5
 8007ce2:	6979      	ldr	r1, [r7, #20]
 8007ce4:	4401      	add	r1, r0
 8007ce6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cea:	4313      	orrs	r3, r2
 8007cec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d11e      	bne.n	8007d32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	e092      	b.n	8007e58 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d07e      	beq.n	8007e58 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d70:	6979      	ldr	r1, [r7, #20]
 8007d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d76:	4313      	orrs	r3, r2
 8007d78:	634b      	str	r3, [r1, #52]	; 0x34
 8007d7a:	e06d      	b.n	8007e58 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d96:	0cdb      	lsrs	r3, r3, #19
 8007d98:	04db      	lsls	r3, r3, #19
 8007d9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dbe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e06:	6939      	ldr	r1, [r7, #16]
 8007e08:	0148      	lsls	r0, r1, #5
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	4401      	add	r1, r0
 8007e0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d10d      	bne.n	8007e38 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	68d9      	ldr	r1, [r3, #12]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e34:	460a      	mov	r2, r1
 8007e36:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b089      	sub	sp, #36	; 0x24
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4611      	mov	r1, r2
 8007e72:	461a      	mov	r2, r3
 8007e74:	460b      	mov	r3, r1
 8007e76:	71fb      	strb	r3, [r7, #7]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007e84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11a      	bne.n	8007ec2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e8c:	88bb      	ldrh	r3, [r7, #4]
 8007e8e:	3303      	adds	r3, #3
 8007e90:	089b      	lsrs	r3, r3, #2
 8007e92:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e94:	2300      	movs	r3, #0
 8007e96:	61bb      	str	r3, [r7, #24]
 8007e98:	e00f      	b.n	8007eba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	031a      	lsls	r2, r3, #12
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d3eb      	bcc.n	8007e9a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3724      	adds	r7, #36	; 0x24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b089      	sub	sp, #36	; 0x24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	3303      	adds	r3, #3
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61bb      	str	r3, [r7, #24]
 8007ef2:	e00b      	b.n	8007f0c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3304      	adds	r3, #4
 8007f04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3ef      	bcc.n	8007ef4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007f14:	69fb      	ldr	r3, [r7, #28]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3724      	adds	r7, #36	; 0x24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d12c      	bne.n	8007f98 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	db12      	blt.n	8007f76 <USB_EPSetStall+0x54>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00f      	beq.n	8007f76 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f74:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e02b      	b.n	8007ff0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	db12      	blt.n	8007fd0 <USB_EPSetStall+0xae>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b085      	sub	sp, #20
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d128      	bne.n	800806c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008038:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	78db      	ldrb	r3, [r3, #3]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d003      	beq.n	800804a <USB_EPClearStall+0x4c>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	78db      	ldrb	r3, [r3, #3]
 8008046:	2b02      	cmp	r3, #2
 8008048:	d138      	bne.n	80080bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	440a      	add	r2, r1
 8008060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	e027      	b.n	80080bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	440a      	add	r2, r1
 8008082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800808a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	78db      	ldrb	r3, [r3, #3]
 8008090:	2b03      	cmp	r3, #3
 8008092:	d003      	beq.n	800809c <USB_EPClearStall+0x9e>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	78db      	ldrb	r3, [r3, #3]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d10f      	bne.n	80080bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	0151      	lsls	r1, r2, #5
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	440a      	add	r2, r1
 80080b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008104:	4313      	orrs	r3, r2
 8008106:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008144:	f023 0302 	bic.w	r3, r3, #2
 8008148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008186:	f043 0302 	orr.w	r3, r3, #2
 800818a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4013      	ands	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081b2:	68fb      	ldr	r3, [r7, #12]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4013      	ands	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	0c1b      	lsrs	r3, r3, #16
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4013      	ands	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	b29b      	uxth	r3, r3
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4013      	ands	r3, r2
 8008254:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008256:	68bb      	ldr	r3, [r7, #8]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	fa22 f303 	lsr.w	r3, r2, r3
 8008294:	01db      	lsls	r3, r3, #7
 8008296:	b2db      	uxtb	r3, r3
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4013      	ands	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082b2:	68bb      	ldr	r3, [r7, #8]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f003 0301 	and.w	r3, r3, #1
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082fa:	f023 0307 	bic.w	r3, r3, #7
 80082fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800830e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008312:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	460b      	mov	r3, r1
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	333c      	adds	r3, #60	; 0x3c
 800833a:	3304      	adds	r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4a26      	ldr	r2, [pc, #152]	; (80083dc <USB_EP0_OutStart+0xb8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d90a      	bls.n	800835e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008358:	d101      	bne.n	800835e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	e037      	b.n	80083ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	461a      	mov	r2, r3
 8008366:	2300      	movs	r3, #0
 8008368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800838c:	f043 0318 	orr.w	r3, r3, #24
 8008390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d10f      	bne.n	80083cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	4f54300a 	.word	0x4f54300a

080083e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a13      	ldr	r2, [pc, #76]	; (8008444 <USB_CoreReset+0x64>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d901      	bls.n	80083fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e01b      	b.n	8008436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	daf2      	bge.n	80083ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f043 0201 	orr.w	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a09      	ldr	r2, [pc, #36]	; (8008444 <USB_CoreReset+0x64>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d901      	bls.n	8008428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e006      	b.n	8008436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d0f0      	beq.n	8008416 <USB_CoreReset+0x36>

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	00030d40 	.word	0x00030d40

08008448 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008454:	2010      	movs	r0, #16
 8008456:	f001 ff6f 	bl	800a338 <USBD_static_malloc>
 800845a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800846a:	2302      	movs	r3, #2
 800846c:	e01b      	b.n	80084a6 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7c1b      	ldrb	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2207      	movs	r2, #7
 8008482:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008484:	e002      	b.n	800848c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220a      	movs	r2, #10
 800848a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800848c:	2304      	movs	r3, #4
 800848e:	2203      	movs	r2, #3
 8008490:	2181      	movs	r1, #129	; 0x81
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fdf1 	bl	800a07a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80084ba:	2181      	movs	r1, #129	; 0x81
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fe02 	bl	800a0c6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 ff38 	bl	800a354 <USBD_static_free>
    pdev->pClassData = NULL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008508:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	e0e8      	b.n	80086ee <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008524:	2b00      	cmp	r3, #0
 8008526:	d046      	beq.n	80085b6 <USBD_HID_Setup+0xbe>
 8008528:	2b20      	cmp	r3, #32
 800852a:	f040 80d8 	bne.w	80086de <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	3b02      	subs	r3, #2
 8008534:	2b09      	cmp	r3, #9
 8008536:	d836      	bhi.n	80085a6 <USBD_HID_Setup+0xae>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <USBD_HID_Setup+0x48>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008597 	.word	0x08008597
 8008544:	08008577 	.word	0x08008577
 8008548:	080085a7 	.word	0x080085a7
 800854c:	080085a7 	.word	0x080085a7
 8008550:	080085a7 	.word	0x080085a7
 8008554:	080085a7 	.word	0x080085a7
 8008558:	080085a7 	.word	0x080085a7
 800855c:	080085a7 	.word	0x080085a7
 8008560:	08008585 	.word	0x08008585
 8008564:	08008569 	.word	0x08008569
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	885b      	ldrh	r3, [r3, #2]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]
          break;
 8008574:	e01e      	b.n	80085b4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 fa24 	bl	80099ca <USBD_CtlSendData>
          break;
 8008582:	e017      	b.n	80085b4 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	b2db      	uxtb	r3, r3
 800858e:	461a      	mov	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	605a      	str	r2, [r3, #4]
          break;
 8008594:	e00e      	b.n	80085b4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3304      	adds	r3, #4
 800859a:	2201      	movs	r2, #1
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 fa13 	bl	80099ca <USBD_CtlSendData>
          break;
 80085a4:	e006      	b.n	80085b4 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f99d 	bl	80098e8 <USBD_CtlError>
          ret = USBD_FAIL;
 80085ae:	2303      	movs	r3, #3
 80085b0:	75fb      	strb	r3, [r7, #23]
          break;
 80085b2:	bf00      	nop
      }
      break;
 80085b4:	e09a      	b.n	80086ec <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	2b0b      	cmp	r3, #11
 80085bc:	f200 8086 	bhi.w	80086cc <USBD_HID_Setup+0x1d4>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <USBD_HID_Setup+0xd0>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085f9 	.word	0x080085f9
 80085cc:	080086db 	.word	0x080086db
 80085d0:	080086cd 	.word	0x080086cd
 80085d4:	080086cd 	.word	0x080086cd
 80085d8:	080086cd 	.word	0x080086cd
 80085dc:	080086cd 	.word	0x080086cd
 80085e0:	08008623 	.word	0x08008623
 80085e4:	080086cd 	.word	0x080086cd
 80085e8:	080086cd 	.word	0x080086cd
 80085ec:	080086cd 	.word	0x080086cd
 80085f0:	0800867b 	.word	0x0800867b
 80085f4:	080086a5 	.word	0x080086a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b03      	cmp	r3, #3
 8008602:	d107      	bne.n	8008614 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008604:	f107 030a 	add.w	r3, r7, #10
 8008608:	2202      	movs	r2, #2
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f9dc 	bl	80099ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008612:	e063      	b.n	80086dc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f966 	bl	80098e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	75fb      	strb	r3, [r7, #23]
          break;
 8008620:	e05c      	b.n	80086dc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	885b      	ldrh	r3, [r3, #2]
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b22      	cmp	r3, #34	; 0x22
 800862c:	d108      	bne.n	8008640 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	88db      	ldrh	r3, [r3, #6]
 8008632:	2b4a      	cmp	r3, #74	; 0x4a
 8008634:	bf28      	it	cs
 8008636:	234a      	movcs	r3, #74	; 0x4a
 8008638:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800863a:	4b2f      	ldr	r3, [pc, #188]	; (80086f8 <USBD_HID_Setup+0x200>)
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e015      	b.n	800866c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	885b      	ldrh	r3, [r3, #2]
 8008644:	0a1b      	lsrs	r3, r3, #8
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b21      	cmp	r3, #33	; 0x21
 800864a:	d108      	bne.n	800865e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <USBD_HID_Setup+0x204>)
 800864e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	88db      	ldrh	r3, [r3, #6]
 8008654:	2b09      	cmp	r3, #9
 8008656:	bf28      	it	cs
 8008658:	2309      	movcs	r3, #9
 800865a:	82bb      	strh	r3, [r7, #20]
 800865c:	e006      	b.n	800866c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f941 	bl	80098e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008666:	2303      	movs	r3, #3
 8008668:	75fb      	strb	r3, [r7, #23]
            break;
 800866a:	e037      	b.n	80086dc <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800866c:	8abb      	ldrh	r3, [r7, #20]
 800866e:	461a      	mov	r2, r3
 8008670:	6939      	ldr	r1, [r7, #16]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 f9a9 	bl	80099ca <USBD_CtlSendData>
          break;
 8008678:	e030      	b.n	80086dc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b03      	cmp	r3, #3
 8008684:	d107      	bne.n	8008696 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3308      	adds	r3, #8
 800868a:	2201      	movs	r2, #1
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 f99b 	bl	80099ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008694:	e022      	b.n	80086dc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f925 	bl	80098e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	75fb      	strb	r3, [r7, #23]
          break;
 80086a2:	e01b      	b.n	80086dc <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d106      	bne.n	80086be <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	885b      	ldrh	r3, [r3, #2]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	461a      	mov	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086bc:	e00e      	b.n	80086dc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f911 	bl	80098e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	75fb      	strb	r3, [r7, #23]
          break;
 80086ca:	e007      	b.n	80086dc <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 f90a 	bl	80098e8 <USBD_CtlError>
          ret = USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	75fb      	strb	r3, [r7, #23]
          break;
 80086d8:	e000      	b.n	80086dc <USBD_HID_Setup+0x1e4>
          break;
 80086da:	bf00      	nop
      }
      break;
 80086dc:	e006      	b.n	80086ec <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 f901 	bl	80098e8 <USBD_CtlError>
      ret = USBD_FAIL;
 80086e6:	2303      	movs	r3, #3
 80086e8:	75fb      	strb	r3, [r7, #23]
      break;
 80086ea:	bf00      	nop
  }

  return (uint8_t)ret;
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	200000c8 	.word	0x200000c8
 80086fc:	200000b0 	.word	0x200000b0

08008700 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2222      	movs	r2, #34	; 0x22
 800870c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800870e:	4b03      	ldr	r3, [pc, #12]	; (800871c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20000044 	.word	0x20000044

08008720 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2222      	movs	r2, #34	; 0x22
 800872c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20000068 	.word	0x20000068

08008740 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2222      	movs	r2, #34	; 0x22
 800874c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800874e:	4b03      	ldr	r3, [pc, #12]	; (800875c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	2000008c 	.word	0x2000008c

08008760 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008772:	2200      	movs	r2, #0
 8008774:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	220a      	movs	r2, #10
 8008790:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008792:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	200000bc 	.word	0x200000bc

080087a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e01f      	b.n	80087fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	79fa      	ldrb	r2, [r7, #7]
 80087ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 fbdb 	bl	8009fac <USBD_LL_Init>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008818:	2303      	movs	r3, #3
 800881a:	e016      	b.n	800884a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	f107 020e 	add.w	r2, r7, #14
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	4602      	mov	r2, r0
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fbf2 	bl	800a044 <USBD_LL_Start>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800888c:	2303      	movs	r3, #3
 800888e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
 80088aa:	4603      	mov	r3, r0
 80088ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4611      	mov	r1, r2
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
  }

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 ffba 	bl	8009874 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800891c:	f003 031f 	and.w	r3, r3, #31
 8008920:	2b02      	cmp	r3, #2
 8008922:	d01a      	beq.n	800895a <USBD_LL_SetupStage+0x72>
 8008924:	2b02      	cmp	r3, #2
 8008926:	d822      	bhi.n	800896e <USBD_LL_SetupStage+0x86>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <USBD_LL_SetupStage+0x4a>
 800892c:	2b01      	cmp	r3, #1
 800892e:	d00a      	beq.n	8008946 <USBD_LL_SetupStage+0x5e>
 8008930:	e01d      	b.n	800896e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa62 	bl	8008e04 <USBD_StdDevReq>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	e020      	b.n	8008988 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fac6 	bl	8008ee0 <USBD_StdItfReq>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e016      	b.n	8008988 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fb05 	bl	8008f72 <USBD_StdEPReq>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
      break;
 800896c:	e00c      	b.n	8008988 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fbc1 	bl	800a104 <USBD_LL_StallEP>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b086      	sub	sp, #24
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	460b      	mov	r3, r1
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d138      	bne.n	8008a18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d14a      	bne.n	8008a4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d913      	bls.n	80089ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	1ad2      	subs	r2, r2, r3
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	4293      	cmp	r3, r2
 80089dc:	bf28      	it	cs
 80089de:	4613      	movcs	r3, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f001 f81c 	bl	8009a22 <USBD_CtlContinueRx>
 80089ea:	e030      	b.n	8008a4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d10b      	bne.n	8008a10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f001 f817 	bl	8009a44 <USBD_CtlSendStatus>
 8008a16:	e01a      	b.n	8008a4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d114      	bne.n	8008a4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00e      	beq.n	8008a4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	7afa      	ldrb	r2, [r7, #11]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	4798      	blx	r3
 8008a40:	4603      	mov	r3, r0
 8008a42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	e000      	b.n	8008a50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	460b      	mov	r3, r1
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a66:	7afb      	ldrb	r3, [r7, #11]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d16b      	bne.n	8008b44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d156      	bne.n	8008b2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d914      	bls.n	8008ab2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	1ad2      	subs	r2, r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 ffae 	bl	8009a00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f001 fbd4 	bl	800a258 <USBD_LL_PrepareReceive>
 8008ab0:	e03b      	b.n	8008b2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d11c      	bne.n	8008af8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d316      	bcc.n	8008af8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d20f      	bcs.n	8008af8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 ff8f 	bl	8009a00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aea:	2300      	movs	r3, #0
 8008aec:	2200      	movs	r2, #0
 8008aee:	2100      	movs	r1, #0
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f001 fbb1 	bl	800a258 <USBD_LL_PrepareReceive>
 8008af6:	e018      	b.n	8008b2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d10b      	bne.n	8008b1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b1c:	2180      	movs	r1, #128	; 0x80
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f001 faf0 	bl	800a104 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 ffa0 	bl	8009a6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d122      	bne.n	8008b7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f7ff fe98 	bl	800886a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b42:	e01a      	b.n	8008b7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d114      	bne.n	8008b7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	7afa      	ldrb	r2, [r7, #11]
 8008b66:	4611      	mov	r1, r2
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	4798      	blx	r3
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	e000      	b.n	8008b7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e02f      	b.n	8008c18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00f      	beq.n	8008be2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6852      	ldr	r2, [r2, #4]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	4611      	mov	r1, r2
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008be2:	2340      	movs	r3, #64	; 0x40
 8008be4:	2200      	movs	r2, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fa46 	bl	800a07a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2240      	movs	r2, #64	; 0x40
 8008bfa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bfe:	2340      	movs	r3, #64	; 0x40
 8008c00:	2200      	movs	r2, #0
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fa38 	bl	800a07a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2240      	movs	r2, #64	; 0x40
 8008c14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2204      	movs	r2, #4
 8008c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d106      	bne.n	8008c8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e012      	b.n	8008cd8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d10b      	bne.n	8008cd6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e014      	b.n	8008d24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d10d      	bne.n	8008d22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d007      	beq.n	8008d22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e014      	b.n	8008d70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d10d      	bne.n	8008d6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6852      	ldr	r2, [r2, #4]
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	4611      	mov	r1, r2
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
  }

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008de4:	8a3b      	ldrh	r3, [r7, #16]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	b21a      	sxth	r2, r3
 8008dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	b21b      	sxth	r3, r3
 8008df2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008df4:	89fb      	ldrh	r3, [r7, #14]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d005      	beq.n	8008e2a <USBD_StdDevReq+0x26>
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d853      	bhi.n	8008eca <USBD_StdDevReq+0xc6>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00b      	beq.n	8008e3e <USBD_StdDevReq+0x3a>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d14f      	bne.n	8008eca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	4798      	blx	r3
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	e04a      	b.n	8008ed4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	d83b      	bhi.n	8008ebe <USBD_StdDevReq+0xba>
 8008e46:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USBD_StdDevReq+0x48>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008ea1 	.word	0x08008ea1
 8008e50:	08008eb5 	.word	0x08008eb5
 8008e54:	08008ebf 	.word	0x08008ebf
 8008e58:	08008eab 	.word	0x08008eab
 8008e5c:	08008ebf 	.word	0x08008ebf
 8008e60:	08008e7f 	.word	0x08008e7f
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008ebf 	.word	0x08008ebf
 8008e6c:	08008e97 	.word	0x08008e97
 8008e70:	08008e89 	.word	0x08008e89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f9de 	bl	8009238 <USBD_GetDescriptor>
          break;
 8008e7c:	e024      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fb6d 	bl	8009560 <USBD_SetAddress>
          break;
 8008e86:	e01f      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fbac 	bl	80095e8 <USBD_SetConfig>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
          break;
 8008e94:	e018      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fc4b 	bl	8009734 <USBD_GetConfig>
          break;
 8008e9e:	e013      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fc7c 	bl	80097a0 <USBD_GetStatus>
          break;
 8008ea8:	e00e      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fcab 	bl	8009808 <USBD_SetFeature>
          break;
 8008eb2:	e009      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fcba 	bl	8009830 <USBD_ClrFeature>
          break;
 8008ebc:	e004      	b.n	8008ec8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fd11 	bl	80098e8 <USBD_CtlError>
          break;
 8008ec6:	bf00      	nop
      }
      break;
 8008ec8:	e004      	b.n	8008ed4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fd0b 	bl	80098e8 <USBD_CtlError>
      break;
 8008ed2:	bf00      	nop
  }

  return ret;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop

08008ee0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ef6:	2b40      	cmp	r3, #64	; 0x40
 8008ef8:	d005      	beq.n	8008f06 <USBD_StdItfReq+0x26>
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d82f      	bhi.n	8008f5e <USBD_StdItfReq+0x7e>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <USBD_StdItfReq+0x26>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d12b      	bne.n	8008f5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d81d      	bhi.n	8008f50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	889b      	ldrh	r3, [r3, #4]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d813      	bhi.n	8008f46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	88db      	ldrh	r3, [r3, #6]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d110      	bne.n	8008f5a <USBD_StdItfReq+0x7a>
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10d      	bne.n	8008f5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fd80 	bl	8009a44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f44:	e009      	b.n	8008f5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fccd 	bl	80098e8 <USBD_CtlError>
          break;
 8008f4e:	e004      	b.n	8008f5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fcc8 	bl	80098e8 <USBD_CtlError>
          break;
 8008f58:	e000      	b.n	8008f5c <USBD_StdItfReq+0x7c>
          break;
 8008f5a:	bf00      	nop
      }
      break;
 8008f5c:	e004      	b.n	8008f68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fcc1 	bl	80098e8 <USBD_CtlError>
      break;
 8008f66:	bf00      	nop
  }

  return ret;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	889b      	ldrh	r3, [r3, #4]
 8008f84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	d007      	beq.n	8008fa2 <USBD_StdEPReq+0x30>
 8008f92:	2b40      	cmp	r3, #64	; 0x40
 8008f94:	f200 8145 	bhi.w	8009222 <USBD_StdEPReq+0x2b0>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00c      	beq.n	8008fb6 <USBD_StdEPReq+0x44>
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	f040 8140 	bne.w	8009222 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb4:	e13a      	b.n	800922c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d007      	beq.n	8008fce <USBD_StdEPReq+0x5c>
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	f300 8129 	bgt.w	8009216 <USBD_StdEPReq+0x2a4>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d07f      	beq.n	80090c8 <USBD_StdEPReq+0x156>
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d03c      	beq.n	8009046 <USBD_StdEPReq+0xd4>
 8008fcc:	e123      	b.n	8009216 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d002      	beq.n	8008fe0 <USBD_StdEPReq+0x6e>
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d016      	beq.n	800900c <USBD_StdEPReq+0x9a>
 8008fde:	e02c      	b.n	800903a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_StdEPReq+0x90>
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b80      	cmp	r3, #128	; 0x80
 8008fea:	d00a      	beq.n	8009002 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f887 	bl	800a104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 f883 	bl	800a104 <USBD_LL_StallEP>
 8008ffe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009000:	e020      	b.n	8009044 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fc6f 	bl	80098e8 <USBD_CtlError>
              break;
 800900a:	e01b      	b.n	8009044 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10e      	bne.n	8009032 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <USBD_StdEPReq+0xc0>
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b80      	cmp	r3, #128	; 0x80
 800901e:	d008      	beq.n	8009032 <USBD_StdEPReq+0xc0>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	88db      	ldrh	r3, [r3, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f869 	bl	800a104 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fd06 	bl	8009a44 <USBD_CtlSendStatus>

              break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fc53 	bl	80098e8 <USBD_CtlError>
              break;
 8009042:	bf00      	nop
          }
          break;
 8009044:	e0ec      	b.n	8009220 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d002      	beq.n	8009058 <USBD_StdEPReq+0xe6>
 8009052:	2b03      	cmp	r3, #3
 8009054:	d016      	beq.n	8009084 <USBD_StdEPReq+0x112>
 8009056:	e030      	b.n	80090ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00d      	beq.n	800907a <USBD_StdEPReq+0x108>
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	2b80      	cmp	r3, #128	; 0x80
 8009062:	d00a      	beq.n	800907a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 f84b 	bl	800a104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800906e:	2180      	movs	r1, #128	; 0x80
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 f847 	bl	800a104 <USBD_LL_StallEP>
 8009076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009078:	e025      	b.n	80090c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fc33 	bl	80098e8 <USBD_CtlError>
              break;
 8009082:	e020      	b.n	80090c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	885b      	ldrh	r3, [r3, #2]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d11b      	bne.n	80090c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 f851 	bl	800a142 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fccf 	bl	8009a44 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80090b8:	e004      	b.n	80090c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc13 	bl	80098e8 <USBD_CtlError>
              break;
 80090c2:	e000      	b.n	80090c6 <USBD_StdEPReq+0x154>
              break;
 80090c4:	bf00      	nop
          }
          break;
 80090c6:	e0ab      	b.n	8009220 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d002      	beq.n	80090da <USBD_StdEPReq+0x168>
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d032      	beq.n	800913e <USBD_StdEPReq+0x1cc>
 80090d8:	e097      	b.n	800920a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d007      	beq.n	80090f0 <USBD_StdEPReq+0x17e>
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b80      	cmp	r3, #128	; 0x80
 80090e4:	d004      	beq.n	80090f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fbfd 	bl	80098e8 <USBD_CtlError>
                break;
 80090ee:	e091      	b.n	8009214 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da0b      	bge.n	8009110 <USBD_StdEPReq+0x19e>
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	3310      	adds	r3, #16
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	e00b      	b.n	8009128 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	4413      	add	r3, r2
 8009126:	3304      	adds	r3, #4
 8009128:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2202      	movs	r2, #2
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fc47 	bl	80099ca <USBD_CtlSendData>
              break;
 800913c:	e06a      	b.n	8009214 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800913e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009142:	2b00      	cmp	r3, #0
 8009144:	da11      	bge.n	800916a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	f003 020f 	and.w	r2, r3, #15
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	440b      	add	r3, r1
 8009158:	3324      	adds	r3, #36	; 0x24
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d117      	bne.n	8009190 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fbc0 	bl	80098e8 <USBD_CtlError>
                  break;
 8009168:	e054      	b.n	8009214 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fbad 	bl	80098e8 <USBD_CtlError>
                  break;
 800918e:	e041      	b.n	8009214 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	da0b      	bge.n	80091b0 <USBD_StdEPReq+0x23e>
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	3310      	adds	r3, #16
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	4413      	add	r3, r2
 80091ac:	3304      	adds	r3, #4
 80091ae:	e00b      	b.n	80091c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	4413      	add	r3, r2
 80091c6:	3304      	adds	r3, #4
 80091c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <USBD_StdEPReq+0x264>
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d103      	bne.n	80091de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e00e      	b.n	80091fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 ffcc 	bl	800a180 <USBD_LL_IsStallEP>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2201      	movs	r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e002      	b.n	80091fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2202      	movs	r2, #2
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fbe1 	bl	80099ca <USBD_CtlSendData>
              break;
 8009208:	e004      	b.n	8009214 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb6b 	bl	80098e8 <USBD_CtlError>
              break;
 8009212:	bf00      	nop
          }
          break;
 8009214:	e004      	b.n	8009220 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fb65 	bl	80098e8 <USBD_CtlError>
          break;
 800921e:	bf00      	nop
      }
      break;
 8009220:	e004      	b.n	800922c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fb5f 	bl	80098e8 <USBD_CtlError>
      break;
 800922a:	bf00      	nop
  }

  return ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	885b      	ldrh	r3, [r3, #2]
 8009252:	0a1b      	lsrs	r3, r3, #8
 8009254:	b29b      	uxth	r3, r3
 8009256:	3b01      	subs	r3, #1
 8009258:	2b0e      	cmp	r3, #14
 800925a:	f200 8152 	bhi.w	8009502 <USBD_GetDescriptor+0x2ca>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBD_GetDescriptor+0x2c>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	080092d5 	.word	0x080092d5
 8009268:	080092ed 	.word	0x080092ed
 800926c:	0800932d 	.word	0x0800932d
 8009270:	08009503 	.word	0x08009503
 8009274:	08009503 	.word	0x08009503
 8009278:	080094a3 	.word	0x080094a3
 800927c:	080094cf 	.word	0x080094cf
 8009280:	08009503 	.word	0x08009503
 8009284:	08009503 	.word	0x08009503
 8009288:	08009503 	.word	0x08009503
 800928c:	08009503 	.word	0x08009503
 8009290:	08009503 	.word	0x08009503
 8009294:	08009503 	.word	0x08009503
 8009298:	08009503 	.word	0x08009503
 800929c:	080092a1 	.word	0x080092a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	7c12      	ldrb	r2, [r2, #16]
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c2:	e126      	b.n	8009512 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fb0e 	bl	80098e8 <USBD_CtlError>
        err++;
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	3301      	adds	r3, #1
 80092d0:	72fb      	strb	r3, [r7, #11]
      break;
 80092d2:	e11e      	b.n	8009512 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7c12      	ldrb	r2, [r2, #16]
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	60f8      	str	r0, [r7, #12]
      break;
 80092ea:	e112      	b.n	8009512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7c1b      	ldrb	r3, [r3, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10d      	bne.n	8009310 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	f107 0208 	add.w	r2, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	2202      	movs	r2, #2
 800930c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800930e:	e100      	b.n	8009512 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	f107 0208 	add.w	r2, r7, #8
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	2202      	movs	r2, #2
 8009328:	701a      	strb	r2, [r3, #0]
      break;
 800932a:	e0f2      	b.n	8009512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	885b      	ldrh	r3, [r3, #2]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b05      	cmp	r3, #5
 8009334:	f200 80ac 	bhi.w	8009490 <USBD_GetDescriptor+0x258>
 8009338:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <USBD_GetDescriptor+0x108>)
 800933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933e:	bf00      	nop
 8009340:	08009359 	.word	0x08009359
 8009344:	0800938d 	.word	0x0800938d
 8009348:	080093c1 	.word	0x080093c1
 800934c:	080093f5 	.word	0x080093f5
 8009350:	08009429 	.word	0x08009429
 8009354:	0800945d 	.word	0x0800945d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937a:	e091      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fab2 	bl	80098e8 <USBD_CtlError>
            err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
          break;
 800938a:	e089      	b.n	80094a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ae:	e077      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa98 	bl	80098e8 <USBD_CtlError>
            err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
          break;
 80093be:	e06f      	b.n	80094a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e2:	e05d      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa7e 	bl	80098e8 <USBD_CtlError>
            err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
          break;
 80093f2:	e055      	b.n	80094a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009416:	e043      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa64 	bl	80098e8 <USBD_CtlError>
            err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
          break;
 8009426:	e03b      	b.n	80094a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944a:	e029      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa4a 	bl	80098e8 <USBD_CtlError>
            err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
          break;
 800945a:	e021      	b.n	80094a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947e:	e00f      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa30 	bl	80098e8 <USBD_CtlError>
            err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
          break;
 800948e:	e007      	b.n	80094a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa28 	bl	80098e8 <USBD_CtlError>
          err++;
 8009498:	7afb      	ldrb	r3, [r7, #11]
 800949a:	3301      	adds	r3, #1
 800949c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800949e:	bf00      	nop
      }
      break;
 80094a0:	e037      	b.n	8009512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7c1b      	ldrb	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d109      	bne.n	80094be <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	f107 0208 	add.w	r2, r7, #8
 80094b6:	4610      	mov	r0, r2
 80094b8:	4798      	blx	r3
 80094ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094bc:	e029      	b.n	8009512 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa11 	bl	80098e8 <USBD_CtlError>
        err++;
 80094c6:	7afb      	ldrb	r3, [r7, #11]
 80094c8:	3301      	adds	r3, #1
 80094ca:	72fb      	strb	r3, [r7, #11]
      break;
 80094cc:	e021      	b.n	8009512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	7c1b      	ldrb	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10d      	bne.n	80094f2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	f107 0208 	add.w	r2, r7, #8
 80094e2:	4610      	mov	r0, r2
 80094e4:	4798      	blx	r3
 80094e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3301      	adds	r3, #1
 80094ec:	2207      	movs	r2, #7
 80094ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f0:	e00f      	b.n	8009512 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f9f7 	bl	80098e8 <USBD_CtlError>
        err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	e007      	b.n	8009512 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9ef 	bl	80098e8 <USBD_CtlError>
      err++;
 800950a:	7afb      	ldrb	r3, [r7, #11]
 800950c:	3301      	adds	r3, #1
 800950e:	72fb      	strb	r3, [r7, #11]
      break;
 8009510:	bf00      	nop
  }

  if (err != 0U)
 8009512:	7afb      	ldrb	r3, [r7, #11]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d11e      	bne.n	8009556 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	88db      	ldrh	r3, [r3, #6]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d016      	beq.n	800954e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009520:	893b      	ldrh	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00e      	beq.n	8009544 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	88da      	ldrh	r2, [r3, #6]
 800952a:	893b      	ldrh	r3, [r7, #8]
 800952c:	4293      	cmp	r3, r2
 800952e:	bf28      	it	cs
 8009530:	4613      	movcs	r3, r2
 8009532:	b29b      	uxth	r3, r3
 8009534:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009536:	893b      	ldrh	r3, [r7, #8]
 8009538:	461a      	mov	r2, r3
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fa44 	bl	80099ca <USBD_CtlSendData>
 8009542:	e009      	b.n	8009558 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f9ce 	bl	80098e8 <USBD_CtlError>
 800954c:	e004      	b.n	8009558 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fa78 	bl	8009a44 <USBD_CtlSendStatus>
 8009554:	e000      	b.n	8009558 <USBD_GetDescriptor+0x320>
    return;
 8009556:	bf00      	nop
  }
}
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop

08009560 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	889b      	ldrh	r3, [r3, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d131      	bne.n	80095d6 <USBD_SetAddress+0x76>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	88db      	ldrh	r3, [r3, #6]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d12d      	bne.n	80095d6 <USBD_SetAddress+0x76>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	885b      	ldrh	r3, [r3, #2]
 800957e:	2b7f      	cmp	r3, #127	; 0x7f
 8009580:	d829      	bhi.n	80095d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	885b      	ldrh	r3, [r3, #2]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b03      	cmp	r3, #3
 8009598:	d104      	bne.n	80095a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f9a3 	bl	80098e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	e01d      	b.n	80095e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7bfa      	ldrb	r2, [r7, #15]
 80095a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fe11 	bl	800a1d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fa44 	bl	8009a44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	e009      	b.n	80095e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d4:	e004      	b.n	80095e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f985 	bl	80098e8 <USBD_CtlError>
  }
}
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	885b      	ldrh	r3, [r3, #2]
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	4b4c      	ldr	r3, [pc, #304]	; (8009730 <USBD_SetConfig+0x148>)
 80095fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009600:	4b4b      	ldr	r3, [pc, #300]	; (8009730 <USBD_SetConfig+0x148>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d905      	bls.n	8009614 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f96c 	bl	80098e8 <USBD_CtlError>
    return USBD_FAIL;
 8009610:	2303      	movs	r3, #3
 8009612:	e088      	b.n	8009726 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d002      	beq.n	8009626 <USBD_SetConfig+0x3e>
 8009620:	2b03      	cmp	r3, #3
 8009622:	d025      	beq.n	8009670 <USBD_SetConfig+0x88>
 8009624:	e071      	b.n	800970a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009626:	4b42      	ldr	r3, [pc, #264]	; (8009730 <USBD_SetConfig+0x148>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01c      	beq.n	8009668 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800962e:	4b40      	ldr	r3, [pc, #256]	; (8009730 <USBD_SetConfig+0x148>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009638:	4b3d      	ldr	r3, [pc, #244]	; (8009730 <USBD_SetConfig+0x148>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff f91e 	bl	8008880 <USBD_SetClassConfig>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f949 	bl	80098e8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009656:	e065      	b.n	8009724 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f9f3 	bl	8009a44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2203      	movs	r2, #3
 8009662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009666:	e05d      	b.n	8009724 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f9eb 	bl	8009a44 <USBD_CtlSendStatus>
      break;
 800966e:	e059      	b.n	8009724 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009670:	4b2f      	ldr	r3, [pc, #188]	; (8009730 <USBD_SetConfig+0x148>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d112      	bne.n	800969e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009680:	4b2b      	ldr	r3, [pc, #172]	; (8009730 <USBD_SetConfig+0x148>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800968a:	4b29      	ldr	r3, [pc, #164]	; (8009730 <USBD_SetConfig+0x148>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff f911 	bl	80088b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f9d4 	bl	8009a44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800969c:	e042      	b.n	8009724 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800969e:	4b24      	ldr	r3, [pc, #144]	; (8009730 <USBD_SetConfig+0x148>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d02a      	beq.n	8009702 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff f8ff 	bl	80088b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096ba:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <USBD_SetConfig+0x148>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096c4:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <USBD_SetConfig+0x148>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7ff f8d8 	bl	8008880 <USBD_SetClassConfig>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00f      	beq.n	80096fa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f903 	bl	80098e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff f8e4 	bl	80088b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096f8:	e014      	b.n	8009724 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f9a2 	bl	8009a44 <USBD_CtlSendStatus>
      break;
 8009700:	e010      	b.n	8009724 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f99e 	bl	8009a44 <USBD_CtlSendStatus>
      break;
 8009708:	e00c      	b.n	8009724 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f8eb 	bl	80098e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009712:	4b07      	ldr	r3, [pc, #28]	; (8009730 <USBD_SetConfig+0x148>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff f8cd 	bl	80088b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800971e:	2303      	movs	r3, #3
 8009720:	73fb      	strb	r3, [r7, #15]
      break;
 8009722:	bf00      	nop
  }

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000656 	.word	0x20000656

08009734 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d004      	beq.n	8009750 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f8cd 	bl	80098e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800974e:	e023      	b.n	8009798 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	dc02      	bgt.n	8009762 <USBD_GetConfig+0x2e>
 800975c:	2b00      	cmp	r3, #0
 800975e:	dc03      	bgt.n	8009768 <USBD_GetConfig+0x34>
 8009760:	e015      	b.n	800978e <USBD_GetConfig+0x5a>
 8009762:	2b03      	cmp	r3, #3
 8009764:	d00b      	beq.n	800977e <USBD_GetConfig+0x4a>
 8009766:	e012      	b.n	800978e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3308      	adds	r3, #8
 8009772:	2201      	movs	r2, #1
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f927 	bl	80099ca <USBD_CtlSendData>
        break;
 800977c:	e00c      	b.n	8009798 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3304      	adds	r3, #4
 8009782:	2201      	movs	r2, #1
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f91f 	bl	80099ca <USBD_CtlSendData>
        break;
 800978c:	e004      	b.n	8009798 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f8a9 	bl	80098e8 <USBD_CtlError>
        break;
 8009796:	bf00      	nop
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d81e      	bhi.n	80097f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d004      	beq.n	80097ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f890 	bl	80098e8 <USBD_CtlError>
        break;
 80097c8:	e01a      	b.n	8009800 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f043 0202 	orr.w	r2, r3, #2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	330c      	adds	r3, #12
 80097ea:	2202      	movs	r2, #2
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8eb 	bl	80099ca <USBD_CtlSendData>
      break;
 80097f4:	e004      	b.n	8009800 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f875 	bl	80098e8 <USBD_CtlError>
      break;
 80097fe:	bf00      	nop
  }
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	885b      	ldrh	r3, [r3, #2]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d106      	bne.n	8009828 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f90e 	bl	8009a44 <USBD_CtlSendStatus>
  }
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	b2db      	uxtb	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	2b02      	cmp	r3, #2
 8009846:	d80b      	bhi.n	8009860 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	885b      	ldrh	r3, [r3, #2]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d10c      	bne.n	800986a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f8f3 	bl	8009a44 <USBD_CtlSendStatus>
      }
      break;
 800985e:	e004      	b.n	800986a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f840 	bl	80098e8 <USBD_CtlError>
      break;
 8009868:	e000      	b.n	800986c <USBD_ClrFeature+0x3c>
      break;
 800986a:	bf00      	nop
  }
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	781a      	ldrb	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3301      	adds	r3, #1
 800988e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3301      	adds	r3, #1
 800989c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f7ff fa91 	bl	8008dc6 <SWAPBYTE>
 80098a4:	4603      	mov	r3, r0
 80098a6:	461a      	mov	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fa84 	bl	8008dc6 <SWAPBYTE>
 80098be:	4603      	mov	r3, r0
 80098c0:	461a      	mov	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7ff fa77 	bl	8008dc6 <SWAPBYTE>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	80da      	strh	r2, [r3, #6]
}
 80098e0:	bf00      	nop
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80098f2:	2180      	movs	r1, #128	; 0x80
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc05 	bl	800a104 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80098fa:	2100      	movs	r1, #0
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fc01 	bl	800a104 <USBD_LL_StallEP>
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d036      	beq.n	800998e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009924:	6938      	ldr	r0, [r7, #16]
 8009926:	f000 f836 	bl	8009996 <USBD_GetLen>
 800992a:	4603      	mov	r3, r0
 800992c:	3301      	adds	r3, #1
 800992e:	b29b      	uxth	r3, r3
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	4413      	add	r3, r2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	701a      	strb	r2, [r3, #0]
  idx++;
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	3301      	adds	r3, #1
 8009948:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	4413      	add	r3, r2
 8009950:	2203      	movs	r2, #3
 8009952:	701a      	strb	r2, [r3, #0]
  idx++;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	3301      	adds	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800995a:	e013      	b.n	8009984 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	7812      	ldrb	r2, [r2, #0]
 8009966:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	3301      	adds	r3, #1
 800996c:	613b      	str	r3, [r7, #16]
    idx++;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	3301      	adds	r3, #1
 8009972:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4413      	add	r3, r2
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
    idx++;
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	3301      	adds	r3, #1
 8009982:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e7      	bne.n	800995c <USBD_GetString+0x52>
 800998c:	e000      	b.n	8009990 <USBD_GetString+0x86>
    return;
 800998e:	bf00      	nop
  }
}
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099a6:	e005      	b.n	80099b4 <USBD_GetLen+0x1e>
  {
    len++;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	3301      	adds	r3, #1
 80099ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1f5      	bne.n	80099a8 <USBD_GetLen+0x12>
  }

  return len;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2202      	movs	r2, #2
 80099da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	2100      	movs	r1, #0
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fc10 	bl	800a216 <USBD_LL_Transmit>

  return USBD_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fbff 	bl	800a216 <USBD_LL_Transmit>

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	2100      	movs	r1, #0
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 fc0f 	bl	800a258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2204      	movs	r2, #4
 8009a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a54:	2300      	movs	r3, #0
 8009a56:	2200      	movs	r2, #0
 8009a58:	2100      	movs	r1, #0
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fbdb 	bl	800a216 <USBD_LL_Transmit>

  return USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2205      	movs	r2, #5
 8009a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2100      	movs	r1, #0
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fbe9 	bl	800a258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a94:	2200      	movs	r2, #0
 8009a96:	490e      	ldr	r1, [pc, #56]	; (8009ad0 <MX_USB_DEVICE_Init+0x40>)
 8009a98:	480e      	ldr	r0, [pc, #56]	; (8009ad4 <MX_USB_DEVICE_Init+0x44>)
 8009a9a:	f7fe fe83 	bl	80087a4 <USBD_Init>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009aa4:	f7f8 fd26 	bl	80024f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009aa8:	490b      	ldr	r1, [pc, #44]	; (8009ad8 <MX_USB_DEVICE_Init+0x48>)
 8009aaa:	480a      	ldr	r0, [pc, #40]	; (8009ad4 <MX_USB_DEVICE_Init+0x44>)
 8009aac:	f7fe feaa 	bl	8008804 <USBD_RegisterClass>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009ab6:	f7f8 fd1d 	bl	80024f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009aba:	4806      	ldr	r0, [pc, #24]	; (8009ad4 <MX_USB_DEVICE_Init+0x44>)
 8009abc:	f7fe fec9 	bl	8008852 <USBD_Start>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009ac6:	f7f8 fd15 	bl	80024f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009aca:	bf00      	nop
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000114 	.word	0x20000114
 8009ad4:	20000678 	.word	0x20000678
 8009ad8:	2000000c 	.word	0x2000000c

08009adc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2212      	movs	r2, #18
 8009aec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009aee:	4b03      	ldr	r3, [pc, #12]	; (8009afc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20000134 	.word	0x20000134

08009b00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b12:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000154 	.word	0x20000154

08009b24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	6039      	str	r1, [r7, #0]
 8009b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d105      	bne.n	8009b42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4907      	ldr	r1, [pc, #28]	; (8009b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b3a:	4808      	ldr	r0, [pc, #32]	; (8009b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8009b3c:	f7ff fee5 	bl	800990a <USBD_GetString>
 8009b40:	e004      	b.n	8009b4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	4904      	ldr	r1, [pc, #16]	; (8009b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b46:	4805      	ldr	r0, [pc, #20]	; (8009b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8009b48:	f7ff fedf 	bl	800990a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b4c:	4b02      	ldr	r3, [pc, #8]	; (8009b58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000948 	.word	0x20000948
 8009b5c:	08010bb8 	.word	0x08010bb8

08009b60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	4904      	ldr	r1, [pc, #16]	; (8009b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b70:	4804      	ldr	r0, [pc, #16]	; (8009b84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b72:	f7ff feca 	bl	800990a <USBD_GetString>
  return USBD_StrDesc;
 8009b76:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20000948 	.word	0x20000948
 8009b84:	08010bd0 	.word	0x08010bd0

08009b88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	221a      	movs	r2, #26
 8009b98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b9a:	f000 f855 	bl	8009c48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b9e:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000158 	.word	0x20000158

08009bac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4907      	ldr	r1, [pc, #28]	; (8009be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bc2:	4808      	ldr	r0, [pc, #32]	; (8009be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bc4:	f7ff fea1 	bl	800990a <USBD_GetString>
 8009bc8:	e004      	b.n	8009bd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4904      	ldr	r1, [pc, #16]	; (8009be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bd0:	f7ff fe9b 	bl	800990a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd4:	4b02      	ldr	r3, [pc, #8]	; (8009be0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000948 	.word	0x20000948
 8009be4:	08010be4 	.word	0x08010be4

08009be8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4907      	ldr	r1, [pc, #28]	; (8009c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bfe:	4808      	ldr	r0, [pc, #32]	; (8009c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c00:	f7ff fe83 	bl	800990a <USBD_GetString>
 8009c04:	e004      	b.n	8009c10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4904      	ldr	r1, [pc, #16]	; (8009c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c0a:	4805      	ldr	r0, [pc, #20]	; (8009c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c0c:	f7ff fe7d 	bl	800990a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c10:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000948 	.word	0x20000948
 8009c20:	08010bf0 	.word	0x08010bf0

08009c24 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6039      	str	r1, [r7, #0]
 8009c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	220c      	movs	r2, #12
 8009c34:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009c36:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20000148 	.word	0x20000148

08009c48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <Get_SerialNum+0x44>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c54:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <Get_SerialNum+0x48>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c5a:	4b0e      	ldr	r3, [pc, #56]	; (8009c94 <Get_SerialNum+0x4c>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c6e:	2208      	movs	r2, #8
 8009c70:	4909      	ldr	r1, [pc, #36]	; (8009c98 <Get_SerialNum+0x50>)
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 f814 	bl	8009ca0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c78:	2204      	movs	r2, #4
 8009c7a:	4908      	ldr	r1, [pc, #32]	; (8009c9c <Get_SerialNum+0x54>)
 8009c7c:	68b8      	ldr	r0, [r7, #8]
 8009c7e:	f000 f80f 	bl	8009ca0 <IntToUnicode>
  }
}
 8009c82:	bf00      	nop
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	1fff7a10 	.word	0x1fff7a10
 8009c90:	1fff7a14 	.word	0x1fff7a14
 8009c94:	1fff7a18 	.word	0x1fff7a18
 8009c98:	2000015a 	.word	0x2000015a
 8009c9c:	2000016a 	.word	0x2000016a

08009ca0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	4613      	mov	r3, r2
 8009cac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]
 8009cb6:	e027      	b.n	8009d08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	0f1b      	lsrs	r3, r3, #28
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d80b      	bhi.n	8009cd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	0f1b      	lsrs	r3, r3, #28
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	440b      	add	r3, r1
 8009cd0:	3230      	adds	r2, #48	; 0x30
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	e00a      	b.n	8009cee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	0f1b      	lsrs	r3, r3, #28
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	440b      	add	r3, r1
 8009ce8:	3237      	adds	r2, #55	; 0x37
 8009cea:	b2d2      	uxtb	r2, r2
 8009cec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	005b      	lsls	r3, r3, #1
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	2200      	movs	r2, #0
 8009d00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	3301      	adds	r3, #1
 8009d06:	75fb      	strb	r3, [r7, #23]
 8009d08:	7dfa      	ldrb	r2, [r7, #23]
 8009d0a:	79fb      	ldrb	r3, [r7, #7]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d3d3      	bcc.n	8009cb8 <IntToUnicode+0x18>
  }
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	371c      	adds	r7, #28
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
	...

08009d20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d28:	f107 0314 	add.w	r3, r7, #20
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	609a      	str	r2, [r3, #8]
 8009d34:	60da      	str	r2, [r3, #12]
 8009d36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d40:	d13a      	bne.n	8009db8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d42:	2300      	movs	r3, #0
 8009d44:	613b      	str	r3, [r7, #16]
 8009d46:	4b1e      	ldr	r3, [pc, #120]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	4a1d      	ldr	r2, [pc, #116]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d4c:	f043 0301 	orr.w	r3, r3, #1
 8009d50:	6313      	str	r3, [r2, #48]	; 0x30
 8009d52:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	613b      	str	r3, [r7, #16]
 8009d5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d64:	2302      	movs	r3, #2
 8009d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d70:	230a      	movs	r3, #10
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d74:	f107 0314 	add.w	r3, r7, #20
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4812      	ldr	r0, [pc, #72]	; (8009dc4 <HAL_PCD_MspInit+0xa4>)
 8009d7c:	f7f9 faf8 	bl	8003370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d84:	4a0e      	ldr	r2, [pc, #56]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8a:	6353      	str	r3, [r2, #52]	; 0x34
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d94:	4a0a      	ldr	r2, [pc, #40]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d9a:	6453      	str	r3, [r2, #68]	; 0x44
 8009d9c:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <HAL_PCD_MspInit+0xa0>)
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009da8:	2200      	movs	r2, #0
 8009daa:	2100      	movs	r1, #0
 8009dac:	2043      	movs	r0, #67	; 0x43
 8009dae:	f7f9 fa8c 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009db2:	2043      	movs	r0, #67	; 0x43
 8009db4:	f7f9 faa5 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009db8:	bf00      	nop
 8009dba:	3728      	adds	r7, #40	; 0x28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	40023800 	.word	0x40023800
 8009dc4:	40020000 	.word	0x40020000

08009dc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f7fe fd82 	bl	80088e8 <USBD_LL_SetupStage>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009dfe:	78fa      	ldrb	r2, [r7, #3]
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	4613      	mov	r3, r2
 8009e04:	00db      	lsls	r3, r3, #3
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	440b      	add	r3, r1
 8009e0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	4619      	mov	r1, r3
 8009e16:	f7fe fdbc 	bl	8008992 <USBD_LL_DataOutStage>
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	440b      	add	r3, r1
 8009e42:	3348      	adds	r3, #72	; 0x48
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f7fe fe05 	bl	8008a58 <USBD_LL_DataInStage>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe ff19 	bl	8008c9c <USBD_LL_SOF>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
 8009e8a:	e008      	b.n	8009e9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d102      	bne.n	8009e9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
 8009e98:	e001      	b.n	8009e9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e9a:	f7f8 fb2b 	bl	80024f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ea4:	7bfa      	ldrb	r2, [r7, #15]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe feb9 	bl	8008c20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe fe65 	bl	8008b84 <USBD_LL_Reset>
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe feb4 	bl	8008c40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6812      	ldr	r2, [r2, #0]
 8009ee6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009eea:	f043 0301 	orr.w	r3, r3, #1
 8009eee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <HAL_PCD_SuspendCallback+0x48>)
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	4a03      	ldr	r2, [pc, #12]	; (8009f0c <HAL_PCD_SuspendCallback+0x48>)
 8009efe:	f043 0306 	orr.w	r3, r3, #6
 8009f02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	e000ed00 	.word	0xe000ed00

08009f10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fea4 	bl	8008c6c <USBD_LL_Resume>
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fef2 	bl	8008d2c <USBD_LL_IsoOUTIncomplete>
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f62:	78fa      	ldrb	r2, [r7, #3]
 8009f64:	4611      	mov	r1, r2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe feba 	bl	8008ce0 <USBD_LL_IsoINIncomplete>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fef8 	bl	8008d78 <USBD_LL_DevConnected>
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fef5 	bl	8008d8e <USBD_LL_DevDisconnected>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d13c      	bne.n	800a036 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fbc:	4a20      	ldr	r2, [pc, #128]	; (800a040 <USBD_LL_Init+0x94>)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1e      	ldr	r2, [pc, #120]	; (800a040 <USBD_LL_Init+0x94>)
 8009fc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fcc:	4b1c      	ldr	r3, [pc, #112]	; (800a040 <USBD_LL_Init+0x94>)
 8009fce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009fd4:	4b1a      	ldr	r3, [pc, #104]	; (800a040 <USBD_LL_Init+0x94>)
 8009fd6:	2206      	movs	r2, #6
 8009fd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009fda:	4b19      	ldr	r3, [pc, #100]	; (800a040 <USBD_LL_Init+0x94>)
 8009fdc:	2202      	movs	r2, #2
 8009fde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fe0:	4b17      	ldr	r3, [pc, #92]	; (800a040 <USBD_LL_Init+0x94>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fe6:	4b16      	ldr	r3, [pc, #88]	; (800a040 <USBD_LL_Init+0x94>)
 8009fe8:	2202      	movs	r2, #2
 8009fea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009fec:	4b14      	ldr	r3, [pc, #80]	; (800a040 <USBD_LL_Init+0x94>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <USBD_LL_Init+0x94>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ff8:	4b11      	ldr	r3, [pc, #68]	; (800a040 <USBD_LL_Init+0x94>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ffe:	4b10      	ldr	r3, [pc, #64]	; (800a040 <USBD_LL_Init+0x94>)
 800a000:	2200      	movs	r2, #0
 800a002:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a004:	4b0e      	ldr	r3, [pc, #56]	; (800a040 <USBD_LL_Init+0x94>)
 800a006:	2200      	movs	r2, #0
 800a008:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a00a:	480d      	ldr	r0, [pc, #52]	; (800a040 <USBD_LL_Init+0x94>)
 800a00c:	f7f9 fb75 	bl	80036fa <HAL_PCD_Init>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a016:	f7f8 fa6d 	bl	80024f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a01a:	2180      	movs	r1, #128	; 0x80
 800a01c:	4808      	ldr	r0, [pc, #32]	; (800a040 <USBD_LL_Init+0x94>)
 800a01e:	f7fa fcee 	bl	80049fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a022:	2240      	movs	r2, #64	; 0x40
 800a024:	2100      	movs	r1, #0
 800a026:	4806      	ldr	r0, [pc, #24]	; (800a040 <USBD_LL_Init+0x94>)
 800a028:	f7fa fca2 	bl	8004970 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a02c:	2280      	movs	r2, #128	; 0x80
 800a02e:	2101      	movs	r1, #1
 800a030:	4803      	ldr	r0, [pc, #12]	; (800a040 <USBD_LL_Init+0x94>)
 800a032:	f7fa fc9d 	bl	8004970 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000b48 	.word	0x20000b48

0800a044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7f9 fc71 	bl	8003942 <HAL_PCD_Start>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 f97e 	bl	800a368 <USBD_Get_USB_Status>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a070:	7bbb      	ldrb	r3, [r7, #14]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	4603      	mov	r3, r0
 800a08a:	70fb      	strb	r3, [r7, #3]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70bb      	strb	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0a2:	78bb      	ldrb	r3, [r7, #2]
 800a0a4:	883a      	ldrh	r2, [r7, #0]
 800a0a6:	78f9      	ldrb	r1, [r7, #3]
 800a0a8:	f7fa f882 	bl	80041b0 <HAL_PCD_EP_Open>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 f958 	bl	800a368 <USBD_Get_USB_Status>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fa f8cb 	bl	8004280 <HAL_PCD_EP_Close>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f939 	bl	800a368 <USBD_Get_USB_Status>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7fa f98b 	bl	800443e <HAL_PCD_EP_SetStall>
 800a128:	4603      	mov	r3, r0
 800a12a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f91a 	bl	800a368 <USBD_Get_USB_Status>
 800a134:	4603      	mov	r3, r0
 800a136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a138:	7bbb      	ldrb	r3, [r7, #14]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f7fa f9d0 	bl	8004506 <HAL_PCD_EP_ClrStall>
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 f8fb 	bl	800a368 <USBD_Get_USB_Status>
 800a172:	4603      	mov	r3, r0
 800a174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a176:	7bbb      	ldrb	r3, [r7, #14]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a192:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	da0b      	bge.n	800a1b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a2:	68f9      	ldr	r1, [r7, #12]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	333e      	adds	r3, #62	; 0x3e
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	e00b      	b.n	800a1cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ba:	68f9      	ldr	r1, [r7, #12]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7f9 ffb5 	bl	8004166 <HAL_PCD_SetAddress>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f8b0 	bl	800a368 <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	460b      	mov	r3, r1
 800a224:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a234:	7af9      	ldrb	r1, [r7, #11]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	f7fa f8b6 	bl	80043aa <HAL_PCD_EP_Transmit>
 800a23e:	4603      	mov	r3, r0
 800a240:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 f88f 	bl	800a368 <USBD_Get_USB_Status>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a24e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	460b      	mov	r3, r1
 800a266:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a276:	7af9      	ldrb	r1, [r7, #11]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	f7fa f84a 	bl	8004314 <HAL_PCD_EP_Receive>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 f86e 	bl	800a368 <USBD_Get_USB_Status>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a290:	7dbb      	ldrb	r3, [r7, #22]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <HAL_PCDEx_LPM_Callback+0x18>
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d01f      	beq.n	800a2f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a2b2:	e03b      	b.n	800a32c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d007      	beq.n	800a2cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a2bc:	f7f7 ff60 	bl	8002180 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2c0:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	4a1b      	ldr	r2, [pc, #108]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a2c6:	f023 0306 	bic.w	r3, r3, #6
 800a2ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fcbe 	bl	8008c6c <USBD_LL_Resume>
    break;
 800a2f0:	e01c      	b.n	800a32c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6812      	ldr	r2, [r2, #0]
 800a300:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a304:	f043 0301 	orr.w	r3, r3, #1
 800a308:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a310:	4618      	mov	r0, r3
 800a312:	f7fe fc95 	bl	8008c40 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d005      	beq.n	800a32a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a31e:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	4a04      	ldr	r2, [pc, #16]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a324:	f043 0306 	orr.w	r3, r3, #6
 800a328:	6113      	str	r3, [r2, #16]
    break;
 800a32a:	bf00      	nop
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	e000ed00 	.word	0xe000ed00

0800a338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a340:	4b03      	ldr	r3, [pc, #12]	; (800a350 <USBD_static_malloc+0x18>)
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20000658 	.word	0x20000658

0800a354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d817      	bhi.n	800a3ac <USBD_Get_USB_Status+0x44>
 800a37c:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <USBD_Get_USB_Status+0x1c>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a39b 	.word	0x0800a39b
 800a38c:	0800a3a1 	.word	0x0800a3a1
 800a390:	0800a3a7 	.word	0x0800a3a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
    break;
 800a398:	e00b      	b.n	800a3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a39a:	2303      	movs	r3, #3
 800a39c:	73fb      	strb	r3, [r7, #15]
    break;
 800a39e:	e008      	b.n	800a3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a4:	e005      	b.n	800a3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3aa:	e002      	b.n	800a3b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b0:	bf00      	nop
  }
  return usb_status;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	70fb      	strb	r3, [r7, #3]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70bb      	strb	r3, [r7, #2]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	707b      	strb	r3, [r7, #1]
                return 0;
 800a3da:	2300      	movs	r3, #0
        }
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	70fb      	strb	r3, [r7, #3]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	70bb      	strb	r3, [r7, #2]
 800a3fe:	4613      	mov	r3, r2
 800a400:	707b      	strb	r3, [r7, #1]
                return 0;
 800a402:	2300      	movs	r3, #0
        }
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
                return 0;
 800a418:	2300      	movs	r3, #0
        }
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
                return 0;
 800a42e:	2300      	movs	r3, #0
        }
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
                return 0;
 800a444:	2300      	movs	r3, #0
        }
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	460b      	mov	r3, r1
 800a45c:	70fb      	strb	r3, [r7, #3]
                return;
 800a45e:	bf00      	nop
        } // Note used for hubs only!
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	807b      	strh	r3, [r7, #2]
 800a476:	4613      	mov	r3, r2
 800a478:	803b      	strh	r3, [r7, #0]
                return false;
 800a47a:	2300      	movs	r3, #0
        }
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
                return false;
 800a494:	2300      	movs	r3, #0
        }
 800a496:	4618      	mov	r0, r3
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
                return true;
 800a4ae:	2301      	movs	r3, #1
        }
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800a4c4:	687b      	ldr	r3, [r7, #4]
        };
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73fb      	strb	r3, [r7, #15]
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	2b0f      	cmp	r3, #15
 800a4e4:	d812      	bhi.n	800a50c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800a4e6:	7bfa      	ldrb	r2, [r7, #15]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	321e      	adds	r2, #30
 800a4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d107      	bne.n	800a504 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800a4f4:	7bfa      	ldrb	r2, [r7, #15]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	321e      	adds	r2, #30
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800a500:	2300      	movs	r3, #0
 800a502:	e004      	b.n	800a50e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	3301      	adds	r3, #1
 800a508:	73fb      	strb	r3, [r7, #15]
 800a50a:	e7e9      	b.n	800a4e0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800a50c:	23d3      	movs	r3, #211	; 0xd3
        };
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	705a      	strb	r2, [r3, #1]
 800a52e:	2200      	movs	r2, #0
 800a530:	709a      	strb	r2, [r3, #2]
 800a532:	2200      	movs	r2, #0
 800a534:	70da      	strb	r2, [r3, #3]
 800a536:	2200      	movs	r2, #0
 800a538:	711a      	strb	r2, [r3, #4]
        };
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	711a      	strb	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	715a      	strb	r2, [r3, #5]
        };
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	715a      	strb	r2, [r3, #5]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	795a      	ldrb	r2, [r3, #5]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	711a      	strb	r2, [r3, #4]
        };
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	711a      	strb	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	80da      	strh	r2, [r3, #6]
        };
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	80da      	strh	r2, [r3, #6]
        };
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800a5ee:	b480      	push	{r7}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	607a      	str	r2, [r7, #4]
 800a5fa:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800a604:	2b01      	cmp	r3, #1
 800a606:	d009      	beq.n	800a61c <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800a608:	e029      	b.n	800a65e <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	887a      	ldrh	r2, [r7, #2]
 800a60e:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	791b      	ldrb	r3, [r3, #4]
 800a614:	3301      	adds	r3, #1
 800a616:	b2da      	uxtb	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	88db      	ldrh	r3, [r3, #6]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d015      	beq.n	800a650 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d011      	beq.n	800a650 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	88db      	ldrh	r3, [r3, #6]
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	80da      	strh	r2, [r3, #6]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	e7e5      	b.n	800a61c <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	88db      	ldrh	r3, [r3, #6]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	88db      	ldrh	r3, [r3, #6]
 800a662:	2b00      	cmp	r3, #0
 800a664:	bf0c      	ite	eq
 800a666:	2301      	moveq	r3, #1
 800a668:	2300      	movne	r3, #0
 800a66a:	b2db      	uxtb	r3, r3
        };
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	461a      	mov	r2, r3
 800a686:	4603      	mov	r3, r0
 800a688:	70fb      	strb	r3, [r7, #3]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70bb      	strb	r3, [r7, #2]
 800a68e:	4613      	mov	r3, r2
 800a690:	707b      	strb	r3, [r7, #1]
        };
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	4a04      	ldr	r2, [pc, #16]	; (800a6bc <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	08010d8c 	.word	0x08010d8c

0800a6c0 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	08010d74 	.word	0x08010d74

0800a6e0 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
                return bAddress;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800a708:	4618      	mov	r0, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	2be0      	cmp	r3, #224	; 0xe0
 800a724:	bf0c      	ite	eq
 800a726:	2301      	moveq	r3, #1
 800a728:	2300      	movne	r3, #0
 800a72a:	b2db      	uxtb	r3, r3
        };
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	807b      	strh	r3, [r7, #2]
 800a744:	4613      	mov	r3, r2
 800a746:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800a748:	887b      	ldrh	r3, [r7, #2]
 800a74a:	f640 225c 	movw	r2, #2652	; 0xa5c
 800a74e:	4293      	cmp	r3, r2
 800a750:	d104      	bne.n	800a75c <_ZN3BTD8VIDPIDOKEtt+0x24>
 800a752:	883b      	ldrh	r3, [r7, #0]
 800a754:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800a758:	4293      	cmp	r3, r2
 800a75a:	d009      	beq.n	800a770 <_ZN3BTD8VIDPIDOKEtt+0x38>
 800a75c:	887b      	ldrh	r3, [r7, #2]
 800a75e:	f240 520d 	movw	r2, #1293	; 0x50d
 800a762:	4293      	cmp	r3, r2
 800a764:	d106      	bne.n	800a774 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800a766:	883b      	ldrh	r3, [r7, #0]
 800a768:	f240 625a 	movw	r2, #1626	; 0x65a
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d101      	bne.n	800a774 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800a770:	2301      	movs	r3, #1
 800a772:	e02d      	b.n	800a7d0 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	7d1b      	ldrb	r3, [r3, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d113      	bne.n	800a7a4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	7d5b      	ldrb	r3, [r3, #21]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10f      	bne.n	800a7a4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7d9b      	ldrb	r3, [r3, #22]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10b      	bne.n	800a7a4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7ddb      	ldrb	r3, [r3, #23]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d107      	bne.n	800a7a4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	7e1b      	ldrb	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d103      	bne.n	800a7a4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	7e5b      	ldrb	r3, [r3, #25]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d014      	beq.n	800a7ce <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800a7a4:	887b      	ldrh	r3, [r7, #2]
 800a7a6:	f240 524c 	movw	r2, #1356	; 0x54c
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d10f      	bne.n	800a7ce <_ZN3BTD8VIDPIDOKEtt+0x96>
 800a7ae:	883b      	ldrh	r3, [r7, #0]
 800a7b0:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800a7b4:	d009      	beq.n	800a7ca <_ZN3BTD8VIDPIDOKEtt+0x92>
 800a7b6:	883b      	ldrh	r3, [r7, #0]
 800a7b8:	f240 422f 	movw	r2, #1071	; 0x42f
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d004      	beq.n	800a7ca <_ZN3BTD8VIDPIDOKEtt+0x92>
 800a7c0:	883b      	ldrh	r3, [r7, #0]
 800a7c2:	f240 32d5 	movw	r2, #981	; 0x3d5
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d101      	bne.n	800a7ce <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e000      	b.n	800a7d0 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800a7ce:	2300      	movs	r3, #0
        };
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff ff59 	bl	800a6a0 <_ZN15USBDeviceConfigC1Ev>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff ff64 	bl	800a6c0 <_ZN17UsbConfigXtracterC1Ev>
 800a7f8:	4a2b      	ldr	r2, [pc, #172]	; (800a8a8 <_ZN3BTDC1EP3USB+0xcc>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	4a2b      	ldr	r2, [pc, #172]	; (800a8ac <_ZN3BTDC1EP3USB+0xd0>)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	605a      	str	r2, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	64da      	str	r2, [r3, #76]	; 0x4c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	661a      	str	r2, [r3, #96]	; 0x60
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	2b03      	cmp	r3, #3
 800a868:	d80a      	bhi.n	800a880 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	3318      	adds	r3, #24
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	2200      	movs	r2, #0
 800a876:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	3301      	adds	r3, #1
 800a87c:	73fb      	strb	r3, [r7, #15]
 800a87e:	e7f1      	b.n	800a864 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa83 	bl	800ad8c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d006      	beq.n	800a89c <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff fe1b 	bl	800a4d2 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	08010d34 	.word	0x08010d34
 800a8ac:	08010d68 	.word	0x08010d68

0800a8b0 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b08f      	sub	sp, #60	; 0x3c
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	70fb      	strb	r3, [r7, #3]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70bb      	strb	r3, [r7, #2]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800a8ca:	2312      	movs	r3, #18
 800a8cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800a8d0:	f107 0308 	add.w	r3, r7, #8
 800a8d4:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa54 	bl	800ad8c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7ff fde7 	bl	800a4bc <_ZN3USB14GetAddressPoolEv>
 800a8ee:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800a8fa:	23d9      	movs	r3, #217	; 0xd9
 800a8fc:	e087      	b.n	800aa0e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2100      	movs	r1, #0
 800a906:	69f8      	ldr	r0, [r7, #28]
 800a908:	4798      	blx	r3
 800a90a:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800a912:	23d6      	movs	r3, #214	; 0xd6
 800a914:	e07b      	b.n	800aa0e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800a91e:	23d7      	movs	r3, #215	; 0xd7
 800a920:	e075      	b.n	800aa0e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	787a      	ldrb	r2, [r7, #1]
 800a936:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a93c:	f107 0308 	add.w	r3, r7, #8
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	2312      	movs	r3, #18
 800a944:	2200      	movs	r2, #0
 800a946:	2100      	movs	r1, #0
 800a948:	f005 fa43 	bl	800fdd2 <_ZN3USB11getDevDescrEhhtPh>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	6a3a      	ldr	r2, [r7, #32]
 800a956:	601a      	str	r2, [r3, #0]

        if(rcode)
 800a958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d146      	bne.n	800a9ee <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3304      	adds	r3, #4
 800a966:	681c      	ldr	r4, [r3, #0]
 800a968:	78bb      	ldrb	r3, [r7, #2]
 800a96a:	78f9      	ldrb	r1, [r7, #3]
 800a96c:	2200      	movs	r2, #0
 800a96e:	69f8      	ldr	r0, [r7, #28]
 800a970:	47a0      	blx	r4
 800a972:	4603      	mov	r3, r0
 800a974:	461a      	mov	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800a986:	23d4      	movs	r3, #212	; 0xd4
 800a988:	e041      	b.n	800aa0e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	791b      	ldrb	r3, [r3, #4]
 800a98e:	2b09      	cmp	r3, #9
 800a990:	d017      	beq.n	800a9c2 <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	79da      	ldrb	r2, [r3, #7]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	7c5a      	ldrb	r2, [r3, #17]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	891b      	ldrh	r3, [r3, #8]
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	895b      	ldrh	r3, [r3, #10]
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800a9be:	23e0      	movs	r3, #224	; 0xe0
 800a9c0:	e025      	b.n	800aa0e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800a9c2:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f005 fa9b 	bl	800ff0c <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800a9d6:	23d1      	movs	r3, #209	; 0xd1
 800a9d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
        return rcode;
 800a9e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9ec:	e00f      	b.n	800aa0e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800a9ee:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800a9f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9f4:	2b0d      	cmp	r3, #13
 800a9f6:	d002      	beq.n	800a9fe <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800a9f8:	23e1      	movs	r3, #225	; 0xe1
 800a9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3308      	adds	r3, #8
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
        return rcode;
 800aa0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3734      	adds	r7, #52	; 0x34
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd90      	pop	{r4, r7, pc}
	...

0800aa18 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b096      	sub	sp, #88	; 0x58
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	4608      	mov	r0, r1
 800aa22:	4611      	mov	r1, r2
 800aa24:	461a      	mov	r2, r3
 800aa26:	4603      	mov	r3, r0
 800aa28:	70fb      	strb	r3, [r7, #3]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70bb      	strb	r3, [r7, #2]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800aa38:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff fd37 	bl	800a4bc <_ZN3USB14GetAddressPoolEv>
 800aa4e:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800aa50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800aa60:	4798      	blx	r3
 800aa62:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800aa64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800aa6a:	23d6      	movs	r3, #214	; 0xd6
 800aa6c:	e189      	b.n	800ad82 <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 800aa6e:	48b8      	ldr	r0, [pc, #736]	; (800ad50 <_ZN3BTD4InitEhhb+0x338>)
 800aa70:	f7f8 f8ba 	bl	8002be8 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	f005 fa43 	bl	800ff0c <_ZN3USB7setAddrEhhh>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800aa8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800aa94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa96:	2200      	movs	r2, #0
 800aa98:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800aa9a:	e16a      	b.n	800ad72 <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800aa9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800aaa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800aaae:	4611      	mov	r1, r2
 800aab0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800aab2:	4798      	blx	r3
 800aab4:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800aab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800aabc:	23d6      	movs	r3, #214	; 0xd6
 800aabe:	e160      	b.n	800ad82 <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 800aac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac2:	787a      	ldrb	r2, [r7, #1]
 800aac4:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3351      	adds	r3, #81	; 0x51
 800aad4:	2201      	movs	r2, #1
 800aad6:	f004 f8d6 	bl	800ec86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800aada:	4603      	mov	r3, r0
 800aadc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800aae0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f040 8128 	bne.w	800ad3a <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800aaf0:	f240 524c 	movw	r2, #1356	; 0x54c
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d177      	bne.n	800abe8 <_ZN3BTD4InitEhhb+0x1d0>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800aafe:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ab02:	d00d      	beq.n	800ab20 <_ZN3BTD4InitEhhb+0x108>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ab0a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d006      	beq.n	800ab20 <_ZN3BTD4InitEhhb+0x108>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ab18:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d163      	bne.n	800abe8 <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 800ab20:	488c      	ldr	r0, [pc, #560]	; (800ad54 <_ZN3BTD4InitEhhb+0x33c>)
 800ab22:	f7f8 f861 	bl	8002be8 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ab36:	2301      	movs	r3, #1
 800ab38:	f005 fa18 	bl	800ff6c <_ZN3USB7setConfEhhh>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ab42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f040 80f9 	bne.w	800ad3e <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	7d1b      	ldrb	r3, [r3, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d113      	bne.n	800ab7c <_ZN3BTD4InitEhhb+0x164>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7d5b      	ldrb	r3, [r3, #21]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10f      	bne.n	800ab7c <_ZN3BTD4InitEhhb+0x164>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7d9b      	ldrb	r3, [r3, #22]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10b      	bne.n	800ab7c <_ZN3BTD4InitEhhb+0x164>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7ddb      	ldrb	r3, [r3, #23]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d107      	bne.n	800ab7c <_ZN3BTD4InitEhhb+0x164>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7e1b      	ldrb	r3, [r3, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <_ZN3BTD4InitEhhb+0x164>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	7e5b      	ldrb	r3, [r3, #25]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d019      	beq.n	800abb0 <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ab82:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ab86:	d006      	beq.n	800ab96 <_ZN3BTD4InitEhhb+0x17e>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ab8e:	f240 422f 	movw	r2, #1071	; 0x42f
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d106      	bne.n	800aba4 <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3314      	adds	r3, #20
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f002 f8c3 	bl	800cd28 <_ZN3BTD9setBdaddrEPh>
 800aba2:	e005      	b.n	800abb0 <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3314      	adds	r3, #20
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f002 f8fc 	bl	800cda8 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800abc0:	2300      	movs	r3, #0
 800abc2:	f005 f9d3 	bl	800ff6c <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800abd0:	2300      	movs	r3, #0
 800abd2:	2200      	movs	r2, #0
 800abd4:	f005 f99a 	bl	800ff0c <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3308      	adds	r3, #8
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800abe4:	23d1      	movs	r3, #209	; 0xd1
 800abe6:	e0cc      	b.n	800ad82 <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800abe8:	2300      	movs	r3, #0
 800abea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800abee:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800abf2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d25e      	bcs.n	800acb8 <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ac00:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d106      	bne.n	800ac16 <_ZN3BTD4InitEhhb+0x1fe>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ac0e:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00d      	beq.n	800ac32 <_ZN3BTD4InitEhhb+0x21a>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ac1c:	f240 520d 	movw	r2, #1293	; 0x50d
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d120      	bne.n	800ac66 <_ZN3BTD4InitEhhb+0x24e>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ac2a:	f240 625a 	movw	r2, #1626	; 0x65a
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d119      	bne.n	800ac66 <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	1d1a      	adds	r2, r3, #4
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 f907 	bl	800ce50 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ac4c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ac50:	f107 0308 	add.w	r3, r7, #8
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	4613      	mov	r3, r2
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f005 f90a 	bl	800fe72 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac64:	e018      	b.n	800ac98 <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1d1a      	adds	r2, r3, #4
 800ac6a:	f107 0308 	add.w	r3, r7, #8
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f002 f93b 	bl	800ceec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ac80:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ac84:	f107 0308 	add.w	r3, r7, #8
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f005 f8f0 	bl	800fe72 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800ac98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d150      	bne.n	800ad42 <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d805      	bhi.n	800acb6 <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800acaa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800acae:	3301      	adds	r3, #1
 800acb0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800acb4:	e79b      	b.n	800abee <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 800acb6:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d94a      	bls.n	800ad58 <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3351      	adds	r3, #81	; 0x51
 800acd6:	f003 ffd6 	bl	800ec86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ace0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d12e      	bne.n	800ad46 <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acfe:	f005 f935 	bl	800ff6c <_ZN3USB7setConfEhhh>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ad08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d11c      	bne.n	800ad4a <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2264      	movs	r2, #100	; 0x64
 800ad14:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800ad36:	2300      	movs	r3, #0
 800ad38:	e023      	b.n	800ad82 <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 800ad3a:	bf00      	nop
 800ad3c:	e019      	b.n	800ad72 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 800ad3e:	bf00      	nop
 800ad40:	e017      	b.n	800ad72 <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 800ad42:	bf00      	nop
 800ad44:	e015      	b.n	800ad72 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 800ad46:	bf00      	nop
 800ad48:	e013      	b.n	800ad72 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 800ad4a:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800ad4c:	e011      	b.n	800ad72 <_ZN3BTD4InitEhhb+0x35a>
 800ad4e:	bf00      	nop
 800ad50:	000493e0 	.word	0x000493e0
 800ad54:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 800ad58:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ad64:	2300      	movs	r3, #0
 800ad66:	2200      	movs	r2, #0
 800ad68:	f005 f8d0 	bl	800ff0c <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800ad6c:	23d1      	movs	r3, #209	; 0xd1
 800ad6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3308      	adds	r3, #8
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
        return rcode;
 800ad7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3750      	adds	r7, #80	; 0x50
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop

0800ad8c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d845      	bhi.n	800ae2a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800ad9e:	7bfa      	ldrb	r2, [r7, #15]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	440b      	add	r3, r1
 800adaa:	3351      	adds	r3, #81	; 0x51
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <_ZN3BTD10InitializeEv+0x2e>
 800adb6:	2000      	movs	r0, #0
 800adb8:	e000      	b.n	800adbc <_ZN3BTD10InitializeEv+0x30>
 800adba:	2008      	movs	r0, #8
 800adbc:	7bfa      	ldrb	r2, [r7, #15]
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	4413      	add	r3, r2
 800adc6:	440b      	add	r3, r1
 800adc8:	3352      	adds	r3, #82	; 0x52
 800adca:	4602      	mov	r2, r0
 800adcc:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800adce:	7bfa      	ldrb	r2, [r7, #15]
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	4413      	add	r3, r2
 800add8:	440b      	add	r3, r1
 800adda:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800adde:	78d3      	ldrb	r3, [r2, #3]
 800ade0:	f36f 0300 	bfc	r3, #0, #1
 800ade4:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800ade6:	7bfa      	ldrb	r2, [r7, #15]
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	4413      	add	r3, r2
 800adf0:	440b      	add	r3, r1
 800adf2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800adf6:	78d3      	ldrb	r3, [r2, #3]
 800adf8:	f36f 0341 	bfc	r3, #1, #1
 800adfc:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <_ZN3BTD10InitializeEv+0x7c>
 800ae04:	2101      	movs	r1, #1
 800ae06:	e000      	b.n	800ae0a <_ZN3BTD10InitializeEv+0x7e>
 800ae08:	210f      	movs	r1, #15
 800ae0a:	7bfa      	ldrb	r2, [r7, #15]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	005b      	lsls	r3, r3, #1
 800ae12:	4413      	add	r3, r2
 800ae14:	4403      	add	r3, r0
 800ae16:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ae1a:	78d3      	ldrb	r3, [r2, #3]
 800ae1c:	f361 0387 	bfi	r3, r1, #2, #6
 800ae20:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	3301      	adds	r3, #1
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	e7b6      	b.n	800ad98 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d81c      	bhi.n	800ae6e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	3318      	adds	r3, #24
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4413      	add	r3, r2
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d010      	beq.n	800ae66 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	3318      	adds	r3, #24
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	6859      	ldr	r1, [r3, #4]
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	3318      	adds	r3, #24
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4608      	mov	r0, r1
 800ae64:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	e7df      	b.n	800ae2e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	461a      	mov	r2, r3
 800aeda:	4603      	mov	r3, r0
 800aedc:	70fb      	strb	r3, [r7, #3]
 800aede:	460b      	mov	r3, r1
 800aee0:	70bb      	strb	r3, [r7, #2]
 800aee2:	4613      	mov	r3, r2
 800aee4:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800aee6:	787b      	ldrb	r3, [r7, #1]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d15d      	bne.n	800afa8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	78db      	ldrb	r3, [r3, #3]
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d114      	bne.n	800af2a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	789b      	ldrb	r3, [r3, #2]
 800af04:	b25b      	sxtb	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	da0f      	bge.n	800af2a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800af0a:	2301      	movs	r3, #1
 800af0c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800af0e:	7bfa      	ldrb	r2, [r7, #15]
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	4413      	add	r3, r2
 800af18:	440b      	add	r3, r1
 800af1a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800af1e:	78d3      	ldrb	r3, [r2, #3]
 800af20:	2101      	movs	r1, #1
 800af22:	f361 0387 	bfi	r3, r1, #2, #6
 800af26:	70d3      	strb	r3, [r2, #3]
 800af28:	e00e      	b.n	800af48 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	78db      	ldrb	r3, [r3, #3]
 800af2e:	f003 0303 	and.w	r3, r3, #3
 800af32:	2b02      	cmp	r3, #2
 800af34:	d13a      	bne.n	800afac <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	789b      	ldrb	r3, [r3, #2]
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	da01      	bge.n	800af44 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800af40:	2302      	movs	r3, #2
 800af42:	e000      	b.n	800af46 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800af44:	2303      	movs	r3, #3
 800af46:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	789b      	ldrb	r3, [r3, #2]
 800af4c:	7bfa      	ldrb	r2, [r7, #15]
 800af4e:	f003 030f 	and.w	r3, r3, #15
 800af52:	b2d8      	uxtb	r0, r3
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	4613      	mov	r3, r2
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	4413      	add	r3, r2
 800af5c:	440b      	add	r3, r1
 800af5e:	3351      	adds	r3, #81	; 0x51
 800af60:	4602      	mov	r2, r0
 800af62:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	889b      	ldrh	r3, [r3, #4]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	7bfa      	ldrb	r2, [r7, #15]
 800af6c:	b2d8      	uxtb	r0, r3
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	4613      	mov	r3, r2
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	4413      	add	r3, r2
 800af76:	440b      	add	r3, r1
 800af78:	3352      	adds	r3, #82	; 0x52
 800af7a:	4602      	mov	r2, r0
 800af7c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	799b      	ldrb	r3, [r3, #6]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d204      	bcs.n	800af96 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	799a      	ldrb	r2, [r3, #6]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800af9c:	3301      	adds	r3, #1
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800afa6:	e002      	b.n	800afae <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800afa8:	bf00      	nop
 800afaa:	e000      	b.n	800afae <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800afac:	bf00      	nop
}
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800afb8:	f1a0 0004 	sub.w	r0, r0, #4
 800afbc:	f7ff bf86 	b.w	800aecc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800afc0 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff fedf 	bl	800ad8c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fa72 	bl	800a4bc <_ZN3USB14GetAddressPoolEv>
 800afd8:	4603      	mov	r3, r0
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	3208      	adds	r2, #8
 800afde:	6812      	ldr	r2, [r2, #0]
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800afe6:	4618      	mov	r0, r3
 800afe8:	4790      	blx	r2
        return 0;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b002:	f083 0301 	eor.w	r3, r3, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	e025      	b.n	800b05c <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800b010:	f7f7 fdde 	bl	8002bd0 <HAL_GetTick>
 800b014:	4603      	mov	r3, r0
 800b016:	4a13      	ldr	r2, [pc, #76]	; (800b064 <_ZN3BTD4PollEv+0x70>)
 800b018:	fba2 2303 	umull	r2, r3, r2, r3
 800b01c:	099a      	lsrs	r2, r3, #6
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	43db      	mvns	r3, r3
 800b026:	0fdb      	lsrs	r3, r3, #31
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d015      	beq.n	800b05a <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800b02e:	f7f7 fdcf 	bl	8002bd0 <HAL_GetTick>
 800b032:	4603      	mov	r3, r0
 800b034:	4a0b      	ldr	r2, [pc, #44]	; (800b064 <_ZN3BTD4PollEv+0x70>)
 800b036:	fba2 2303 	umull	r2, r3, r2, r3
 800b03a:	099b      	lsrs	r3, r3, #6
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800b042:	441a      	add	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f80d 	bl	800b068 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fb24 	bl	800b69c <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fe4d 	bl	800bcf4 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	10624dd3 	.word	0x10624dd3

0800b068 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800b068:	b5b0      	push	{r4, r5, r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3389      	adds	r3, #137	; 0x89
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800b08e:	f107 050c 	add.w	r5, r7, #12
 800b092:	9201      	str	r2, [sp, #4]
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	462b      	mov	r3, r5
 800b098:	4622      	mov	r2, r4
 800b09a:	f003 ff5c 	bl	800ef56 <_ZN3USB10inTransferEhhPtPhh>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d003      	beq.n	800b0b0 <_ZN3BTD14HCI_event_taskEv+0x48>
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	2b04      	cmp	r3, #4
 800b0ac:	f040 82f1 	bne.w	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	2b35      	cmp	r3, #53	; 0x35
 800b0ba:	f200 82ea 	bhi.w	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b2a5 	.word	0x0800b2a5
 800b0c8:	0800b305 	.word	0x0800b305
 800b0cc:	0800b45d 	.word	0x0800b45d
 800b0d0:	0800b547 	.word	0x0800b547
 800b0d4:	0800b4b9 	.word	0x0800b4b9
 800b0d8:	0800b605 	.word	0x0800b605
 800b0dc:	0800b4eb 	.word	0x0800b4eb
 800b0e0:	0800b67d 	.word	0x0800b67d
 800b0e4:	0800b67d 	.word	0x0800b67d
 800b0e8:	0800b693 	.word	0x0800b693
 800b0ec:	0800b693 	.word	0x0800b693
 800b0f0:	0800b67d 	.word	0x0800b67d
 800b0f4:	0800b67d 	.word	0x0800b67d
 800b0f8:	0800b19d 	.word	0x0800b19d
 800b0fc:	0800b67d 	.word	0x0800b67d
 800b100:	0800b693 	.word	0x0800b693
 800b104:	0800b693 	.word	0x0800b693
 800b108:	0800b67d 	.word	0x0800b67d
 800b10c:	0800b67d 	.word	0x0800b67d
 800b110:	0800b693 	.word	0x0800b693
 800b114:	0800b693 	.word	0x0800b693
 800b118:	0800b5d3 	.word	0x0800b5d3
 800b11c:	0800b5fd 	.word	0x0800b5fd
 800b120:	0800b67d 	.word	0x0800b67d
 800b124:	0800b67d 	.word	0x0800b67d
 800b128:	0800b67d 	.word	0x0800b67d
 800b12c:	0800b67d 	.word	0x0800b67d
 800b130:	0800b693 	.word	0x0800b693
 800b134:	0800b693 	.word	0x0800b693
 800b138:	0800b693 	.word	0x0800b693
 800b13c:	0800b693 	.word	0x0800b693
 800b140:	0800b67d 	.word	0x0800b67d
 800b144:	0800b693 	.word	0x0800b693
 800b148:	0800b693 	.word	0x0800b693
 800b14c:	0800b693 	.word	0x0800b693
 800b150:	0800b693 	.word	0x0800b693
 800b154:	0800b693 	.word	0x0800b693
 800b158:	0800b693 	.word	0x0800b693
 800b15c:	0800b693 	.word	0x0800b693
 800b160:	0800b693 	.word	0x0800b693
 800b164:	0800b693 	.word	0x0800b693
 800b168:	0800b693 	.word	0x0800b693
 800b16c:	0800b693 	.word	0x0800b693
 800b170:	0800b693 	.word	0x0800b693
 800b174:	0800b693 	.word	0x0800b693
 800b178:	0800b693 	.word	0x0800b693
 800b17c:	0800b693 	.word	0x0800b693
 800b180:	0800b693 	.word	0x0800b693
 800b184:	0800b66d 	.word	0x0800b66d
 800b188:	0800b67d 	.word	0x0800b67d
 800b18c:	0800b675 	.word	0x0800b675
 800b190:	0800b693 	.word	0x0800b693
 800b194:	0800b693 	.word	0x0800b693
 800b198:	0800b67d 	.word	0x0800b67d
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f040 826c 	bne.w	800b680 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d114      	bne.n	800b1ee <_ZN3BTD14HCI_event_taskEv+0x186>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b1ca:	2b10      	cmp	r3, #16
 800b1cc:	d10f      	bne.n	800b1ee <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800b1ec:	e059      	b.n	800b2a2 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d12a      	bne.n	800b24e <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b1fe:	2b10      	cmp	r3, #16
 800b200:	d125      	bne.n	800b24e <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d114      	bne.n	800b23a <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10f      	bne.n	800b23a <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b220:	f003 0308 	and.w	r3, r3, #8
 800b224:	2b00      	cmp	r3, #0
 800b226:	d004      	beq.n	800b232 <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800b230:	e003      	b.n	800b23a <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b244:	b29a      	uxth	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800b24c:	e029      	b.n	800b2a2 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b254:	2b09      	cmp	r3, #9
 800b256:	f040 8213 	bne.w	800b680 <_ZN3BTD14HCI_event_taskEv+0x618>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b260:	2b10      	cmp	r3, #16
 800b262:	f040 820d 	bne.w	800b680 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800b266:	2300      	movs	r3, #0
 800b268:	75fb      	strb	r3, [r7, #23]
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	2b05      	cmp	r3, #5
 800b26e:	d80e      	bhi.n	800b28e <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	1d9a      	adds	r2, r3, #6
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	440a      	add	r2, r1
 800b27a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	4413      	add	r3, r2
 800b282:	460a      	mov	r2, r1
 800b284:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	3301      	adds	r3, #1
 800b28a:	75fb      	strb	r3, [r7, #23]
 800b28c:	e7ed      	b.n	800b26a <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b294:	f043 0320 	orr.w	r3, r3, #32
 800b298:	b29a      	uxth	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800b2a0:	e1ee      	b.n	800b680 <_ZN3BTD14HCI_event_taskEv+0x618>
 800b2a2:	e1ed      	b.n	800b680 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	d921      	bls.n	800b2f2 <_ZN3BTD14HCI_event_taskEv+0x28a>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d104      	bne.n	800b2c2 <_ZN3BTD14HCI_event_taskEv+0x25a>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d017      	beq.n	800b2f2 <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	220a      	movs	r2, #10
 800b2ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800b302:	e1c6      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 81ba 	beq.w	800b684 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800b310:	2300      	movs	r3, #0
 800b312:	75bb      	strb	r3, [r7, #22]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b31a:	7dba      	ldrb	r2, [r7, #22]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	f080 81b1 	bcs.w	800b684 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b328:	00db      	lsls	r3, r3, #3
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	7dbb      	ldrb	r3, [r7, #22]
 800b32e:	4619      	mov	r1, r3
 800b330:	0049      	lsls	r1, r1, #1
 800b332:	440b      	add	r3, r1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	4413      	add	r3, r2
 800b338:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800b33a:	2300      	movs	r3, #0
 800b33c:	757b      	strb	r3, [r7, #21]
 800b33e:	7d7b      	ldrb	r3, [r7, #21]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d811      	bhi.n	800b368 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800b344:	7d7b      	ldrb	r3, [r7, #21]
 800b346:	1d1a      	adds	r2, r3, #4
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	441a      	add	r2, r3
 800b34c:	7d7b      	ldrb	r3, [r7, #21]
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	440a      	add	r2, r1
 800b352:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	4413      	add	r3, r2
 800b35a:	460a      	mov	r2, r1
 800b35c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800b360:	7d7b      	ldrb	r3, [r7, #21]
 800b362:	3301      	adds	r3, #1
 800b364:	757b      	strb	r3, [r7, #21]
 800b366:	e7ea      	b.n	800b33e <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d038      	beq.n	800b3e4 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d133      	bne.n	800b3e4 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b382:	2b05      	cmp	r3, #5
 800b384:	d12e      	bne.n	800b3e4 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b38c:	f003 030c 	and.w	r3, r3, #12
 800b390:	2b00      	cmp	r3, #0
 800b392:	d027      	beq.n	800b3e4 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	753b      	strb	r3, [r7, #20]
 800b3a0:	7d3b      	ldrb	r3, [r7, #20]
 800b3a2:	2b05      	cmp	r3, #5
 800b3a4:	d814      	bhi.n	800b3d0 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800b3a6:	7d3b      	ldrb	r3, [r7, #20]
 800b3a8:	1cd9      	adds	r1, r3, #3
 800b3aa:	7dba      	ldrb	r2, [r7, #22]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	005b      	lsls	r3, r3, #1
 800b3b0:	4413      	add	r3, r2
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	18ca      	adds	r2, r1, r3
 800b3b6:	7d3b      	ldrb	r3, [r7, #20]
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800b3c8:	7d3b      	ldrb	r3, [r7, #20]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	753b      	strb	r3, [r7, #20]
 800b3ce:	e7e7      	b.n	800b3a0 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800b3e2:	e03a      	b.n	800b45a <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d031      	beq.n	800b452 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	2b05      	cmp	r3, #5
 800b3fa:	d12a      	bne.n	800b452 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b402:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800b406:	2b00      	cmp	r3, #0
 800b408:	d023      	beq.n	800b452 <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800b40a:	2300      	movs	r3, #0
 800b40c:	74fb      	strb	r3, [r7, #19]
 800b40e:	7cfb      	ldrb	r3, [r7, #19]
 800b410:	2b05      	cmp	r3, #5
 800b412:	d814      	bhi.n	800b43e <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800b414:	7cfb      	ldrb	r3, [r7, #19]
 800b416:	1cd9      	adds	r1, r3, #3
 800b418:	7dba      	ldrb	r2, [r7, #22]
 800b41a:	4613      	mov	r3, r2
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	4413      	add	r3, r2
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	18ca      	adds	r2, r1, r3
 800b424:	7cfb      	ldrb	r3, [r7, #19]
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	440a      	add	r2, r1
 800b42a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	4413      	add	r3, r2
 800b432:	460a      	mov	r2, r1
 800b434:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800b436:	7cfb      	ldrb	r3, [r7, #19]
 800b438:	3301      	adds	r3, #1
 800b43a:	74fb      	strb	r3, [r7, #19]
 800b43c:	e7e7      	b.n	800b40e <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b448:	b29a      	uxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800b450:	e003      	b.n	800b45a <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800b452:	7dbb      	ldrb	r3, [r7, #22]
 800b454:	3301      	adds	r3, #1
 800b456:	75bb      	strb	r3, [r7, #22]
 800b458:	e75c      	b.n	800b314 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800b45a:	e113      	b.n	800b684 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b474:	2b00      	cmp	r3, #0
 800b476:	d11a      	bne.n	800b4ae <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b47e:	b21a      	sxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	b21b      	sxth	r3, r3
 800b48a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b48e:	b21b      	sxth	r3, r3
 800b490:	4313      	orrs	r3, r2
 800b492:	b21b      	sxth	r3, r3
 800b494:	b29a      	uxth	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b4a0:	f043 0302 	orr.w	r3, r3, #2
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800b4ac:	e0f1      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2206      	movs	r2, #6
 800b4b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800b4b6:	e0ec      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f040 80e2 	bne.w	800b688 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b4ca:	f043 0304 	orr.w	r3, r3, #4
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b4dc:	f023 0302 	bic.w	r3, r3, #2
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800b4e8:	e0ce      	b.n	800b688 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f040 80cb 	bne.w	800b68c <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	74bb      	strb	r3, [r7, #18]
 800b4fa:	7cbb      	ldrb	r3, [r7, #18]
 800b4fc:	2b1d      	cmp	r3, #29
 800b4fe:	d818      	bhi.n	800b532 <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800b500:	7cbb      	ldrb	r3, [r7, #18]
 800b502:	f103 0209 	add.w	r2, r3, #9
 800b506:	7cbb      	ldrb	r3, [r7, #18]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	440a      	add	r2, r1
 800b50c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	4413      	add	r3, r2
 800b514:	460a      	mov	r2, r1
 800b516:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800b51a:	7cbb      	ldrb	r3, [r7, #18]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	4413      	add	r3, r2
 800b520:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800b528:	7cbb      	ldrb	r3, [r7, #18]
 800b52a:	3301      	adds	r3, #1
 800b52c:	74bb      	strb	r3, [r7, #18]
 800b52e:	e7e4      	b.n	800b4fa <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800b530:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b538:	f043 0308 	orr.w	r3, r3, #8
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800b544:	e0a2      	b.n	800b68c <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800b546:	2300      	movs	r3, #0
 800b548:	747b      	strb	r3, [r7, #17]
 800b54a:	7c7b      	ldrb	r3, [r7, #17]
 800b54c:	2b05      	cmp	r3, #5
 800b54e:	d80e      	bhi.n	800b56e <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800b550:	7c7b      	ldrb	r3, [r7, #17]
 800b552:	1c9a      	adds	r2, r3, #2
 800b554:	7c7b      	ldrb	r3, [r7, #17]
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	440a      	add	r2, r1
 800b55a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	4413      	add	r3, r2
 800b562:	460a      	mov	r2, r1
 800b564:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800b566:	7c7b      	ldrb	r3, [r7, #17]
 800b568:	3301      	adds	r3, #1
 800b56a:	747b      	strb	r3, [r7, #17]
 800b56c:	e7ed      	b.n	800b54a <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800b56e:	2300      	movs	r3, #0
 800b570:	743b      	strb	r3, [r7, #16]
 800b572:	7c3b      	ldrb	r3, [r7, #16]
 800b574:	2b02      	cmp	r3, #2
 800b576:	d810      	bhi.n	800b59a <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800b578:	7c3b      	ldrb	r3, [r7, #16]
 800b57a:	f103 0208 	add.w	r2, r3, #8
 800b57e:	7c3b      	ldrb	r3, [r7, #16]
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	440a      	add	r2, r1
 800b584:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	4413      	add	r3, r2
 800b58c:	460a      	mov	r2, r1
 800b58e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800b592:	7c3b      	ldrb	r3, [r7, #16]
 800b594:	3301      	adds	r3, #1
 800b596:	743b      	strb	r3, [r7, #16]
 800b598:	e7eb      	b.n	800b572 <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b5a0:	f003 030f 	and.w	r3, r3, #15
 800b5a4:	2b05      	cmp	r3, #5
 800b5a6:	d10a      	bne.n	800b5be <_ZN3BTD14HCI_event_taskEv+0x556>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b5ae:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b5c4:	f043 0310 	orr.w	r3, r3, #16
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800b5d0:	e05f      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 feec 	bl	800c3ba <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800b5e2:	e056      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fee4 	bl	800c3ba <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800b5f2:	e04e      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 ff93 	bl	800c520 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800b5fa:	e04a      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 ffca 	bl	800c596 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800b602:	e046      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d123      	bne.n	800b656 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00c      	beq.n	800b632 <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b61e:	f083 0301 	eor.w	r3, r3, #1
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d004      	beq.n	800b632 <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800b630:	e02e      	b.n	800b690 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d029      	beq.n	800b690 <_ZN3BTD14HCI_event_taskEv+0x628>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b642:	f083 0301 	eor.w	r3, r3, #1
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d021      	beq.n	800b690 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800b654:	e01c      	b.n	800b690 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	8b5b      	ldrh	r3, [r3, #26]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 f882 	bl	800c766 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2210      	movs	r2, #16
 800b666:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800b66a:	e011      	b.n	800b690 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 ffcd 	bl	800c60c <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800b672:	e00e      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 f810 	bl	800c69a <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800b67a:	e00a      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800b67c:	bf00      	nop
 800b67e:	e008      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b680:	bf00      	nop
 800b682:	e006      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b684:	bf00      	nop
 800b686:	e004      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b688:	bf00      	nop
 800b68a:	e002      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b68c:	bf00      	nop
 800b68e:	e000      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b690:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800b692:	bf00      	nop
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bdb0      	pop	{r4, r5, r7, pc}
 800b69a:	bf00      	nop

0800b69c <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6aa:	2b13      	cmp	r3, #19
 800b6ac:	f200 82ef 	bhi.w	800bc8e <_ZN3BTD8HCI_taskEv+0x5f2>
 800b6b0:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <_ZN3BTD8HCI_taskEv+0x1c>)
 800b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b6:	bf00      	nop
 800b6b8:	0800b709 	.word	0x0800b709
 800b6bc:	0800b743 	.word	0x0800b743
 800b6c0:	0800b7c9 	.word	0x0800b7c9
 800b6c4:	0800b7e9 	.word	0x0800b7e9
 800b6c8:	0800b809 	.word	0x0800b809
 800b6cc:	0800b85d 	.word	0x0800b85d
 800b6d0:	0800b903 	.word	0x0800b903
 800b6d4:	0800b931 	.word	0x0800b931
 800b6d8:	0800b96b 	.word	0x0800b96b
 800b6dc:	0800b993 	.word	0x0800b993
 800b6e0:	0800b9c9 	.word	0x0800b9c9
 800b6e4:	0800ba27 	.word	0x0800ba27
 800b6e8:	0800ba65 	.word	0x0800ba65
 800b6ec:	0800bb8b 	.word	0x0800bb8b
 800b6f0:	0800bc8f 	.word	0x0800bc8f
 800b6f4:	0800bbd1 	.word	0x0800bbd1
 800b6f8:	0800bbff 	.word	0x0800bbff
 800b6fc:	0800b893 	.word	0x0800b893
 800b700:	0800b8c9 	.word	0x0800b8c9
 800b704:	0800b8e9 	.word	0x0800b8e9
                case HCI_INIT_STATE:
                        hci_counter++;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800b70e:	3301      	adds	r3, #1
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b724:	429a      	cmp	r2, r3
 800b726:	f240 82b4 	bls.w	800bc92 <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fb7d 	bl	800be2a <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800b740:	e2a7      	b.n	800bc92 <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800b748:	3301      	adds	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f001 f830 	bl	800c7d6 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800b776:	e28e      	b.n	800bc96 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b784:	429a      	cmp	r2, r3
 800b786:	f240 8286 	bls.w	800bc96 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b790:	461a      	mov	r2, r3
 800b792:	0092      	lsls	r2, r2, #2
 800b794:	4413      	add	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	b29a      	uxth	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b7a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b7aa:	d904      	bls.n	800b7b6 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b7b2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800b7c6:	e266      	b.n	800bc96 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 8261 	beq.w	800bc9a <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fb72 	bl	800beca <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800b7e6:	e258      	b.n	800bc9a <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 8253 	beq.w	800bc9e <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fb8a 	bl	800bf12 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2204      	movs	r2, #4
 800b802:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800b806:	e24a      	b.n	800bc9e <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 8245 	beq.w	800bca2 <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fc5d 	bl	800c0e6 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2205      	movs	r2, #5
 800b830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800b834:	e235      	b.n	800bca2 <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d008      	beq.n	800b852 <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800b840:	2100      	movs	r1, #0
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fb89 	bl	800bf5a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2211      	movs	r2, #17
 800b84c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800b850:	e227      	b.n	800bca2 <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2206      	movs	r2, #6
 800b856:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800b85a:	e222      	b.n	800bca2 <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 821d 	beq.w	800bca6 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b872:	2b00      	cmp	r3, #0
 800b874:	d008      	beq.n	800b888 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800b876:	2100      	movs	r1, #0
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fb6e 	bl	800bf5a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2211      	movs	r2, #17
 800b882:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800b886:	e20e      	b.n	800bca6 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2206      	movs	r2, #6
 800b88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800b890:	e209      	b.n	800bca6 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 8204 	beq.w	800bcaa <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d008      	beq.n	800b8be <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fc9d 	bl	800c1ee <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2212      	movs	r2, #18
 800b8b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800b8bc:	e1f5      	b.n	800bcaa <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2206      	movs	r2, #6
 800b8c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800b8c6:	e1f0      	b.n	800bcaa <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 81eb 	beq.w	800bcae <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fc4d 	bl	800c178 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2213      	movs	r2, #19
 800b8e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800b8e6:	e1e2      	b.n	800bcae <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 81dd 	beq.w	800bcb2 <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2206      	movs	r2, #6
 800b8fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800b900:	e1d7      	b.n	800bcb2 <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d104      	bne.n	800b916 <_ZN3BTD8HCI_taskEv+0x27a>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fc8f 	bl	800c23a <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2207      	movs	r2, #7
 800b920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800b924:	e1d8      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	220a      	movs	r2, #10
 800b92a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800b92e:	e1d3      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 81bb 	beq.w	800bcb6 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fcb2 	bl	800c2aa <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d007      	beq.n	800b960 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fb74 	bl	800c03e <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	220c      	movs	r2, #12
 800b95a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800b95e:	e1aa      	b.n	800bcb6 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2208      	movs	r2, #8
 800b964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800b968:	e1a5      	b.n	800bcb6 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 81a0 	beq.w	800bcba <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fcac 	bl	800c2e0 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2209      	movs	r2, #9
 800b98c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800b990:	e193      	b.n	800bcba <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 818e 	beq.w	800bcbe <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d007      	beq.n	800b9c0 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fead 	bl	800c710 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	220a      	movs	r2, #10
 800b9ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800b9be:	e17e      	b.n	800bcbe <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fc8d 	bl	800c2e0 <_ZN3BTD11hci_connectEv>
                        break;
 800b9c6:	e17a      	b.n	800bcbe <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ce:	f083 0301 	eor.w	r3, r3, #1
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8174 	beq.w	800bcc2 <_ZN3BTD8HCI_taskEv+0x626>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b9e0:	f083 0301 	eor.w	r3, r3, #1
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 816b 	beq.w	800bcc2 <_ZN3BTD8HCI_taskEv+0x626>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b9f2:	f083 0301 	eor.w	r3, r3, #1
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8162 	beq.w	800bcc2 <_ZN3BTD8HCI_taskEv+0x626>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ba04:	f083 0301 	eor.w	r3, r3, #1
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 8159 	beq.w	800bcc2 <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa29 	bl	800be68 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	220b      	movs	r2, #11
 800ba20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ba24:	e14d      	b.n	800bcc2 <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba2c:	f003 0310 	and.w	r3, r3, #16
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 faff 	bl	800c03e <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	220c      	movs	r2, #12
 800ba44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ba48:	e13d      	b.n	800bcc6 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8136 	beq.w	800bcc6 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2210      	movs	r2, #16
 800ba5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ba62:	e130      	b.n	800bcc6 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 812b 	beq.w	800bcca <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3322      	adds	r3, #34	; 0x22
 800ba78:	2208      	movs	r2, #8
 800ba7a:	4999      	ldr	r1, [pc, #612]	; (800bce0 <_ZN3BTD8HCI_taskEv+0x644>)
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f004 ffc7 	bl	8010a10 <strncmp>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d147      	bne.n	800bb18 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3322      	adds	r3, #34	; 0x22
 800baac:	2216      	movs	r2, #22
 800baae:	498d      	ldr	r1, [pc, #564]	; (800bce4 <_ZN3BTD8HCI_taskEv+0x648>)
 800bab0:	4618      	mov	r0, r3
 800bab2:	f004 ffad 	bl	8010a10 <strncmp>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d104      	bne.n	800bac6 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bac4:	e028      	b.n	800bb18 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	3322      	adds	r3, #34	; 0x22
 800baca:	2216      	movs	r2, #22
 800bacc:	4986      	ldr	r1, [pc, #536]	; (800bce8 <_ZN3BTD8HCI_taskEv+0x64c>)
 800bace:	4618      	mov	r0, r3
 800bad0:	f004 ff9e 	bl	8010a10 <strncmp>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d110      	bne.n	800bafc <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bafa:	e00d      	b.n	800bb18 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3322      	adds	r3, #34	; 0x22
 800bb00:	2213      	movs	r2, #19
 800bb02:	497a      	ldr	r1, [pc, #488]	; (800bcec <_ZN3BTD8HCI_taskEv+0x650>)
 800bb04:	4618      	mov	r0, r3
 800bb06:	f004 ff83 	bl	8010a10 <strncmp>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d103      	bne.n	800bb18 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d117      	bne.n	800bb52 <_ZN3BTD8HCI_taskEv+0x4b6>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800bb28:	2b25      	cmp	r3, #37	; 0x25
 800bb2a:	d112      	bne.n	800bb52 <_ZN3BTD8HCI_taskEv+0x4b6>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800bb32:	2b08      	cmp	r3, #8
 800bb34:	d10d      	bne.n	800bb52 <_ZN3BTD8HCI_taskEv+0x4b6>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3322      	adds	r3, #34	; 0x22
 800bb3a:	2213      	movs	r2, #19
 800bb3c:	496c      	ldr	r1, [pc, #432]	; (800bcf0 <_ZN3BTD8HCI_taskEv+0x654>)
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f004 ff66 	bl	8010a10 <strncmp>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d103      	bne.n	800bb52 <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d104      	bne.n	800bb66 <_ZN3BTD8HCI_taskEv+0x4ca>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d009      	beq.n	800bb7a <_ZN3BTD8HCI_taskEv+0x4de>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2208      	movs	r2, #8
 800bb74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800bb78:	e0a7      	b.n	800bcca <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa17 	bl	800bfae <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	220d      	movs	r2, #13
 800bb84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bb88:	e09f      	b.n	800bcca <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bb90:	f003 0302 	and.w	r3, r3, #2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 809a 	beq.w	800bcce <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	220f      	movs	r2, #15
 800bbca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bbce:	e07e      	b.n	800bcce <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800bbe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbea:	d972      	bls.n	800bcd2 <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	220a      	movs	r2, #10
 800bbf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bbfc:	e069      	b.n	800bcd2 <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d064      	beq.n	800bcd6 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3389      	adds	r3, #137	; 0x89
 800bc18:	2240      	movs	r2, #64	; 0x40
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f004 feab 	bl	8010978 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	33c9      	adds	r3, #201	; 0xc9
 800bc26:	2240      	movs	r2, #64	; 0x40
 800bc28:	2100      	movs	r1, #0
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f004 fea4 	bl	8010978 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	220a      	movs	r2, #10
 800bc88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bc8c:	e023      	b.n	800bcd6 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800bc8e:	bf00      	nop
 800bc90:	e022      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bc92:	bf00      	nop
 800bc94:	e020      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bc96:	bf00      	nop
 800bc98:	e01e      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bc9a:	bf00      	nop
 800bc9c:	e01c      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bc9e:	bf00      	nop
 800bca0:	e01a      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bca2:	bf00      	nop
 800bca4:	e018      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bca6:	bf00      	nop
 800bca8:	e016      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcaa:	bf00      	nop
 800bcac:	e014      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcae:	bf00      	nop
 800bcb0:	e012      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcb2:	bf00      	nop
 800bcb4:	e010      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcb6:	bf00      	nop
 800bcb8:	e00e      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcba:	bf00      	nop
 800bcbc:	e00c      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcbe:	bf00      	nop
 800bcc0:	e00a      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcc2:	bf00      	nop
 800bcc4:	e008      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcc6:	bf00      	nop
 800bcc8:	e006      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcca:	bf00      	nop
 800bccc:	e004      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcce:	bf00      	nop
 800bcd0:	e002      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcd2:	bf00      	nop
 800bcd4:	e000      	b.n	800bcd8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bcd6:	bf00      	nop
        }
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	08010c00 	.word	0x08010c00
 800bce4:	08010c0c 	.word	0x08010c0c
 800bce8:	08010c24 	.word	0x08010c24
 800bcec:	08010c3c 	.word	0x08010c3c
 800bcf0:	08010c50 	.word	0x08010c50

0800bcf4 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800bcf4:	b5b0      	push	{r4, r5, r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af02      	add	r7, sp, #8
 800bcfa:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800bcfc:	2340      	movs	r3, #64	; 0x40
 800bcfe:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	33c9      	adds	r3, #201	; 0xc9
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800bd1a:	f107 050a 	add.w	r5, r7, #10
 800bd1e:	9201      	str	r2, [sp, #4]
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462b      	mov	r3, r5
 800bd24:	4622      	mov	r2, r4
 800bd26:	f003 f916 	bl	800ef56 <_ZN3USB10inTransferEhhPtPhh>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800bd2e:	7b7b      	ldrb	r3, [r7, #13]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d125      	bne.n	800bd80 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800bd34:	897b      	ldrh	r3, [r7, #10]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d022      	beq.n	800bd80 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	d81d      	bhi.n	800bd80 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	3318      	adds	r3, #24
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d011      	beq.n	800bd78 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	3318      	adds	r3, #24
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	6858      	ldr	r0, [r3, #4]
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	3318      	adds	r3, #24
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	32c9      	adds	r2, #201	; 0xc9
 800bd74:	4611      	mov	r1, r2
 800bd76:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	73fb      	strb	r3, [r7, #15]
 800bd7e:	e7de      	b.n	800bd3e <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800bd80:	2300      	movs	r3, #0
 800bd82:	73bb      	strb	r3, [r7, #14]
 800bd84:	7bbb      	ldrb	r3, [r7, #14]
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d81c      	bhi.n	800bdc4 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	3318      	adds	r3, #24
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d010      	beq.n	800bdbc <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	3318      	adds	r3, #24
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	6859      	ldr	r1, [r3, #4]
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	3318      	adds	r3, #24
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4608      	mov	r0, r1
 800bdba:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	73bb      	strb	r3, [r7, #14]
 800bdc2:	e7df      	b.n	800bd84 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bdb0      	pop	{r4, r5, r7, pc}

0800bdcc <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08c      	sub	sp, #48	; 0x30
 800bdd0:	af08      	add	r7, sp, #32
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bde0:	f023 0301 	bic.w	r3, r3, #1
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	9306      	str	r3, [sp, #24]
 800be04:	88fb      	ldrh	r3, [r7, #6]
 800be06:	9305      	str	r3, [sp, #20]
 800be08:	88fb      	ldrh	r3, [r7, #6]
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	2300      	movs	r3, #0
 800be0e:	9303      	str	r3, [sp, #12]
 800be10:	2300      	movs	r3, #0
 800be12:	9302      	str	r3, [sp, #8]
 800be14:	2300      	movs	r3, #0
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	2300      	movs	r3, #0
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	2320      	movs	r3, #32
 800be1e:	f002 ffc2 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800be22:	bf00      	nop
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b082      	sub	sp, #8
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2203      	movs	r2, #3
 800be3e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	220c      	movs	r2, #12
 800be46:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3389      	adds	r3, #137	; 0x89
 800be56:	2203      	movs	r2, #3
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff ffb6 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be76:	f023 0310 	bic.w	r3, r3, #16
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	221a      	movs	r2, #26
 800be86:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	220c      	movs	r2, #12
 800be8e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d004      	beq.n	800beac <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2203      	movs	r2, #3
 800bea6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800beaa:	e003      	b.n	800beb4 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3389      	adds	r3, #137	; 0x89
 800beb8:	2204      	movs	r2, #4
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff ff85 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800bec2:	bf00      	nop
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bed8:	f023 0320 	bic.w	r3, r3, #32
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2209      	movs	r2, #9
 800bee8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2210      	movs	r2, #16
 800bef0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3389      	adds	r3, #137	; 0x89
 800bf00:	2203      	movs	r2, #3
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff ff61 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bf20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2210      	movs	r2, #16
 800bf38:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3389      	adds	r3, #137	; 0x89
 800bf48:	2203      	movs	r2, #3
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ff3d 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800bf52:	bf00      	nop
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b082      	sub	sp, #8
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	460b      	mov	r3, r1
 800bf64:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bf6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2210      	movs	r2, #16
 800bf84:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	78fa      	ldrb	r2, [r7, #3]
 800bf94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3389      	adds	r3, #137	; 0x89
 800bf9c:	2204      	movs	r2, #4
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7ff ff13 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800bfa6:	bf00      	nop
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bfbc:	f023 0302 	bic.w	r3, r3, #2
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2209      	movs	r2, #9
 800bfcc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2204      	movs	r2, #4
 800bfd4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2207      	movs	r2, #7
 800bfdc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7f1a      	ldrb	r2, [r3, #28]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7f5a      	ldrb	r2, [r3, #29]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7f9a      	ldrb	r2, [r3, #30]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7fda      	ldrb	r2, [r3, #31]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	3389      	adds	r3, #137	; 0x89
 800c02c:	220a      	movs	r2, #10
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff fecb 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c036:	bf00      	nop
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c04c:	f023 0308 	bic.w	r3, r3, #8
 800c050:	b29a      	uxth	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2219      	movs	r2, #25
 800c05c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2204      	movs	r2, #4
 800c064:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	220a      	movs	r2, #10
 800c06c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7f1a      	ldrb	r2, [r3, #28]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7f5a      	ldrb	r2, [r3, #29]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7f9a      	ldrb	r2, [r3, #30]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7fda      	ldrb	r2, [r3, #31]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3389      	adds	r3, #137	; 0x89
 800c0d4:	220d      	movs	r2, #13
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff fe77 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c0de:	bf00      	nop
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800c0e6:	b590      	push	{r4, r7, lr}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2213      	movs	r2, #19
 800c0f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	220c      	movs	r2, #12
 800c0fc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800c100:	6838      	ldr	r0, [r7, #0]
 800c102:	f7f4 f881 	bl	8000208 <strlen>
 800c106:	4603      	mov	r3, r0
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	3301      	adds	r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
 800c118:	7bfc      	ldrb	r4, [r7, #15]
 800c11a:	6838      	ldr	r0, [r7, #0]
 800c11c:	f7f4 f874 	bl	8000208 <strlen>
 800c120:	4603      	mov	r3, r0
 800c122:	429c      	cmp	r4, r3
 800c124:	d20e      	bcs.n	800c144 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	683a      	ldr	r2, [r7, #0]
 800c12a:	441a      	add	r2, r3
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	3303      	adds	r3, #3
 800c130:	7811      	ldrb	r1, [r2, #0]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	460a      	mov	r2, r1
 800c138:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	3301      	adds	r3, #1
 800c140:	73fb      	strb	r3, [r7, #15]
 800c142:	e7e9      	b.n	800c118 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800c144:	7bfb      	ldrb	r3, [r7, #15]
 800c146:	3303      	adds	r3, #3
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	4413      	add	r3, r2
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800c158:	6838      	ldr	r0, [r7, #0]
 800c15a:	f7f4 f855 	bl	8000208 <strlen>
 800c15e:	4603      	mov	r3, r0
 800c160:	b29b      	uxth	r3, r3
 800c162:	3304      	adds	r3, #4
 800c164:	b29b      	uxth	r3, r3
 800c166:	461a      	mov	r2, r3
 800c168:	4621      	mov	r1, r4
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7ff fe2e 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c170:	bf00      	nop
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	bd90      	pop	{r4, r7, pc}

0800c178 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	220c      	movs	r2, #12
 800c18c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2208      	movs	r2, #8
 800c194:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	22ff      	movs	r2, #255	; 0xff
 800c19c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	22ff      	movs	r2, #255	; 0xff
 800c1a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	22ff      	movs	r2, #255	; 0xff
 800c1ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	22ff      	movs	r2, #255	; 0xff
 800c1b4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	22ff      	movs	r2, #255	; 0xff
 800c1bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	221f      	movs	r2, #31
 800c1c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	22ff      	movs	r2, #255	; 0xff
 800c1cc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3389      	adds	r3, #137	; 0x89
 800c1dc:	220b      	movs	r2, #11
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff fdf3 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2256      	movs	r2, #86	; 0x56
 800c1fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	220c      	movs	r2, #12
 800c206:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800c212:	78fb      	ldrb	r3, [r7, #3]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d001      	beq.n	800c21c <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800c218:	2201      	movs	r2, #1
 800c21a:	e000      	b.n	800c21e <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800c21c:	2200      	movs	r2, #0
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3389      	adds	r3, #137	; 0x89
 800c228:	2204      	movs	r2, #4
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fdcd 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2204      	movs	r2, #4
 800c260:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2205      	movs	r2, #5
 800c268:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2233      	movs	r2, #51	; 0x33
 800c270:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	228b      	movs	r2, #139	; 0x8b
 800c278:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	229e      	movs	r2, #158	; 0x9e
 800c280:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2230      	movs	r2, #48	; 0x30
 800c288:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	220a      	movs	r2, #10
 800c290:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3389      	adds	r3, #137	; 0x89
 800c298:	2208      	movs	r2, #8
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff fd95 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2204      	movs	r2, #4
 800c2be:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3389      	adds	r3, #137	; 0x89
 800c2ce:	2203      	movs	r2, #3
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff fd7a 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	331c      	adds	r3, #28
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f804 	bl	800c2fc <_ZN3BTD11hci_connectEPh>
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c30c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2205      	movs	r2, #5
 800c31c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2204      	movs	r2, #4
 800c324:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	220d      	movs	r2, #13
 800c32c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	785a      	ldrb	r2, [r3, #1]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	789a      	ldrb	r2, [r3, #2]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	78da      	ldrb	r2, [r3, #3]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	791a      	ldrb	r2, [r3, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	795a      	ldrb	r2, [r3, #5]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2218      	movs	r2, #24
 800c370:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	22cc      	movs	r2, #204	; 0xcc
 800c378:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3389      	adds	r3, #137	; 0x89
 800c3a8:	2210      	movs	r2, #16
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff fd0d 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800c3ba:	b590      	push	{r4, r7, lr}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	220d      	movs	r2, #13
 800c3c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2204      	movs	r2, #4
 800c3ce:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2217      	movs	r2, #23
 800c3d6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	7f1a      	ldrb	r2, [r3, #28]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	7f5a      	ldrb	r2, [r3, #29]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	7f9a      	ldrb	r2, [r3, #30]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7fda      	ldrb	r2, [r3, #31]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c420:	2b00      	cmp	r3, #0
 800c422:	d03f      	beq.n	800c4a4 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2206      	movs	r2, #6
 800c428:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800c432:	2b00      	cmp	r3, #0
 800c434:	d013      	beq.n	800c45e <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	2b05      	cmp	r3, #5
 800c43e:	d822      	bhi.n	800c486 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800c440:	7bfa      	ldrb	r2, [r7, #15]
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	330a      	adds	r3, #10
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	440a      	add	r2, r1
 800c44a:	7d11      	ldrb	r1, [r2, #20]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	4413      	add	r3, r2
 800c450:	460a      	mov	r2, r1
 800c452:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	3301      	adds	r3, #1
 800c45a:	73fb      	strb	r3, [r7, #15]
 800c45c:	e7ed      	b.n	800c43a <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800c45e:	2300      	movs	r3, #0
 800c460:	73bb      	strb	r3, [r7, #14]
 800c462:	7bbb      	ldrb	r3, [r7, #14]
 800c464:	2b05      	cmp	r3, #5
 800c466:	d80e      	bhi.n	800c486 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800c468:	7bba      	ldrb	r2, [r7, #14]
 800c46a:	7bbb      	ldrb	r3, [r7, #14]
 800c46c:	330a      	adds	r3, #10
 800c46e:	6879      	ldr	r1, [r7, #4]
 800c470:	440a      	add	r2, r1
 800c472:	7f11      	ldrb	r1, [r2, #28]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	4413      	add	r3, r2
 800c478:	460a      	mov	r2, r1
 800c47a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	3301      	adds	r3, #1
 800c482:	73bb      	strb	r3, [r7, #14]
 800c484:	e7ed      	b.n	800c462 <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800c486:	2310      	movs	r3, #16
 800c488:	737b      	strb	r3, [r7, #13]
 800c48a:	7b7b      	ldrb	r3, [r7, #13]
 800c48c:	2b19      	cmp	r3, #25
 800c48e:	d83c      	bhi.n	800c50a <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800c490:	7b7b      	ldrb	r3, [r7, #13]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	4413      	add	r3, r2
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800c49c:	7b7b      	ldrb	r3, [r7, #13]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	737b      	strb	r3, [r7, #13]
 800c4a2:	e7f2      	b.n	800c48a <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7f3 fead 	bl	8000208 <strlen>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	733b      	strb	r3, [r7, #12]
 800c4bc:	7b3c      	ldrb	r4, [r7, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f3 fea0 	bl	8000208 <strlen>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	429c      	cmp	r4, r3
 800c4cc:	d20f      	bcs.n	800c4ee <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	691a      	ldr	r2, [r3, #16]
 800c4d2:	7b3b      	ldrb	r3, [r7, #12]
 800c4d4:	441a      	add	r2, r3
 800c4d6:	7b3b      	ldrb	r3, [r7, #12]
 800c4d8:	330a      	adds	r3, #10
 800c4da:	7811      	ldrb	r1, [r2, #0]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	4413      	add	r3, r2
 800c4e0:	460a      	mov	r2, r1
 800c4e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800c4e6:	7b3b      	ldrb	r3, [r7, #12]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	733b      	strb	r3, [r7, #12]
 800c4ec:	e7e6      	b.n	800c4bc <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800c4ee:	7b3b      	ldrb	r3, [r7, #12]
 800c4f0:	2b0f      	cmp	r3, #15
 800c4f2:	d80a      	bhi.n	800c50a <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800c4f4:	7b3b      	ldrb	r3, [r7, #12]
 800c4f6:	330a      	adds	r3, #10
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800c502:	7b3b      	ldrb	r3, [r7, #12]
 800c504:	3301      	adds	r3, #1
 800c506:	733b      	strb	r3, [r7, #12]
 800c508:	e7f1      	b.n	800c4ee <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3389      	adds	r3, #137	; 0x89
 800c50e:	221a      	movs	r2, #26
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff fc5a 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c518:	bf00      	nop
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd90      	pop	{r4, r7, pc}

0800c520 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	220e      	movs	r2, #14
 800c52c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2204      	movs	r2, #4
 800c534:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2206      	movs	r2, #6
 800c53c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7f1a      	ldrb	r2, [r3, #28]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7f5a      	ldrb	r2, [r3, #29]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	7f9a      	ldrb	r2, [r3, #30]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	7fda      	ldrb	r2, [r3, #31]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3389      	adds	r3, #137	; 0x89
 800c584:	2209      	movs	r2, #9
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7ff fc1f 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c58e:	bf00      	nop
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800c596:	b580      	push	{r7, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	220c      	movs	r2, #12
 800c5a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2204      	movs	r2, #4
 800c5aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2206      	movs	r2, #6
 800c5b2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7f1a      	ldrb	r2, [r3, #28]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	7f5a      	ldrb	r2, [r3, #29]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	7f9a      	ldrb	r2, [r3, #30]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7fda      	ldrb	r2, [r3, #31]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3389      	adds	r3, #137	; 0x89
 800c5fa:	2209      	movs	r2, #9
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff fbe4 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c604:	bf00      	nop
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	222b      	movs	r2, #43	; 0x2b
 800c618:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2204      	movs	r2, #4
 800c620:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2209      	movs	r2, #9
 800c628:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7f1a      	ldrb	r2, [r3, #28]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	7f5a      	ldrb	r2, [r3, #29]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7f9a      	ldrb	r2, [r3, #30]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7fda      	ldrb	r2, [r3, #31]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2203      	movs	r2, #3
 800c670:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3389      	adds	r3, #137	; 0x89
 800c688:	220c      	movs	r2, #12
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fb9d 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	222c      	movs	r2, #44	; 0x2c
 800c6a6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2206      	movs	r2, #6
 800c6b6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	7f1a      	ldrb	r2, [r3, #28]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7f5a      	ldrb	r2, [r3, #29]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7f9a      	ldrb	r2, [r3, #30]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	7fda      	ldrb	r2, [r3, #31]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	3389      	adds	r3, #137	; 0x89
 800c6fe:	2209      	movs	r2, #9
 800c700:	4619      	mov	r1, r3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7ff fb62 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2211      	movs	r2, #17
 800c71c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2204      	movs	r2, #4
 800c724:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	8b5b      	ldrh	r3, [r3, #26]
 800c734:	b2da      	uxtb	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	8b5b      	ldrh	r3, [r3, #26]
 800c740:	121b      	asrs	r3, r3, #8
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 030f 	and.w	r3, r3, #15
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3389      	adds	r3, #137	; 0x89
 800c754:	2205      	movs	r2, #5
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7ff fb37 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800c766:	b580      	push	{r7, lr}
 800c768:	b082      	sub	sp, #8
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	460b      	mov	r3, r1
 800c770:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c778:	f023 0304 	bic.w	r3, r3, #4
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2206      	movs	r2, #6
 800c788:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2204      	movs	r2, #4
 800c790:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2203      	movs	r2, #3
 800c798:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800c79c:	887b      	ldrh	r3, [r7, #2]
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800c7a6:	887b      	ldrh	r3, [r7, #2]
 800c7a8:	121b      	asrs	r3, r3, #8
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	f003 030f 	and.w	r3, r3, #15
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2213      	movs	r2, #19
 800c7bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3389      	adds	r3, #137	; 0x89
 800c7c4:	2206      	movs	r2, #6
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff faff 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2224      	movs	r2, #36	; 0x24
 800c7e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	220c      	movs	r2, #12
 800c7ea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2203      	movs	r2, #3
 800c7f2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2204      	movs	r2, #4
 800c7fa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2208      	movs	r2, #8
 800c802:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3389      	adds	r3, #137	; 0x89
 800c812:	2206      	movs	r2, #6
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7ff fad8 	bl	800bdcc <_ZN3BTD11HCI_CommandEPht>
}
 800c81c:	bf00      	nop
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800c824:	b5b0      	push	{r4, r5, r7, lr}
 800c826:	b08a      	sub	sp, #40	; 0x28
 800c828:	af02      	add	r7, sp, #8
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	461a      	mov	r2, r3
 800c830:	460b      	mov	r3, r1
 800c832:	817b      	strh	r3, [r7, #10]
 800c834:	4613      	mov	r3, r2
 800c836:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800c838:	466b      	mov	r3, sp
 800c83a:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800c83c:	7a7b      	ldrb	r3, [r7, #9]
 800c83e:	1ddc      	adds	r4, r3, #7
 800c840:	61bc      	str	r4, [r7, #24]
 800c842:	4623      	mov	r3, r4
 800c844:	3301      	adds	r3, #1
 800c846:	4618      	mov	r0, r3
 800c848:	f04f 0100 	mov.w	r1, #0
 800c84c:	f04f 0200 	mov.w	r2, #0
 800c850:	f04f 0300 	mov.w	r3, #0
 800c854:	00cb      	lsls	r3, r1, #3
 800c856:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c85a:	00c2      	lsls	r2, r0, #3
 800c85c:	4623      	mov	r3, r4
 800c85e:	3301      	adds	r3, #1
 800c860:	4618      	mov	r0, r3
 800c862:	f04f 0100 	mov.w	r1, #0
 800c866:	f04f 0200 	mov.w	r2, #0
 800c86a:	f04f 0300 	mov.w	r3, #0
 800c86e:	00cb      	lsls	r3, r1, #3
 800c870:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c874:	00c2      	lsls	r2, r0, #3
 800c876:	4623      	mov	r3, r4
 800c878:	3301      	adds	r3, #1
 800c87a:	3307      	adds	r3, #7
 800c87c:	08db      	lsrs	r3, r3, #3
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	ebad 0d03 	sub.w	sp, sp, r3
 800c884:	ab02      	add	r3, sp, #8
 800c886:	3300      	adds	r3, #0
 800c888:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800c88a:	897b      	ldrh	r3, [r7, #10]
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800c892:	897b      	ldrh	r3, [r7, #10]
 800c894:	121b      	asrs	r3, r3, #8
 800c896:	b25b      	sxtb	r3, r3
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	b25b      	sxtb	r3, r3
 800c89e:	f043 0320 	orr.w	r3, r3, #32
 800c8a2:	b25b      	sxtb	r3, r3
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800c8aa:	7a7b      	ldrb	r3, [r7, #9]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800c8b4:	7a7b      	ldrb	r3, [r7, #9]
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	121b      	asrs	r3, r3, #8
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	7a7a      	ldrb	r2, [r7, #9]
 800c8c4:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800c8c6:	7a7b      	ldrb	r3, [r7, #9]
 800c8c8:	121b      	asrs	r3, r3, #8
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c8d6:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800c8de:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	83fb      	strh	r3, [r7, #30]
 800c8e4:	7a7b      	ldrb	r3, [r7, #9]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	8bfa      	ldrh	r2, [r7, #30]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d20b      	bcs.n	800c906 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800c8ee:	8bfb      	ldrh	r3, [r7, #30]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	441a      	add	r2, r3
 800c8f4:	8bfb      	ldrh	r3, [r7, #30]
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	7811      	ldrb	r1, [r2, #0]
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800c8fe:	8bfb      	ldrh	r3, [r7, #30]
 800c900:	3301      	adds	r3, #1
 800c902:	83fb      	strh	r3, [r7, #30]
 800c904:	e7ee      	b.n	800c8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800c916:	7a7b      	ldrb	r3, [r7, #9]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	3308      	adds	r3, #8
 800c91c:	b29c      	uxth	r4, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	4623      	mov	r3, r4
 800c924:	f002 fc22 	bl	800f16c <_ZN3USB11outTransferEhhtPh>
 800c928:	4603      	mov	r3, r0
 800c92a:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800c92c:	7cfb      	ldrb	r3, [r7, #19]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800c932:	4804      	ldr	r0, [pc, #16]	; (800c944 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800c934:	f7f6 f958 	bl	8002be8 <HAL_Delay>
 800c938:	46ad      	mov	sp, r5
}
 800c93a:	bf00      	nop
 800c93c:	3720      	adds	r7, #32
 800c93e:	46bd      	mov	sp, r7
 800c940:	bdb0      	pop	{r4, r5, r7, pc}
 800c942:	bf00      	nop
 800c944:	000186a0 	.word	0x000186a0

0800c948 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af02      	add	r7, sp, #8
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	460b      	mov	r3, r1
 800c954:	817b      	strh	r3, [r7, #10]
 800c956:	4613      	mov	r3, r2
 800c958:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2202      	movs	r2, #2
 800c95e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	7a7a      	ldrb	r2, [r7, #9]
 800c966:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2204      	movs	r2, #4
 800c96e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800c97a:	8b3b      	ldrh	r3, [r7, #24]
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800c984:	8b3b      	ldrh	r3, [r7, #24]
 800c986:	121b      	asrs	r3, r3, #8
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	781a      	ldrb	r2, [r3, #0]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	785a      	ldrb	r2, [r3, #1]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800c9aa:	8979      	ldrh	r1, [r7, #10]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	2308      	movs	r3, #8
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f7ff ff34 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800c9bc:	bf00      	nop
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af02      	add	r7, sp, #8
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	817b      	strh	r3, [r7, #10]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2203      	movs	r2, #3
 800c9da:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	7a7a      	ldrb	r2, [r7, #9]
 800c9e2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2208      	movs	r2, #8
 800c9ea:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	785a      	ldrb	r2, [r3, #1]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	781a      	ldrb	r2, [r3, #0]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	785a      	ldrb	r2, [r3, #1]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	7f3a      	ldrb	r2, [r7, #28]
 800ca22:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ca44:	8979      	ldrh	r1, [r7, #10]
 800ca46:	2300      	movs	r3, #0
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	230c      	movs	r3, #12
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fee7 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ca56:	bf00      	nop
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b086      	sub	sp, #24
 800ca62:	af02      	add	r7, sp, #8
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	607b      	str	r3, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	817b      	strh	r3, [r7, #10]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2204      	movs	r2, #4
 800ca74:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	7a7a      	ldrb	r2, [r7, #9]
 800ca7c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2208      	movs	r2, #8
 800ca84:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	781a      	ldrb	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	785a      	ldrb	r2, [r3, #1]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2202      	movs	r2, #2
 800cac0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	22ff      	movs	r2, #255	; 0xff
 800cac8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	22ff      	movs	r2, #255	; 0xff
 800cad0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cada:	8979      	ldrh	r1, [r7, #10]
 800cadc:	2300      	movs	r3, #0
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2301      	movs	r3, #1
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	230c      	movs	r3, #12
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7ff fe9c 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800caec:	bf00      	nop
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af02      	add	r7, sp, #8
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	607b      	str	r3, [r7, #4]
 800cafe:	460b      	mov	r3, r1
 800cb00:	817b      	strh	r3, [r7, #10]
 800cb02:	4613      	mov	r3, r2
 800cb04:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2205      	movs	r2, #5
 800cb0a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	7a7a      	ldrb	r2, [r7, #9]
 800cb12:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	220a      	movs	r2, #10
 800cb1a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	785a      	ldrb	r2, [r3, #1]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2202      	movs	r2, #2
 800cb66:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	22a0      	movs	r2, #160	; 0xa0
 800cb6e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2202      	movs	r2, #2
 800cb76:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cb80:	8979      	ldrh	r1, [r7, #10]
 800cb82:	2300      	movs	r3, #0
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	2301      	movs	r3, #1
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	230e      	movs	r3, #14
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff fe49 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cb92:	bf00      	nop
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b086      	sub	sp, #24
 800cb9e:	af02      	add	r7, sp, #8
 800cba0:	60f8      	str	r0, [r7, #12]
 800cba2:	607b      	str	r3, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	817b      	strh	r3, [r7, #10]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2206      	movs	r2, #6
 800cbb0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	7a7a      	ldrb	r2, [r7, #9]
 800cbb8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2204      	movs	r2, #4
 800cbc0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	781a      	ldrb	r2, [r3, #0]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	785a      	ldrb	r2, [r3, #1]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	781a      	ldrb	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	785a      	ldrb	r2, [r3, #1]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cbfa:	8979      	ldrh	r1, [r7, #10]
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	2301      	movs	r3, #1
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	2308      	movs	r3, #8
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7ff fe0c 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af02      	add	r7, sp, #8
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	607b      	str	r3, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	817b      	strh	r3, [r7, #10]
 800cc22:	4613      	mov	r3, r2
 800cc24:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2207      	movs	r2, #7
 800cc2a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	7a7a      	ldrb	r2, [r7, #9]
 800cc32:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2204      	movs	r2, #4
 800cc3a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	781a      	ldrb	r2, [r3, #0]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	785a      	ldrb	r2, [r3, #1]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	781a      	ldrb	r2, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	785a      	ldrb	r2, [r3, #1]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cc74:	8979      	ldrh	r1, [r7, #10]
 800cc76:	2300      	movs	r3, #0
 800cc78:	9301      	str	r3, [sp, #4]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	2308      	movs	r3, #8
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f7ff fdcf 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af02      	add	r7, sp, #8
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	4608      	mov	r0, r1
 800cc98:	4611      	mov	r1, r2
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	807b      	strh	r3, [r7, #2]
 800cca0:	460b      	mov	r3, r1
 800cca2:	707b      	strb	r3, [r7, #1]
 800cca4:	4613      	mov	r3, r2
 800cca6:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	220b      	movs	r2, #11
 800ccac:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	787a      	ldrb	r2, [r7, #1]
 800ccb4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2208      	movs	r2, #8
 800ccbc:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	783a      	ldrb	r2, [r7, #0]
 800cccc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	7c3a      	ldrb	r2, [r7, #16]
 800ccd4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cd0e:	8879      	ldrh	r1, [r7, #2]
 800cd10:	2300      	movs	r3, #0
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	2301      	movs	r3, #1
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	230c      	movs	r3, #12
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fd82 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cd20:	bf00      	nop
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08e      	sub	sp, #56	; 0x38
 800cd2c:	af08      	add	r7, sp, #32
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800cd32:	2301      	movs	r3, #1
 800cd34:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800cd36:	2300      	movs	r3, #0
 800cd38:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	75fb      	strb	r3, [r7, #23]
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	2b05      	cmp	r3, #5
 800cd42:	d811      	bhi.n	800cd68 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
 800cd46:	f1c3 0305 	rsb	r3, r3, #5
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	441a      	add	r2, r3
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	3302      	adds	r3, #2
 800cd54:	7812      	ldrb	r2, [r2, #0]
 800cd56:	f107 0118 	add.w	r1, r7, #24
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	3301      	adds	r3, #1
 800cd64:	75fb      	strb	r3, [r7, #23]
 800cd66:	e7ea      	b.n	800cd3e <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cd78:	2300      	movs	r3, #0
 800cd7a:	9307      	str	r3, [sp, #28]
 800cd7c:	f107 030c 	add.w	r3, r7, #12
 800cd80:	9306      	str	r3, [sp, #24]
 800cd82:	2308      	movs	r3, #8
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	2308      	movs	r3, #8
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	9303      	str	r3, [sp, #12]
 800cd8e:	2303      	movs	r3, #3
 800cd90:	9302      	str	r3, [sp, #8]
 800cd92:	23f5      	movs	r3, #245	; 0xf5
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	2309      	movs	r3, #9
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	2321      	movs	r3, #33	; 0x21
 800cd9c:	f002 f803 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800cda0:	bf00      	nop
 800cda2:	3718      	adds	r7, #24
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08e      	sub	sp, #56	; 0x38
 800cdac:	af08      	add	r7, sp, #32
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800cdb2:	2305      	movs	r3, #5
 800cdb4:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800cdb6:	2310      	movs	r3, #16
 800cdb8:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800cdc2:	2312      	movs	r3, #18
 800cdc4:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	75fb      	strb	r3, [r7, #23]
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	2b05      	cmp	r3, #5
 800cdce:	d80e      	bhi.n	800cdee <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800cdd0:	7dfb      	ldrb	r3, [r7, #23]
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	441a      	add	r2, r3
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	7812      	ldrb	r2, [r2, #0]
 800cddc:	f107 0118 	add.w	r1, r7, #24
 800cde0:	440b      	add	r3, r1
 800cde2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	3301      	adds	r3, #1
 800cdea:	75fb      	strb	r3, [r7, #23]
 800cdec:	e7ed      	b.n	800cdca <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cdfe:	2300      	movs	r3, #0
 800ce00:	9307      	str	r3, [sp, #28]
 800ce02:	f107 030c 	add.w	r3, r7, #12
 800ce06:	9306      	str	r3, [sp, #24]
 800ce08:	230b      	movs	r3, #11
 800ce0a:	9305      	str	r3, [sp, #20]
 800ce0c:	230b      	movs	r3, #11
 800ce0e:	9304      	str	r3, [sp, #16]
 800ce10:	2300      	movs	r3, #0
 800ce12:	9303      	str	r3, [sp, #12]
 800ce14:	2303      	movs	r3, #3
 800ce16:	9302      	str	r3, [sp, #8]
 800ce18:	2305      	movs	r3, #5
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	2309      	movs	r3, #9
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	2321      	movs	r3, #33	; 0x21
 800ce22:	f001 ffc0 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ce26:	bf00      	nop
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
	...

0800ce30 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	4a04      	ldr	r2, [pc, #16]	; (800ce4c <_ZN13USBReadParserC1Ev+0x1c>)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4618      	mov	r0, r3
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	08010d80 	.word	0x08010d80

0800ce50 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff ffe7 	bl	800ce30 <_ZN13USBReadParserC1Ev>
 800ce62:	4a21      	ldr	r2, [pc, #132]	; (800cee8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	605a      	str	r2, [r3, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3308      	adds	r3, #8
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fd fb51 	bl	800a51a <_ZN16MultiValueBufferC1Ev>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3310      	adds	r3, #16
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fd fb63 	bl	800a548 <_ZN20MultiByteValueParserC1Ev>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	3318      	adds	r3, #24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fd fb8a 	bl	800a5a0 <_ZN11ByteSkipperC1Ev>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f103 0220 	add.w	r2, r3, #32
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f103 0210 	add.w	r2, r3, #16
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3308      	adds	r3, #8
 800cec2:	4619      	mov	r1, r3
 800cec4:	4610      	mov	r0, r2
 800cec6:	f7fd fb53 	bl	800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f103 0218 	add.w	r2, r3, #24
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3308      	adds	r3, #8
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f7fd fb76 	bl	800a5c8 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	08010d28 	.word	0x08010d28

0800ceec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7ff ff99 	bl	800ce30 <_ZN13USBReadParserC1Ev>
 800cefe:	4a21      	ldr	r2, [pc, #132]	; (800cf84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	605a      	str	r2, [r3, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	3308      	adds	r3, #8
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fd fb03 	bl	800a51a <_ZN16MultiValueBufferC1Ev>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3310      	adds	r3, #16
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fd fb15 	bl	800a548 <_ZN20MultiByteValueParserC1Ev>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	3318      	adds	r3, #24
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fd fb3c 	bl	800a5a0 <_ZN11ByteSkipperC1Ev>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0220 	add.w	r2, r3, #32
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f103 0210 	add.w	r2, r3, #16
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f7fd fb05 	bl	800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f103 0218 	add.w	r2, r3, #24
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3308      	adds	r3, #8
 800cf70:	4619      	mov	r1, r3
 800cf72:	4610      	mov	r0, r2
 800cf74:	f7fd fb28 	bl	800a5c8 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	08010d1c 	.word	0x08010d1c

0800cf88 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	607a      	str	r2, [r7, #4]
 800cf92:	603b      	str	r3, [r7, #0]
 800cf94:	460b      	mov	r3, r1
 800cf96:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800cf98:	897b      	ldrh	r3, [r7, #10]
 800cf9a:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800cfa0:	8afb      	ldrh	r3, [r7, #22]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00f      	beq.n	800cfc6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800cfa6:	f107 0216 	add.w	r2, r7, #22
 800cfaa:	f107 0310 	add.w	r3, r7, #16
 800cfae:	4619      	mov	r1, r3
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f82d 	bl	800d010 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f083 0301 	eor.w	r3, r3, #1
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d100      	bne.n	800cfc4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800cfc2:	e7ed      	b.n	800cfa0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800cfc4:	bf00      	nop
}
 800cfc6:	3718      	adds	r7, #24
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800cfdc:	897b      	ldrh	r3, [r7, #10]
 800cfde:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800cfe4:	8afb      	ldrh	r3, [r7, #22]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00f      	beq.n	800d00a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800cfea:	f107 0216 	add.w	r2, r7, #22
 800cfee:	f107 0310 	add.w	r3, r7, #16
 800cff2:	4619      	mov	r1, r3
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 f981 	bl	800d2fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800cffa:	4603      	mov	r3, r0
 800cffc:	f083 0301 	eor.w	r3, r3, #1
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	d100      	bne.n	800d008 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800d006:	e7ed      	b.n	800cfe4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800d008:	bf00      	nop
}
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800d010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d012:	b089      	sub	sp, #36	; 0x24
 800d014:	af02      	add	r7, sp, #8
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3320      	adds	r3, #32
 800d020:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3320      	adds	r3, #32
 800d026:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d02e:	2b04      	cmp	r3, #4
 800d030:	f200 815e 	bhi.w	800d2f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800d034:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800d036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03a:	bf00      	nop
 800d03c:	0800d051 	.word	0x0800d051
 800d040:	0800d071 	.word	0x0800d071
 800d044:	0800d0b3 	.word	0x0800d0b3
 800d048:	0800d0c7 	.word	0x0800d0c7
 800d04c:	0800d18b 	.word	0x0800d18b
                case 0:
                        theBuffer.valueSize = 2;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2202      	movs	r2, #2
 800d054:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f103 0210 	add.w	r2, r3, #16
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	3308      	adds	r3, #8
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f7fd fa84 	bl	800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3310      	adds	r3, #16
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	4618      	mov	r0, r3
 800d07a:	f003 fa67 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d07e:	4603      	mov	r3, r0
 800d080:	f083 0301 	eor.w	r3, r3, #1
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d001      	beq.n	800d08e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800d08a:	2300      	movs	r3, #0
 800d08c:	e131      	b.n	800d2f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d094:	781a      	ldrb	r2, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d0a2:	785a      	ldrb	r2, [r3, #1]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	3320      	adds	r3, #32
 800d0b6:	1c9a      	adds	r2, r3, #2
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d0cc:	3b02      	subs	r3, #2
 800d0ce:	2b1f      	cmp	r3, #31
 800d0d0:	d847      	bhi.n	800d162 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800d0d2:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800d0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d8:	0800d163 	.word	0x0800d163
 800d0dc:	0800d163 	.word	0x0800d163
 800d0e0:	0800d159 	.word	0x0800d159
 800d0e4:	0800d163 	.word	0x0800d163
 800d0e8:	0800d163 	.word	0x0800d163
 800d0ec:	0800d163 	.word	0x0800d163
 800d0f0:	0800d163 	.word	0x0800d163
 800d0f4:	0800d163 	.word	0x0800d163
 800d0f8:	0800d163 	.word	0x0800d163
 800d0fc:	0800d163 	.word	0x0800d163
 800d100:	0800d163 	.word	0x0800d163
 800d104:	0800d163 	.word	0x0800d163
 800d108:	0800d163 	.word	0x0800d163
 800d10c:	0800d163 	.word	0x0800d163
 800d110:	0800d163 	.word	0x0800d163
 800d114:	0800d163 	.word	0x0800d163
 800d118:	0800d163 	.word	0x0800d163
 800d11c:	0800d163 	.word	0x0800d163
 800d120:	0800d163 	.word	0x0800d163
 800d124:	0800d163 	.word	0x0800d163
 800d128:	0800d163 	.word	0x0800d163
 800d12c:	0800d163 	.word	0x0800d163
 800d130:	0800d163 	.word	0x0800d163
 800d134:	0800d163 	.word	0x0800d163
 800d138:	0800d163 	.word	0x0800d163
 800d13c:	0800d163 	.word	0x0800d163
 800d140:	0800d163 	.word	0x0800d163
 800d144:	0800d163 	.word	0x0800d163
 800d148:	0800d163 	.word	0x0800d163
 800d14c:	0800d163 	.word	0x0800d163
 800d150:	0800d163 	.word	0x0800d163
 800d154:	0800d163 	.word	0x0800d163
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800d160:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d168:	3b02      	subs	r3, #2
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f103 0210 	add.w	r2, r3, #16
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3308      	adds	r3, #8
 800d17a:	4619      	mov	r1, r3
 800d17c:	4610      	mov	r0, r2
 800d17e:	f7fd f9f7 	bl	800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2204      	movs	r2, #4
 800d186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d190:	2b05      	cmp	r3, #5
 800d192:	d055      	beq.n	800d240 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800d194:	2b05      	cmp	r3, #5
 800d196:	f300 8085 	bgt.w	800d2a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d002      	beq.n	800d1a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	d015      	beq.n	800d1ce <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800d1a2:	e07f      	b.n	800d2a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3310      	adds	r3, #16
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	68b9      	ldr	r1, [r7, #8]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f003 f9cd 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f083 0301 	eor.w	r3, r3, #1
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	e097      	b.n	800d2f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	795a      	ldrb	r2, [r3, #5]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800d1cc:	e086      	b.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3310      	adds	r3, #16
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	68b9      	ldr	r1, [r7, #8]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f003 f9b8 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f083 0301 	eor.w	r3, r3, #1
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e082      	b.n	800d2f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	795b      	ldrb	r3, [r3, #5]
 800d1f0:	2be0      	cmp	r3, #224	; 0xe0
 800d1f2:	d16c      	bne.n	800d2ce <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	799b      	ldrb	r3, [r3, #6]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d16a      	bne.n	800d2d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d202:	2b00      	cmp	r3, #0
 800d204:	d004      	beq.n	800d210 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	79db      	ldrb	r3, [r3, #7]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d104      	bne.n	800d218 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800d20e:	e065      	b.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	79db      	ldrb	r3, [r3, #7]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d15e      	bne.n	800d2d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	789a      	ldrb	r2, [r3, #2]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	78da      	ldrb	r2, [r3, #3]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	79da      	ldrb	r2, [r3, #7]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800d23e:	e04d      	b.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	3310      	adds	r3, #16
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	4618      	mov	r0, r3
 800d24a:	f003 f97f 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d24e:	4603      	mov	r3, r0
 800d250:	f083 0301 	eor.w	r3, r3, #1
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	d001      	beq.n	800d25e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800d25a:	2300      	movs	r3, #0
 800d25c:	e049      	b.n	800d2f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d264:	2b00      	cmp	r3, #0
 800d266:	d038      	beq.n	800d2da <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d034      	beq.n	800d2da <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6858      	ldr	r0, [r3, #4]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681c      	ldr	r4, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	3220      	adds	r2, #32
 800d298:	9201      	str	r2, [sp, #4]
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	4633      	mov	r3, r6
 800d29e:	462a      	mov	r2, r5
 800d2a0:	47a0      	blx	r4
                                        break;
 800d2a2:	e01a      	b.n	800d2da <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f103 0018 	add.w	r0, r3, #24
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	3b02      	subs	r3, #2
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	68b9      	ldr	r1, [r7, #8]
 800d2ba:	f7fd f998 	bl	800a5ee <_ZN11ByteSkipper4SkipEPPhPtt>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f083 0301 	eor.w	r3, r3, #1
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d008      	beq.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e011      	b.n	800d2f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800d2ce:	bf00      	nop
 800d2d0:	e004      	b.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800d2d2:	bf00      	nop
 800d2d4:	e002      	b.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800d2d6:	bf00      	nop
 800d2d8:	e000      	b.n	800d2dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800d2da:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f103 0220 	add.w	r2, r3, #32
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800d2f0:	2301      	movs	r3, #1
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	371c      	adds	r7, #28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fa:	bf00      	nop

0800d2fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800d2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fe:	b089      	sub	sp, #36	; 0x24
 800d300:	af02      	add	r7, sp, #8
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	3320      	adds	r3, #32
 800d30c:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	3320      	adds	r3, #32
 800d312:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	f200 815e 	bhi.w	800d5dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800d320:	a201      	add	r2, pc, #4	; (adr r2, 800d328 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800d322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d326:	bf00      	nop
 800d328:	0800d33d 	.word	0x0800d33d
 800d32c:	0800d35d 	.word	0x0800d35d
 800d330:	0800d39f 	.word	0x0800d39f
 800d334:	0800d3b3 	.word	0x0800d3b3
 800d338:	0800d477 	.word	0x0800d477
                        theBuffer.valueSize = 2;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2202      	movs	r2, #2
 800d340:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f103 0210 	add.w	r2, r3, #16
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	3308      	adds	r3, #8
 800d34c:	4619      	mov	r1, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	f7fd f90e 	bl	800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3310      	adds	r3, #16
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	68b9      	ldr	r1, [r7, #8]
 800d364:	4618      	mov	r0, r3
 800d366:	f003 f8f1 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f083 0301 	eor.w	r3, r3, #1
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800d376:	2300      	movs	r3, #0
 800d378:	e131      	b.n	800d5de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d380:	781a      	ldrb	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d38e:	785a      	ldrb	r2, [r3, #1]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2202      	movs	r2, #2
 800d39a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3320      	adds	r3, #32
 800d3a2:	1c9a      	adds	r2, r3, #2
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d3b8:	3b02      	subs	r3, #2
 800d3ba:	2b1f      	cmp	r3, #31
 800d3bc:	d847      	bhi.n	800d44e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800d3be:	a201      	add	r2, pc, #4	; (adr r2, 800d3c4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800d3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c4:	0800d44f 	.word	0x0800d44f
 800d3c8:	0800d44f 	.word	0x0800d44f
 800d3cc:	0800d445 	.word	0x0800d445
 800d3d0:	0800d44f 	.word	0x0800d44f
 800d3d4:	0800d44f 	.word	0x0800d44f
 800d3d8:	0800d44f 	.word	0x0800d44f
 800d3dc:	0800d44f 	.word	0x0800d44f
 800d3e0:	0800d44f 	.word	0x0800d44f
 800d3e4:	0800d44f 	.word	0x0800d44f
 800d3e8:	0800d44f 	.word	0x0800d44f
 800d3ec:	0800d44f 	.word	0x0800d44f
 800d3f0:	0800d44f 	.word	0x0800d44f
 800d3f4:	0800d44f 	.word	0x0800d44f
 800d3f8:	0800d44f 	.word	0x0800d44f
 800d3fc:	0800d44f 	.word	0x0800d44f
 800d400:	0800d44f 	.word	0x0800d44f
 800d404:	0800d44f 	.word	0x0800d44f
 800d408:	0800d44f 	.word	0x0800d44f
 800d40c:	0800d44f 	.word	0x0800d44f
 800d410:	0800d44f 	.word	0x0800d44f
 800d414:	0800d44f 	.word	0x0800d44f
 800d418:	0800d44f 	.word	0x0800d44f
 800d41c:	0800d44f 	.word	0x0800d44f
 800d420:	0800d44f 	.word	0x0800d44f
 800d424:	0800d44f 	.word	0x0800d44f
 800d428:	0800d44f 	.word	0x0800d44f
 800d42c:	0800d44f 	.word	0x0800d44f
 800d430:	0800d44f 	.word	0x0800d44f
 800d434:	0800d44f 	.word	0x0800d44f
 800d438:	0800d44f 	.word	0x0800d44f
 800d43c:	0800d44f 	.word	0x0800d44f
 800d440:	0800d44f 	.word	0x0800d44f
                                        isGoodInterface = false;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800d44c:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d454:	3b02      	subs	r3, #2
 800d456:	b2da      	uxtb	r2, r3
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f103 0210 	add.w	r2, r3, #16
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3308      	adds	r3, #8
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fd f881 	bl	800a570 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2204      	movs	r2, #4
 800d472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d47c:	2b05      	cmp	r3, #5
 800d47e:	d055      	beq.n	800d52c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800d480:	2b05      	cmp	r3, #5
 800d482:	f300 8085 	bgt.w	800d590 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800d486:	2b02      	cmp	r3, #2
 800d488:	d002      	beq.n	800d490 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800d48a:	2b04      	cmp	r3, #4
 800d48c:	d015      	beq.n	800d4ba <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800d48e:	e07f      	b.n	800d590 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3310      	adds	r3, #16
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	4618      	mov	r0, r3
 800d49a:	f003 f857 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	f083 0301 	eor.w	r3, r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e097      	b.n	800d5de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	795a      	ldrb	r2, [r3, #5]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800d4b8:	e086      	b.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3310      	adds	r3, #16
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f003 f842 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f083 0301 	eor.w	r3, r3, #1
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e082      	b.n	800d5de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	795b      	ldrb	r3, [r3, #5]
 800d4dc:	2bff      	cmp	r3, #255	; 0xff
 800d4de:	d16c      	bne.n	800d5ba <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	799b      	ldrb	r3, [r3, #6]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d16a      	bne.n	800d5be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d004      	beq.n	800d4fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	79db      	ldrb	r3, [r3, #7]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d104      	bne.n	800d504 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800d4fa:	e065      	b.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	79db      	ldrb	r3, [r3, #7]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d15e      	bne.n	800d5c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	789a      	ldrb	r2, [r3, #2]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	78da      	ldrb	r2, [r3, #3]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	79da      	ldrb	r2, [r3, #7]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800d52a:	e04d      	b.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3310      	adds	r3, #16
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	68b9      	ldr	r1, [r7, #8]
 800d534:	4618      	mov	r0, r3
 800d536:	f003 f809 	bl	801054c <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f083 0301 	eor.w	r3, r3, #1
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800d546:	2300      	movs	r3, #0
 800d548:	e049      	b.n	800d5de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d550:	2b00      	cmp	r3, #0
 800d552:	d038      	beq.n	800d5c6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d034      	beq.n	800d5c6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6858      	ldr	r0, [r3, #4]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	681c      	ldr	r4, [r3, #0]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	3220      	adds	r2, #32
 800d584:	9201      	str	r2, [sp, #4]
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	4633      	mov	r3, r6
 800d58a:	462a      	mov	r2, r5
 800d58c:	47a0      	blx	r4
                                        break;
 800d58e:	e01a      	b.n	800d5c6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f103 0018 	add.w	r0, r3, #24
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	3b02      	subs	r3, #2
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	f7fd f822 	bl	800a5ee <_ZN11ByteSkipper4SkipEPPhPtt>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	f083 0301 	eor.w	r3, r3, #1
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d008      	beq.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e011      	b.n	800d5de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800d5ba:	bf00      	nop
 800d5bc:	e004      	b.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800d5be:	bf00      	nop
 800d5c0:	e002      	b.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800d5c2:	bf00      	nop
 800d5c4:	e000      	b.n	800d5c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800d5c6:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f103 0220 	add.w	r2, r3, #32
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800d5dc:	2301      	movs	r3, #1
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	371c      	adds	r7, #28
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e6:	bf00      	nop

0800d5e8 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	2b03      	cmp	r3, #3
 800d5fa:	d815      	bhi.n	800d628 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	3318      	adds	r3, #24
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4413      	add	r3, r2
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d109      	bne.n	800d620 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	3318      	adds	r3, #24
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	4413      	add	r3, r2
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800d61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d61e:	e005      	b.n	800d62c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	3301      	adds	r3, #1
 800d624:	73fb      	strb	r3, [r7, #15]
 800d626:	e7e6      	b.n	800d5f6 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800d628:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800d62c:	4618      	mov	r0, r3
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
 800d642:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	6879      	ldr	r1, [r7, #4]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff ffc3 	bl	800d5e8 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4618      	mov	r0, r3
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	08010de4 	.word	0x08010de4

0800d670 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800d670:	b480      	push	{r7}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	4613      	mov	r3, r2
 800d67c:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	88fb      	ldrh	r3, [r7, #6]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	429a      	cmp	r2, r3
 800d68a:	d10b      	bne.n	800d6a4 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	3301      	adds	r3, #1
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	88fb      	ldrh	r3, [r7, #6]
 800d696:	121b      	asrs	r3, r3, #8
 800d698:	f043 0320 	orr.w	r3, r3, #32
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d101      	bne.n	800d6a4 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800d6a4:	2300      	movs	r3, #0
        }
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800d6b2:	b480      	push	{r7}
 800d6b4:	b085      	sub	sp, #20
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	607a      	str	r2, [r7, #4]
 800d6be:	72fb      	strb	r3, [r7, #11]
                return;
 800d6c0:	bf00      	nop
        };
 800d6c2:	3714      	adds	r7, #20
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
                return;
 800d6d4:	bf00      	nop
        };
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
                return;
 800d6e8:	bf00      	nop
        }
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	603b      	str	r3, [r7, #0]
 800d700:	4613      	mov	r3, r2
 800d702:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	68b9      	ldr	r1, [r7, #8]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff ff95 	bl	800d638 <_ZN16BluetoothServiceC1EP3BTD>
 800d70e:	4a1f      	ldr	r2, [pc, #124]	; (800d78c <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800d71c:	2300      	movs	r3, #0
 800d71e:	75fb      	strb	r3, [r7, #23]
 800d720:	7dfb      	ldrb	r3, [r7, #23]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d809      	bhi.n	800d73a <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800d726:	7dfa      	ldrb	r2, [r7, #23]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3208      	adds	r2, #8
 800d72c:	2100      	movs	r1, #0
 800d72e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	3301      	adds	r3, #1
 800d736:	75fb      	strb	r3, [r7, #23]
 800d738:	e7f2      	b.n	800d720 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	79fa      	ldrb	r2, [r7, #7]
 800d740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2250      	movs	r2, #80	; 0x50
 800d750:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2270      	movs	r2, #112	; 0x70
 800d760:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2271      	movs	r2, #113	; 0x71
 800d770:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2200      	movs	r2, #0
 800d778:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 f807 	bl	800d790 <_ZN5BTHID5ResetEv>
}
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	4618      	mov	r0, r3
 800d786:	3718      	adds	r7, #24
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	08010db8 	.word	0x08010db8

0800d790 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
        connected = false;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	220a      	movs	r2, #10
 800d7b8:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	3320      	adds	r3, #32
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	4798      	blx	r3
}
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800d7d6:	b590      	push	{r4, r7, lr}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	af02      	add	r7, sp, #8
 800d7dc:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d014      	beq.n	800d812 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6898      	ldr	r0, [r3, #8]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	8999      	ldrh	r1, [r3, #12]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7d1b      	ldrb	r3, [r3, #20]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	751a      	strb	r2, [r3, #20]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	7d1a      	ldrb	r2, [r3, #20]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f103 041b 	add.w	r4, r3, #27
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	336f      	adds	r3, #111	; 0x6f
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	4623      	mov	r3, r4
 800d80e:	f7ff f9c4 	bl	800cb9a <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6898      	ldr	r0, [r3, #8]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	8999      	ldrh	r1, [r3, #12]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	7d1b      	ldrb	r3, [r3, #20]
 800d81e:	3301      	adds	r3, #1
 800d820:	b2da      	uxtb	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	751a      	strb	r2, [r3, #20]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7d1a      	ldrb	r2, [r3, #20]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f103 0418 	add.w	r4, r3, #24
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	336d      	adds	r3, #109	; 0x6d
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	4623      	mov	r3, r4
 800d838:	f7ff f9af 	bl	800cb9a <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3308      	adds	r3, #8
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	220e      	movs	r2, #14
 800d84c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2209      	movs	r2, #9
 800d852:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800d856:	bf00      	nop
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd90      	pop	{r4, r7, pc}
	...

0800d860 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b087      	sub	sp, #28
 800d864:	af02      	add	r7, sp, #8
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	7d5b      	ldrb	r3, [r3, #21]
 800d86e:	f083 0301 	eor.w	r3, r3, #1
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b00      	cmp	r3, #0
 800d876:	d023      	beq.n	800d8c0 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	3308      	adds	r3, #8
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d11e      	bne.n	800d8c0 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	330c      	adds	r3, #12
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	461a      	mov	r2, r3
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	330d      	adds	r3, #13
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	021b      	lsls	r3, r3, #8
 800d892:	4313      	orrs	r3, r2
 800d894:	2b01      	cmp	r3, #1
 800d896:	d113      	bne.n	800d8c0 <_ZN5BTHID7ACLDataEPh+0x60>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	7a9b      	ldrb	r3, [r3, #10]
 800d89e:	f083 0301 	eor.w	r3, r3, #1
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	8b5a      	ldrh	r2, [r3, #26]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	220a      	movs	r2, #10
 800d8be:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	7a5b      	ldrb	r3, [r3, #9]
 800d8c6:	f083 0301 	eor.w	r3, r3, #1
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d03a      	beq.n	800d946 <_ZN5BTHID7ACLDataEPh+0xe6>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d034      	beq.n	800d946 <_ZN5BTHID7ACLDataEPh+0xe6>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d5b      	ldrb	r3, [r3, #21]
 800d8e0:	f083 0301 	eor.w	r3, r3, #1
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d02d      	beq.n	800d946 <_ZN5BTHID7ACLDataEPh+0xe6>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d8f0:	f083 0301 	eor.w	r3, r3, #1
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d025      	beq.n	800d946 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	2b02      	cmp	r3, #2
 800d902:	d120      	bne.n	800d946 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	330c      	adds	r3, #12
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	330d      	adds	r3, #13
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	021b      	lsls	r3, r3, #8
 800d914:	4313      	orrs	r3, r2
 800d916:	2b11      	cmp	r3, #17
 800d918:	d115      	bne.n	800d946 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	2201      	movs	r2, #1
 800d92a:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	8b5a      	ldrh	r2, [r3, #26]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	899b      	ldrh	r3, [r3, #12]
 800d94c:	461a      	mov	r2, r3
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	f7ff fe8e 	bl	800d670 <_ZN16BluetoothService14checkHciHandleEPht>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 83dd 	beq.w	800e116 <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	3306      	adds	r3, #6
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	3307      	adds	r3, #7
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	021b      	lsls	r3, r3, #8
 800d96c:	4313      	orrs	r3, r2
 800d96e:	2b01      	cmp	r3, #1
 800d970:	f040 829b 	bne.w	800deaa <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	3308      	adds	r3, #8
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	f000 83c5 	beq.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	3308      	adds	r3, #8
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b03      	cmp	r3, #3
 800d988:	f040 808d 	bne.w	800daa6 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	3310      	adds	r3, #16
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	3311      	adds	r3, #17
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	4313      	orrs	r3, r2
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	f040 83b3 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	3312      	adds	r3, #18
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	3313      	adds	r3, #19
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f040 83a7 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	330e      	adds	r3, #14
 800d9c0:	781a      	ldrb	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d124      	bne.n	800da16 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	330f      	adds	r3, #15
 800d9d0:	781a      	ldrb	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d11c      	bne.n	800da16 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	7a5a      	ldrb	r2, [r3, #9]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	7b1a      	ldrb	r2, [r3, #12]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	7b5a      	ldrb	r2, [r3, #13]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6898      	ldr	r0, [r3, #8]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	8999      	ldrh	r1, [r3, #12]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	7d1a      	ldrb	r2, [r3, #20]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	331b      	adds	r3, #27
 800da10:	f7ff f825 	bl	800ca5e <_ZN3BTD20l2cap_config_requestEthPh>
 800da14:	e379      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	330e      	adds	r3, #14
 800da1a:	781a      	ldrb	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800da22:	429a      	cmp	r2, r3
 800da24:	d11a      	bne.n	800da5c <_ZN5BTHID7ACLDataEPh+0x1fc>
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	330f      	adds	r3, #15
 800da2a:	781a      	ldrb	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800da32:	429a      	cmp	r2, r3
 800da34:	d112      	bne.n	800da5c <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	7a5a      	ldrb	r2, [r3, #9]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	7b1a      	ldrb	r2, [r3, #12]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	7b5a      	ldrb	r2, [r3, #13]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	f043 0204 	orr.w	r2, r3, #4
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	611a      	str	r2, [r3, #16]
 800da5a:	e356      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	330e      	adds	r3, #14
 800da60:	781a      	ldrb	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800da68:	429a      	cmp	r2, r3
 800da6a:	f040 834e 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	330f      	adds	r3, #15
 800da72:	781a      	ldrb	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800da7a:	429a      	cmp	r2, r3
 800da7c:	f040 8345 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	7a5a      	ldrb	r2, [r3, #9]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	7b1a      	ldrb	r2, [r3, #12]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	7b5a      	ldrb	r2, [r3, #13]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	611a      	str	r2, [r3, #16]
 800daa4:	e331      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	3308      	adds	r3, #8
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d15a      	bne.n	800db66 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	330c      	adds	r3, #12
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	330d      	adds	r3, #13
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	021b      	lsls	r3, r3, #8
 800dac0:	4313      	orrs	r3, r2
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d112      	bne.n	800daec <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	7a5a      	ldrb	r2, [r3, #9]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	7b9a      	ldrb	r2, [r3, #14]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	7bda      	ldrb	r2, [r3, #15]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	611a      	str	r2, [r3, #16]
 800daea:	e30e      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	330c      	adds	r3, #12
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	330d      	adds	r3, #13
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	021b      	lsls	r3, r3, #8
 800dafc:	4313      	orrs	r3, r2
 800dafe:	2b11      	cmp	r3, #17
 800db00:	d112      	bne.n	800db28 <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	7a5a      	ldrb	r2, [r3, #9]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	7b9a      	ldrb	r2, [r3, #14]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	7bda      	ldrb	r2, [r3, #15]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	f043 0201 	orr.w	r2, r3, #1
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	611a      	str	r2, [r3, #16]
 800db26:	e2f0      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	330c      	adds	r3, #12
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	461a      	mov	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	330d      	adds	r3, #13
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	021b      	lsls	r3, r3, #8
 800db38:	4313      	orrs	r3, r2
 800db3a:	2b13      	cmp	r3, #19
 800db3c:	f040 82e5 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	7a5a      	ldrb	r2, [r3, #9]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	7b9a      	ldrb	r2, [r3, #14]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	7bda      	ldrb	r2, [r3, #15]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	f043 0210 	orr.w	r2, r3, #16
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	611a      	str	r2, [r3, #16]
 800db64:	e2d1      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	3308      	adds	r3, #8
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	2b05      	cmp	r3, #5
 800db6e:	d15e      	bne.n	800dc2e <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	3310      	adds	r3, #16
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	3311      	adds	r3, #17
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	021b      	lsls	r3, r3, #8
 800db80:	4313      	orrs	r3, r2
 800db82:	2b00      	cmp	r3, #0
 800db84:	f040 82c1 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	330c      	adds	r3, #12
 800db8c:	781a      	ldrb	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800db94:	429a      	cmp	r2, r3
 800db96:	d112      	bne.n	800dbbe <_ZN5BTHID7ACLDataEPh+0x35e>
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	330d      	adds	r3, #13
 800db9c:	781a      	ldrb	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d10a      	bne.n	800dbbe <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	7a5a      	ldrb	r2, [r3, #9]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	611a      	str	r2, [r3, #16]
 800dbbc:	e2a5      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	330c      	adds	r3, #12
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d112      	bne.n	800dbf4 <_ZN5BTHID7ACLDataEPh+0x394>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	330d      	adds	r3, #13
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d10a      	bne.n	800dbf4 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	7a5a      	ldrb	r2, [r3, #9]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	f043 0202 	orr.w	r2, r3, #2
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	611a      	str	r2, [r3, #16]
 800dbf2:	e28a      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	330c      	adds	r3, #12
 800dbf8:	781a      	ldrb	r2, [r3, #0]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dc00:	429a      	cmp	r2, r3
 800dc02:	f040 8282 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	330d      	adds	r3, #13
 800dc0a:	781a      	ldrb	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dc12:	429a      	cmp	r2, r3
 800dc14:	f040 8279 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	7a5a      	ldrb	r2, [r3, #9]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	691b      	ldr	r3, [r3, #16]
 800dc24:	f043 0220 	orr.w	r2, r3, #32
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	611a      	str	r2, [r3, #16]
 800dc2c:	e26d      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	3308      	adds	r3, #8
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b04      	cmp	r3, #4
 800dc36:	d155      	bne.n	800dce4 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	330c      	adds	r3, #12
 800dc3c:	781a      	ldrb	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d113      	bne.n	800dc70 <_ZN5BTHID7ACLDataEPh+0x410>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	330d      	adds	r3, #13
 800dc4c:	781a      	ldrb	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d10b      	bne.n	800dc70 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6898      	ldr	r0, [r3, #8]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8999      	ldrh	r1, [r3, #12]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	3309      	adds	r3, #9
 800dc64:	781a      	ldrb	r2, [r3, #0]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	331b      	adds	r3, #27
 800dc6a:	f7fe ff43 	bl	800caf4 <_ZN3BTD21l2cap_config_responseEthPh>
 800dc6e:	e24c      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	330c      	adds	r3, #12
 800dc74:	781a      	ldrb	r2, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d113      	bne.n	800dca8 <_ZN5BTHID7ACLDataEPh+0x448>
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	330d      	adds	r3, #13
 800dc84:	781a      	ldrb	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d10b      	bne.n	800dca8 <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6898      	ldr	r0, [r3, #8]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	8999      	ldrh	r1, [r3, #12]
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	3309      	adds	r3, #9
 800dc9c:	781a      	ldrb	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	3316      	adds	r3, #22
 800dca2:	f7fe ff27 	bl	800caf4 <_ZN3BTD21l2cap_config_responseEthPh>
 800dca6:	e230      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	330c      	adds	r3, #12
 800dcac:	781a      	ldrb	r2, [r3, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	f040 8228 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	330d      	adds	r3, #13
 800dcbe:	781a      	ldrb	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	f040 821f 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6898      	ldr	r0, [r3, #8]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	8999      	ldrh	r1, [r3, #12]
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	3309      	adds	r3, #9
 800dcd8:	781a      	ldrb	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	3318      	adds	r3, #24
 800dcde:	f7fe ff09 	bl	800caf4 <_ZN3BTD21l2cap_config_responseEthPh>
 800dce2:	e212      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	3308      	adds	r3, #8
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	2b06      	cmp	r3, #6
 800dcec:	d170      	bne.n	800ddd0 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	330c      	adds	r3, #12
 800dcf2:	781a      	ldrb	r2, [r3, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d112      	bne.n	800dd24 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	330d      	adds	r3, #13
 800dd02:	781a      	ldrb	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d10a      	bne.n	800dd24 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	7a5a      	ldrb	r2, [r3, #9]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	611a      	str	r2, [r3, #16]
 800dd22:	e1f2      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	330c      	adds	r3, #12
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d121      	bne.n	800dd78 <_ZN5BTHID7ACLDataEPh+0x518>
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	330d      	adds	r3, #13
 800dd38:	781a      	ldrb	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d119      	bne.n	800dd78 <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	7a5a      	ldrb	r2, [r3, #9]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6898      	ldr	r0, [r3, #8]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	8999      	ldrh	r1, [r3, #12]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	7d1a      	ldrb	r2, [r3, #20]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3316      	adds	r3, #22
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	4623      	mov	r3, r4
 800dd66:	f7fe ff55 	bl	800cc14 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3308      	adds	r3, #8
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	4798      	blx	r3
 800dd76:	e1c8      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	330c      	adds	r3, #12
 800dd7c:	781a      	ldrb	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dd84:	429a      	cmp	r2, r3
 800dd86:	f040 81c0 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	330d      	adds	r3, #13
 800dd8e:	781a      	ldrb	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dd96:	429a      	cmp	r2, r3
 800dd98:	f040 81b7 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	7a5a      	ldrb	r2, [r3, #9]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6898      	ldr	r0, [r3, #8]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	8999      	ldrh	r1, [r3, #12]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	7d1a      	ldrb	r2, [r3, #20]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3318      	adds	r3, #24
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4623      	mov	r3, r4
 800ddbe:	f7fe ff29 	bl	800cc14 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	4798      	blx	r3
 800ddce:	e19c      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b07      	cmp	r3, #7
 800ddd8:	d14c      	bne.n	800de74 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	330c      	adds	r3, #12
 800ddde:	781a      	ldrb	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	7edb      	ldrb	r3, [r3, #27]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d111      	bne.n	800de0c <_ZN5BTHID7ACLDataEPh+0x5ac>
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	330d      	adds	r3, #13
 800ddec:	781a      	ldrb	r2, [r3, #0]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7f1b      	ldrb	r3, [r3, #28]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d10a      	bne.n	800de0c <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	7a5a      	ldrb	r2, [r3, #9]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	611a      	str	r2, [r3, #16]
 800de0a:	e17e      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	330c      	adds	r3, #12
 800de10:	781a      	ldrb	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	7d9b      	ldrb	r3, [r3, #22]
 800de16:	429a      	cmp	r2, r3
 800de18:	d111      	bne.n	800de3e <_ZN5BTHID7ACLDataEPh+0x5de>
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	330d      	adds	r3, #13
 800de1e:	781a      	ldrb	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7ddb      	ldrb	r3, [r3, #23]
 800de24:	429a      	cmp	r2, r3
 800de26:	d10a      	bne.n	800de3e <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	7a5a      	ldrb	r2, [r3, #9]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	f043 0208 	orr.w	r2, r3, #8
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	611a      	str	r2, [r3, #16]
 800de3c:	e165      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	330c      	adds	r3, #12
 800de42:	781a      	ldrb	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7e1b      	ldrb	r3, [r3, #24]
 800de48:	429a      	cmp	r2, r3
 800de4a:	f040 815e 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	330d      	adds	r3, #13
 800de52:	781a      	ldrb	r2, [r3, #0]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	7e5b      	ldrb	r3, [r3, #25]
 800de58:	429a      	cmp	r2, r3
 800de5a:	f040 8156 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	7a5a      	ldrb	r2, [r3, #9]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	611a      	str	r2, [r3, #16]
 800de72:	e14a      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3308      	adds	r3, #8
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b0a      	cmp	r3, #10
 800de7c:	f040 8145 	bne.w	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	7a5a      	ldrb	r2, [r3, #9]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6898      	ldr	r0, [r3, #8]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	8999      	ldrh	r1, [r3, #12]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	7d1a      	ldrb	r2, [r3, #20]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	330c      	adds	r3, #12
 800de98:	781c      	ldrb	r4, [r3, #0]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	330d      	adds	r3, #13
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	4623      	mov	r3, r4
 800dea4:	f7fe fef3 	bl	800cc8e <_ZN3BTD26l2cap_information_responseEthhh>
 800dea8:	e12f      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	3306      	adds	r3, #6
 800deae:	781a      	ldrb	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800deb6:	429a      	cmp	r2, r3
 800deb8:	f040 8087 	bne.w	800dfca <_ZN5BTHID7ACLDataEPh+0x76a>
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	3307      	adds	r3, #7
 800dec0:	781a      	ldrb	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dec8:	429a      	cmp	r2, r3
 800deca:	d17e      	bne.n	800dfca <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	3308      	adds	r3, #8
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d131      	bne.n	800df3a <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2203      	movs	r2, #3
 800deda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	7a5a      	ldrb	r2, [r3, #9]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	7a9a      	ldrb	r2, [r3, #10]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2205      	movs	r2, #5
 800defe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3328      	adds	r3, #40	; 0x28
 800df2e:	220a      	movs	r2, #10
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fb7a 	bl	800e62c <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800df38:	e0e4      	b.n	800e104 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	3308      	adds	r3, #8
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b04      	cmp	r3, #4
 800df42:	d131      	bne.n	800dfa8 <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2205      	movs	r2, #5
 800df48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	7a5a      	ldrb	r2, [r3, #9]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	7a9a      	ldrb	r2, [r3, #10]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2205      	movs	r2, #5
 800df6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2202      	movs	r2, #2
 800df7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2235      	movs	r2, #53	; 0x35
 800df84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3328      	adds	r3, #40	; 0x28
 800df9c:	220a      	movs	r2, #10
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fb43 	bl	800e62c <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800dfa6:	e0ad      	b.n	800e104 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	3308      	adds	r3, #8
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b06      	cmp	r3, #6
 800dfb0:	f040 80a8 	bne.w	800e104 <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	3309      	adds	r3, #9
 800dfb8:	7819      	ldrb	r1, [r3, #0]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	330a      	adds	r3, #10
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fb4c 	bl	800e660 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800dfc8:	e09c      	b.n	800e104 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	3306      	adds	r3, #6
 800dfce:	781a      	ldrb	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d166      	bne.n	800e0a8 <_ZN5BTHID7ACLDataEPh+0x848>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	3307      	adds	r3, #7
 800dfde:	781a      	ldrb	r2, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d15e      	bne.n	800e0a8 <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	3308      	adds	r3, #8
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	2ba1      	cmp	r3, #161	; 0xa1
 800dff2:	f040 8089 	bne.w	800e108 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800dff6:	f7f4 fdeb 	bl	8002bd0 <HAL_GetTick>
 800dffa:	4603      	mov	r3, r0
 800dffc:	4a48      	ldr	r2, [pc, #288]	; (800e120 <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800dffe:	fba2 2303 	umull	r2, r3, r2, r3
 800e002:	099a      	lsrs	r2, r3, #6
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3305      	adds	r3, #5
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	021b      	lsls	r3, r3, #8
 800e010:	b21a      	sxth	r2, r3
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	3304      	adds	r3, #4
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	b21b      	sxth	r3, r3
 800e01a:	4313      	orrs	r3, r2
 800e01c:	b21b      	sxth	r3, r3
 800e01e:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3314      	adds	r3, #20
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	89fa      	ldrh	r2, [r7, #14]
 800e02a:	b2d2      	uxtb	r2, r2
 800e02c:	3a01      	subs	r2, #1
 800e02e:	b2d1      	uxtb	r1, r2
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	3209      	adds	r2, #9
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	3309      	adds	r3, #9
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d002      	beq.n	800e048 <_ZN5BTHID7ACLDataEPh+0x7e8>
 800e042:	2b02      	cmp	r3, #2
 800e044:	d016      	beq.n	800e074 <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800e046:	e05f      	b.n	800e108 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a1b      	ldr	r3, [r3, #32]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d027      	beq.n	800e0a0 <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a18      	ldr	r0, [r3, #32]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a1b      	ldr	r3, [r3, #32]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681c      	ldr	r4, [r3, #0]
 800e05c:	89fb      	ldrh	r3, [r7, #14]
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	3b02      	subs	r3, #2
 800e062:	b2da      	uxtb	r2, r3
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	330a      	adds	r3, #10
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	4613      	mov	r3, r2
 800e06c:	2200      	movs	r2, #0
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	47a0      	blx	r4
                                                break;
 800e072:	e015      	b.n	800e0a0 <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d013      	beq.n	800e0a4 <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681c      	ldr	r4, [r3, #0]
 800e088:	89fb      	ldrh	r3, [r7, #14]
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	3b02      	subs	r3, #2
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	330a      	adds	r3, #10
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	4613      	mov	r3, r2
 800e098:	2200      	movs	r2, #0
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	47a0      	blx	r4
                                                break;
 800e09e:	e001      	b.n	800e0a4 <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800e0a0:	bf00      	nop
 800e0a2:	e031      	b.n	800e108 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800e0a4:	bf00      	nop
                        }
 800e0a6:	e02f      	b.n	800e108 <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	3306      	adds	r3, #6
 800e0ac:	781a      	ldrb	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d128      	bne.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	3307      	adds	r3, #7
 800e0bc:	781a      	ldrb	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d120      	bne.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	2ba3      	cmp	r3, #163	; 0xa3
 800e0d0:	d11b      	bne.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	3305      	adds	r3, #5
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	021b      	lsls	r3, r3, #8
 800e0da:	b21a      	sxth	r2, r3
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b21b      	sxth	r3, r3
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	b21b      	sxth	r3, r3
 800e0e8:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3318      	adds	r3, #24
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	89ba      	ldrh	r2, [r7, #12]
 800e0f4:	b2d2      	uxtb	r2, r2
 800e0f6:	3a01      	subs	r2, #1
 800e0f8:	b2d1      	uxtb	r1, r2
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	3209      	adds	r2, #9
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	4798      	blx	r3
 800e102:	e002      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800e104:	bf00      	nop
 800e106:	e000      	b.n	800e10a <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800e108:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f80a 	bl	800e124 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 f8b9 	bl	800e288 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800e116:	bf00      	nop
 800e118:	3714      	adds	r7, #20
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd90      	pop	{r4, r7, pc}
 800e11e:	bf00      	nop
 800e120:	10624dd3 	.word	0x10624dd3

0800e124 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800e124:	b5b0      	push	{r4, r5, r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af02      	add	r7, sp, #8
 800e12a:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	7e9b      	ldrb	r3, [r3, #26]
 800e130:	2b0e      	cmp	r3, #14
 800e132:	f000 8086 	beq.w	800e242 <_ZN5BTHID8SDP_taskEv+0x11e>
 800e136:	2b0e      	cmp	r3, #14
 800e138:	f300 80a1 	bgt.w	800e27e <_ZN5BTHID8SDP_taskEv+0x15a>
 800e13c:	2b0a      	cmp	r3, #10
 800e13e:	d002      	beq.n	800e146 <_ZN5BTHID8SDP_taskEv+0x22>
 800e140:	2b0b      	cmp	r3, #11
 800e142:	d06a      	beq.n	800e21a <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800e144:	e09b      	b.n	800e27e <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d043      	beq.n	800e1da <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6898      	ldr	r0, [r3, #8]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	8999      	ldrh	r1, [r3, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	7d1a      	ldrb	r2, [r3, #20]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	331b      	adds	r3, #27
 800e174:	2501      	movs	r5, #1
 800e176:	9501      	str	r5, [sp, #4]
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	4623      	mov	r3, r4
 800e17c:	f7fe fc22 	bl	800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e184:	f7f4 fd30 	bl	8002be8 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6898      	ldr	r0, [r3, #8]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	8999      	ldrh	r1, [r3, #12]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7d1a      	ldrb	r2, [r3, #20]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	331b      	adds	r3, #27
 800e19e:	2500      	movs	r5, #0
 800e1a0:	9501      	str	r5, [sp, #4]
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	4623      	mov	r3, r4
 800e1a6:	f7fe fc0d 	bl	800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7d1b      	ldrb	r3, [r3, #20]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800e1b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e1ba:	f7f4 fd15 	bl	8002be8 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6898      	ldr	r0, [r3, #8]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	8999      	ldrh	r1, [r3, #12]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	7d1a      	ldrb	r2, [r3, #20]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	331b      	adds	r3, #27
 800e1ce:	f7fe fc46 	bl	800ca5e <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	220b      	movs	r2, #11
 800e1d6:	769a      	strb	r2, [r3, #26]
                        break;
 800e1d8:	e04c      	b.n	800e274 <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d046      	beq.n	800e274 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6898      	ldr	r0, [r3, #8]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	8999      	ldrh	r1, [r3, #12]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7d1a      	ldrb	r2, [r3, #20]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	331b      	adds	r3, #27
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	4623      	mov	r3, r4
 800e214:	f7fe fcfe 	bl	800cc14 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800e218:	e02c      	b.n	800e274 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e222:	2b00      	cmp	r3, #0
 800e224:	d028      	beq.n	800e278 <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	220a      	movs	r2, #10
 800e23e:	769a      	strb	r2, [r3, #26]
                        break;
 800e240:	e01a      	b.n	800e278 <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d016      	beq.n	800e27c <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	689a      	ldr	r2, [r3, #8]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	899b      	ldrh	r3, [r3, #12]
 800e256:	4619      	mov	r1, r3
 800e258:	4610      	mov	r0, r2
 800e25a:	f7fe fa84 	bl	800c766 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e264:	819a      	strh	r2, [r3, #12]
                                Reset();
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3308      	adds	r3, #8
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	4798      	blx	r3
                        break;
 800e272:	e003      	b.n	800e27c <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800e274:	bf00      	nop
 800e276:	e002      	b.n	800e27e <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800e278:	bf00      	nop
 800e27a:	e000      	b.n	800e27e <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800e27c:	bf00      	nop
}
 800e27e:	bf00      	nop
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e288 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800e288:	b5b0      	push	{r4, r5, r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af02      	add	r7, sp, #8
 800e28e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800e296:	3b01      	subs	r3, #1
 800e298:	2b08      	cmp	r3, #8
 800e29a:	f200 812f 	bhi.w	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
 800e29e:	a201      	add	r2, pc, #4	; (adr r2, 800e2a4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800e2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a4:	0800e4db 	.word	0x0800e4db
 800e2a8:	0800e373 	.word	0x0800e373
 800e2ac:	0800e3ab 	.word	0x0800e3ab
 800e2b0:	0800e2c9 	.word	0x0800e2c9
 800e2b4:	0800e4a7 	.word	0x0800e4a7
 800e2b8:	0800e2e7 	.word	0x0800e2e7
 800e2bc:	0800e3f5 	.word	0x0800e3f5
 800e2c0:	0800e42b 	.word	0x0800e42b
 800e2c4:	0800e467 	.word	0x0800e467
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	f003 0302 	and.w	r3, r3, #2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 8104 	beq.w	800e4de <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f9fd 	bl	800e6d6 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2206      	movs	r2, #6
 800e2e0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e2e4:	e0fb      	b.n	800e4de <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	f003 0310 	and.w	r3, r3, #16
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 80f7 	beq.w	800e4e2 <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6898      	ldr	r0, [r3, #8]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	8999      	ldrh	r1, [r3, #12]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	7d1a      	ldrb	r2, [r3, #20]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	3318      	adds	r3, #24
 800e30a:	2501      	movs	r5, #1
 800e30c:	9501      	str	r5, [sp, #4]
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	4623      	mov	r3, r4
 800e312:	f7fe fb57 	bl	800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e31a:	f7f4 fc65 	bl	8002be8 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6898      	ldr	r0, [r3, #8]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	8999      	ldrh	r1, [r3, #12]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	7d1a      	ldrb	r2, [r3, #20]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3318      	adds	r3, #24
 800e334:	2500      	movs	r5, #0
 800e336:	9501      	str	r5, [sp, #4]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	4623      	mov	r3, r4
 800e33c:	f7fe fb42 	bl	800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	7d1b      	ldrb	r3, [r3, #20]
 800e344:	3301      	adds	r3, #1
 800e346:	b2da      	uxtb	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800e34c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e350:	f7f4 fc4a 	bl	8002be8 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6898      	ldr	r0, [r3, #8]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	8999      	ldrh	r1, [r3, #12]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	7d1a      	ldrb	r2, [r3, #20]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	3318      	adds	r3, #24
 800e364:	f7fe fb7b 	bl	800ca5e <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2208      	movs	r2, #8
 800e36c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e370:	e0b7      	b.n	800e4e2 <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	f003 0304 	and.w	r3, r3, #4
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 80b3 	beq.w	800e4e6 <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7d1b      	ldrb	r3, [r3, #20]
 800e384:	3301      	adds	r3, #1
 800e386:	b2da      	uxtb	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6898      	ldr	r0, [r3, #8]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	8999      	ldrh	r1, [r3, #12]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7d1a      	ldrb	r2, [r3, #20]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3316      	adds	r3, #22
 800e39c:	f7fe fb5f 	bl	800ca5e <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2203      	movs	r2, #3
 800e3a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e3a8:	e09d      	b.n	800e4e6 <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f000 8099 	beq.w	800e4ea <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f98c 	bl	800e6d6 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800e3be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3c2:	f7f4 fc11 	bl	8002be8 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6898      	ldr	r0, [r3, #8]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8999      	ldrh	r1, [r3, #12]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	7d1a      	ldrb	r2, [r3, #20]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	336d      	adds	r3, #109	; 0x6d
 800e3e2:	2413      	movs	r4, #19
 800e3e4:	9400      	str	r4, [sp, #0]
 800e3e6:	f7fe faaf 	bl	800c948 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2207      	movs	r2, #7
 800e3ee:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e3f2:	e07a      	b.n	800e4ea <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d076      	beq.n	800e4ee <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	7d1b      	ldrb	r3, [r3, #20]
 800e404:	3301      	adds	r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6898      	ldr	r0, [r3, #8]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	8999      	ldrh	r1, [r3, #12]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7d1a      	ldrb	r2, [r3, #20]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3318      	adds	r3, #24
 800e41c:	f7fe fb1f 	bl	800ca5e <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2208      	movs	r2, #8
 800e424:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e428:	e061      	b.n	800e4ee <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	f003 0320 	and.w	r3, r3, #32
 800e432:	2b00      	cmp	r3, #0
 800e434:	d05d      	beq.n	800e4f2 <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	2200      	movs	r2, #0
 800e446:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2201      	movs	r2, #1
 800e44e:	755a      	strb	r2, [r3, #21]
                                onInit();
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3310      	adds	r3, #16
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e464:	e045      	b.n	800e4f2 <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d041      	beq.n	800e4f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7d1b      	ldrb	r3, [r3, #20]
 800e476:	3301      	adds	r3, #1
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6898      	ldr	r0, [r3, #8]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8999      	ldrh	r1, [r3, #12]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	7d1a      	ldrb	r2, [r3, #20]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f103 0416 	add.w	r4, r3, #22
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	336b      	adds	r3, #107	; 0x6b
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	4623      	mov	r3, r4
 800e498:	f7fe fb7f 	bl	800cb9a <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2205      	movs	r2, #5
 800e4a0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e4a4:	e027      	b.n	800e4f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	f003 0308 	and.w	r3, r3, #8
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d023      	beq.n	800e4fa <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	899b      	ldrh	r3, [r3, #12]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f7fe f952 	bl	800c766 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4c8:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e4d8:	e00f      	b.n	800e4fa <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800e4da:	bf00      	nop
 800e4dc:	e00e      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4de:	bf00      	nop
 800e4e0:	e00c      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4e2:	bf00      	nop
 800e4e4:	e00a      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4e6:	bf00      	nop
 800e4e8:	e008      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4ea:	bf00      	nop
 800e4ec:	e006      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4ee:	bf00      	nop
 800e4f0:	e004      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4f2:	bf00      	nop
 800e4f4:	e002      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4f6:	bf00      	nop
 800e4f8:	e000      	b.n	800e4fc <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e4fa:	bf00      	nop
        }
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bdb0      	pop	{r4, r5, r7, pc}

0800e504 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800e504:	b5b0      	push	{r4, r5, r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af02      	add	r7, sp, #8
 800e50a:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800e512:	2b00      	cmp	r3, #0
 800e514:	f040 8086 	bne.w	800e624 <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e520:	2b00      	cmp	r3, #0
 800e522:	d03a      	beq.n	800e59a <_ZN5BTHID3RunEv+0x96>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	689b      	ldr	r3, [r3, #8]
 800e528:	7a5b      	ldrb	r3, [r3, #9]
 800e52a:	f083 0301 	eor.w	r3, r3, #1
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d032      	beq.n	800e59a <_ZN5BTHID3RunEv+0x96>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7d5b      	ldrb	r3, [r3, #21]
 800e538:	f083 0301 	eor.w	r3, r3, #1
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d02b      	beq.n	800e59a <_ZN5BTHID3RunEv+0x96>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e548:	f083 0301 	eor.w	r3, r3, #1
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d023      	beq.n	800e59a <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	2201      	movs	r2, #1
 800e558:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	8b5a      	ldrh	r2, [r3, #26]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6898      	ldr	r0, [r3, #8]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	8999      	ldrh	r1, [r3, #12]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	7d1a      	ldrb	r2, [r3, #20]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	336b      	adds	r3, #107	; 0x6b
 800e588:	2411      	movs	r4, #17
 800e58a:	9400      	str	r4, [sp, #0]
 800e58c:	f7fe f9dc 	bl	800c948 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2202      	movs	r2, #2
 800e594:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800e598:	e043      	b.n	800e622 <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d03d      	beq.n	800e622 <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6898      	ldr	r0, [r3, #8]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	8999      	ldrh	r1, [r3, #12]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	7d1a      	ldrb	r2, [r3, #20]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	3316      	adds	r3, #22
 800e5bc:	2501      	movs	r5, #1
 800e5be:	9501      	str	r5, [sp, #4]
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	4623      	mov	r3, r4
 800e5c4:	f7fe f9fe 	bl	800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e5c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5cc:	f7f4 fb0c 	bl	8002be8 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6898      	ldr	r0, [r3, #8]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	8999      	ldrh	r1, [r3, #12]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7d1a      	ldrb	r2, [r3, #20]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3316      	adds	r3, #22
 800e5e6:	2500      	movs	r5, #0
 800e5e8:	9501      	str	r5, [sp, #4]
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	4623      	mov	r3, r4
 800e5ee:	f7fe f9e9 	bl	800c9c4 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	7d1b      	ldrb	r3, [r3, #20]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800e5fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e602:	f7f4 faf1 	bl	8002be8 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6898      	ldr	r0, [r3, #8]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	8999      	ldrh	r1, [r3, #12]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7d1a      	ldrb	r2, [r3, #20]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3316      	adds	r3, #22
 800e616:	f7fe fa22 	bl	800ca5e <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2204      	movs	r2, #4
 800e61e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800e622:	bf00      	nop
        }
}
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bdb0      	pop	{r4, r5, r7, pc}

0800e62c <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b087      	sub	sp, #28
 800e630:	af02      	add	r7, sp, #8
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6898      	ldr	r0, [r3, #8]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	8999      	ldrh	r1, [r3, #12]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	7edb      	ldrb	r3, [r3, #27]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	7f12      	ldrb	r2, [r2, #28]
 800e64a:	79fc      	ldrb	r4, [r7, #7]
 800e64c:	9201      	str	r2, [sp, #4]
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	4623      	mov	r3, r4
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	f7fe f8e6 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e658:	bf00      	nop
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd90      	pop	{r4, r7, pc}

0800e660 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	460b      	mov	r3, r1
 800e66a:	70fb      	strb	r3, [r7, #3]
 800e66c:	4613      	mov	r3, r2
 800e66e:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2207      	movs	r2, #7
 800e674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	78fa      	ldrb	r2, [r7, #3]
 800e67c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	78ba      	ldrb	r2, [r7, #2]
 800e684:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2205      	movs	r2, #5
 800e694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2235      	movs	r2, #53	; 0x35
 800e6ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	3328      	adds	r3, #40	; 0x28
 800e6c4:	220a      	movs	r2, #10
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff ffaf 	bl	800e62c <_ZN5BTHID11SDP_CommandEPhh>
}
 800e6ce:	bf00      	nop
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800e6d6:	b590      	push	{r4, r7, lr}
 800e6d8:	b087      	sub	sp, #28
 800e6da:	af02      	add	r7, sp, #8
 800e6dc:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d008      	beq.n	800e6fa <_ZN5BTHID11setProtocolEv+0x24>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d003      	beq.n	800e6fa <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e700:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e704:	b2db      	uxtb	r3, r3
 800e706:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6898      	ldr	r0, [r3, #8]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	8999      	ldrh	r1, [r3, #12]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	7d9b      	ldrb	r3, [r3, #22]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	7dd2      	ldrb	r2, [r2, #23]
 800e718:	f107 040f 	add.w	r4, r7, #15
 800e71c:	9201      	str	r2, [sp, #4]
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	2301      	movs	r3, #1
 800e722:	4622      	mov	r2, r4
 800e724:	f7fe f87e 	bl	800c824 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e728:	bf00      	nop
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd90      	pop	{r4, r7, pc}

0800e730 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	460b      	mov	r3, r1
 800e73a:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800e73c:	78fb      	ldrb	r3, [r7, #3]
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d86e      	bhi.n	800e820 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800e742:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800e744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e748:	0800e759 	.word	0x0800e759
 800e74c:	0800e78b 	.word	0x0800e78b
 800e750:	0800e7bd 	.word	0x0800e7bd
 800e754:	0800e7ef 	.word	0x0800e7ef
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	7a1b      	ldrb	r3, [r3, #8]
 800e75c:	f003 030f 	and.w	r3, r3, #15
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b07      	cmp	r3, #7
 800e764:	d00d      	beq.n	800e782 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7a1b      	ldrb	r3, [r3, #8]
 800e76a:	f003 030f 	and.w	r3, r3, #15
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d006      	beq.n	800e782 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	7a1b      	ldrb	r3, [r3, #8]
 800e778:	f003 030f 	and.w	r3, r3, #15
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800e782:	2301      	movs	r3, #1
 800e784:	e04d      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800e786:	2300      	movs	r3, #0
 800e788:	e04b      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	7a1b      	ldrb	r3, [r3, #8]
 800e78e:	f003 030f 	and.w	r3, r3, #15
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b01      	cmp	r3, #1
 800e796:	d00d      	beq.n	800e7b4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	7a1b      	ldrb	r3, [r3, #8]
 800e79c:	f003 030f 	and.w	r3, r3, #15
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d006      	beq.n	800e7b4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	7a1b      	ldrb	r3, [r3, #8]
 800e7aa:	f003 030f 	and.w	r3, r3, #15
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	2b03      	cmp	r3, #3
 800e7b2:	d101      	bne.n	800e7b8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e034      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e032      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	7a1b      	ldrb	r3, [r3, #8]
 800e7c0:	f003 030f 	and.w	r3, r3, #15
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b03      	cmp	r3, #3
 800e7c8:	d00d      	beq.n	800e7e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	7a1b      	ldrb	r3, [r3, #8]
 800e7ce:	f003 030f 	and.w	r3, r3, #15
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b04      	cmp	r3, #4
 800e7d6:	d006      	beq.n	800e7e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7a1b      	ldrb	r3, [r3, #8]
 800e7dc:	f003 030f 	and.w	r3, r3, #15
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	2b05      	cmp	r3, #5
 800e7e4:	d101      	bne.n	800e7ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e01b      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	e019      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	7a1b      	ldrb	r3, [r3, #8]
 800e7f2:	f003 030f 	and.w	r3, r3, #15
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	2b05      	cmp	r3, #5
 800e7fa:	d00d      	beq.n	800e818 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	7a1b      	ldrb	r3, [r3, #8]
 800e800:	f003 030f 	and.w	r3, r3, #15
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b06      	cmp	r3, #6
 800e808:	d006      	beq.n	800e818 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	7a1b      	ldrb	r3, [r3, #8]
 800e80e:	f003 030f 	and.w	r3, r3, #15
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b07      	cmp	r3, #7
 800e816:	d101      	bne.n	800e81c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800e818:	2301      	movs	r3, #1
 800e81a:	e002      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800e81c:	2300      	movs	r3, #0
 800e81e:	e000      	b.n	800e822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800e820:	2300      	movs	r3, #0
        }
}
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop

0800e830 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:
                return checkDpad(b);
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
}

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	460b      	mov	r3, r1
 800e83a:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800e83c:	78fb      	ldrb	r3, [r7, #3]
 800e83e:	4a1b      	ldr	r2, [pc, #108]	; (800e8ac <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800e840:	4413      	add	r3, r2
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	461a      	mov	r2, r3
 800e846:	2301      	movs	r3, #1
 800e848:	4093      	lsls	r3, r2
 800e84a:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800e852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e856:	021b      	lsls	r3, r3, #8
 800e858:	4313      	orrs	r3, r2
 800e85a:	461a      	mov	r2, r3
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	4013      	ands	r3, r2
 800e860:	2b00      	cmp	r3, #0
 800e862:	bf14      	ite	ne
 800e864:	2301      	movne	r3, #1
 800e866:	2300      	moveq	r3, #0
 800e868:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800e870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e874:	021b      	lsls	r3, r3, #8
 800e876:	4313      	orrs	r3, r2
 800e878:	461a      	mov	r2, r3
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	43db      	mvns	r3, r3
 800e87e:	4013      	ands	r3, r2
 800e880:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	b2d1      	uxtb	r1, r2
 800e888:	2000      	movs	r0, #0
 800e88a:	4301      	orrs	r1, r0
 800e88c:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800e890:	0a12      	lsrs	r2, r2, #8
 800e892:	b292      	uxth	r2, r2
 800e894:	2100      	movs	r1, #0
 800e896:	430a      	orrs	r2, r1
 800e898:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800e89c:	7afb      	ldrb	r3, [r7, #11]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	08010df8 	.word	0x08010df8

0800e8b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800e8bc:	78fb      	ldrb	r3, [r7, #3]
 800e8be:	2b08      	cmp	r3, #8
 800e8c0:	d102      	bne.n	800e8c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	7adb      	ldrb	r3, [r3, #11]
 800e8c6:	e006      	b.n	800e8d6 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800e8c8:	78fb      	ldrb	r3, [r7, #3]
 800e8ca:	2b09      	cmp	r3, #9
 800e8cc:	d102      	bne.n	800e8d4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	7b1b      	ldrb	r3, [r3, #12]
 800e8d2:	e000      	b.n	800e8d6 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr

0800e8e2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800e8ee:	78fb      	ldrb	r3, [r7, #3]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	791b      	ldrb	r3, [r3, #4]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr

0800e902 <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800e902:	b580      	push	{r7, lr}
 800e904:	b086      	sub	sp, #24
 800e906:	af00      	add	r7, sp, #0
 800e908:	60f8      	str	r0, [r7, #12]
 800e90a:	460b      	mov	r3, r1
 800e90c:	607a      	str	r2, [r7, #4]
 800e90e:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800e910:	7afb      	ldrb	r3, [r7, #11]
 800e912:	2b01      	cmp	r3, #1
 800e914:	f240 80a6 	bls.w	800ea64 <_ZN9PS4Parser5ParseEhPh+0x162>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f000 80a2 	beq.w	800ea64 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d10e      	bne.n	800e946 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	1d18      	adds	r0, r3, #4
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	1c59      	adds	r1, r3, #1
 800e930:	7afb      	ldrb	r3, [r7, #11]
 800e932:	3b01      	subs	r3, #1
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b3c      	cmp	r3, #60	; 0x3c
 800e938:	bf28      	it	cs
 800e93a:	233c      	movcs	r3, #60	; 0x3c
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	461a      	mov	r2, r3
 800e940:	f002 f80c 	bl	801095c <memcpy>
 800e944:	e016      	b.n	800e974 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b11      	cmp	r3, #17
 800e94c:	f040 8098 	bne.w	800ea80 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800e950:	7afb      	ldrb	r3, [r7, #11]
 800e952:	2b03      	cmp	r3, #3
 800e954:	f240 8096 	bls.w	800ea84 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	1d18      	adds	r0, r3, #4
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	1cd9      	adds	r1, r3, #3
 800e960:	7afb      	ldrb	r3, [r7, #11]
 800e962:	3b03      	subs	r3, #3
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b3c      	cmp	r3, #60	; 0x3c
 800e968:	bf28      	it	cs
 800e96a:	233c      	movcs	r3, #60	; 0x3c
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	461a      	mov	r2, r3
 800e970:	f001 fff4 	bl	801095c <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e980:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e984:	429a      	cmp	r2, r3
 800e986:	d06d      	beq.n	800ea64 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e990:	461a      	mov	r2, r3
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e996:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e99a:	43db      	mvns	r3, r3
 800e99c:	4013      	ands	r3, r2
 800e99e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	b2d1      	uxtb	r1, r2
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	4301      	orrs	r1, r0
 800e9aa:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800e9ae:	0a12      	lsrs	r2, r2, #8
 800e9b0:	b292      	uxth	r2, r2
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	430a      	orrs	r2, r1
 800e9b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e9c6:	f361 0317 	bfi	r3, r1, #0, #24
 800e9ca:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7ff feac 	bl	800e730 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d003      	beq.n	800e9e6 <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800e9de:	7dfb      	ldrb	r3, [r7, #23]
 800e9e0:	f043 0301 	orr.w	r3, r3, #1
 800e9e4:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f7ff fea1 	bl	800e730 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d003      	beq.n	800e9fc <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	f043 0302 	orr.w	r3, r3, #2
 800e9fa:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800e9fc:	2102      	movs	r1, #2
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff fe96 	bl	800e730 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
 800ea0c:	f043 0304 	orr.w	r3, r3, #4
 800ea10:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800ea12:	2103      	movs	r1, #3
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7ff fe8b 	bl	800e730 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d003      	beq.n	800ea28 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	f043 0308 	orr.w	r3, r3, #8
 800ea26:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ea2e:	7dfa      	ldrb	r2, [r7, #23]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d017      	beq.n	800ea64 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ea3a:	b25b      	sxtb	r3, r3
 800ea3c:	43db      	mvns	r3, r3
 800ea3e:	b25a      	sxtb	r2, r3
 800ea40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea44:	4013      	ands	r3, r2
 800ea46:	b25b      	sxtb	r3, r3
 800ea48:	f003 030f 	and.w	r3, r3, #15
 800ea4c:	b2d9      	uxtb	r1, r3
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800ea54:	f361 0303 	bfi	r3, r1, #0, #4
 800ea58:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	7dfa      	ldrb	r2, [r7, #23]
 800ea60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00b      	beq.n	800ea86 <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	3246      	adds	r2, #70	; 0x46
 800ea78:	4611      	mov	r1, r2
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	4798      	blx	r3
 800ea7e:	e002      	b.n	800ea86 <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800ea80:	bf00      	nop
 800ea82:	e000      	b.n	800ea86 <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800ea84:	bf00      	nop
}
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800ea94:	2300      	movs	r3, #0
 800ea96:	73fb      	strb	r3, [r7, #15]
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	2b03      	cmp	r3, #3
 800ea9c:	d808      	bhi.n	800eab0 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	227f      	movs	r2, #127	; 0x7f
 800eaa6:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	73fb      	strb	r3, [r7, #15]
 800eaae:	e7f3      	b.n	800ea98 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	6893      	ldr	r3, [r2, #8]
 800eab4:	f36f 0317 	bfc	r3, #0, #24
 800eab8:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800eabe:	f36f 0317 	bfc	r3, #0, #24
 800eac2:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800eac4:	2300      	movs	r3, #0
 800eac6:	73fb      	strb	r3, [r7, #15]
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d808      	bhi.n	800eae0 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800eace:	7bfb      	ldrb	r3, [r7, #15]
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	4413      	add	r3, r2
 800ead4:	2200      	movs	r2, #0
 800ead6:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
 800eada:	3301      	adds	r3, #1
 800eadc:	73fb      	strb	r3, [r7, #15]
 800eade:	e7f3      	b.n	800eac8 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d81b      	bhi.n	800eb22 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800eaea:	2300      	movs	r3, #0
 800eaec:	73bb      	strb	r3, [r7, #14]
 800eaee:	7bbb      	ldrb	r3, [r7, #14]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d812      	bhi.n	800eb1a <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800eaf4:	7bfa      	ldrb	r2, [r7, #15]
 800eaf6:	7bbb      	ldrb	r3, [r7, #14]
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	0098      	lsls	r0, r3, #2
 800eafc:	4613      	mov	r3, r2
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	4413      	add	r3, r2
 800eb02:	4403      	add	r3, r0
 800eb04:	440b      	add	r3, r1
 800eb06:	f103 0220 	add.w	r2, r3, #32
 800eb0a:	7993      	ldrb	r3, [r2, #6]
 800eb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb10:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800eb12:	7bbb      	ldrb	r3, [r7, #14]
 800eb14:	3301      	adds	r3, #1
 800eb16:	73bb      	strb	r3, [r7, #14]
 800eb18:	e7e9      	b.n	800eaee <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800eb1a:	7bfb      	ldrb	r3, [r7, #15]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	73fb      	strb	r3, [r7, #15]
 800eb20:	e7e0      	b.n	800eae4 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	7a13      	ldrb	r3, [r2, #8]
 800eb26:	2108      	movs	r1, #8
 800eb28:	f361 0303 	bfi	r3, r1, #0, #4
 800eb2c:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800eb34:	2108      	movs	r1, #8
 800eb36:	f361 0303 	bfi	r3, r1, #0, #4
 800eb3a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800eb44:	f36f 0303 	bfc	r3, #0, #4
 800eb48:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800eba4:	bf00      	nop
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	2180      	movs	r1, #128	; 0x80
 800ebb6:	4803      	ldr	r0, [pc, #12]	; (800ebc4 <_ZN2P95IsSetEv+0x14>)
 800ebb8:	f7f4 fd6e 	bl	8003698 <HAL_GPIO_ReadPin>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	40020800 	.word	0x40020800

0800ebc8 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f001 f9f3 	bl	800ffbc <_ZN8MAX3421eI3P102P9EC1Ev>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f001 fa0b 	bl	800fff4 <_ZN15AddressPoolImplILh16EEC1Ev>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800ebe6:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <_ZN3USBC1Ev+0x34>)
 800ebe8:	2211      	movs	r2, #17
 800ebea:	701a      	strb	r2, [r3, #0]
        init();
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 f807 	bl	800ec00 <_ZN3USB4initEv>
}
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	2000066d 	.word	0x2000066d

0800ec00 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70fb      	strb	r3, [r7, #3]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	78fa      	ldrb	r2, [r7, #3]
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f001 fa18 	bl	8010068 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ec38:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d003      	beq.n	800ec48 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d101      	bne.n	800ec4c <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	e018      	b.n	800ec7e <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800ec52:	2300      	movs	r3, #0
 800ec54:	74fb      	strb	r3, [r7, #19]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	795b      	ldrb	r3, [r3, #5]
 800ec5a:	7cfa      	ldrb	r2, [r7, #19]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d20d      	bcs.n	800ec7c <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	78ba      	ldrb	r2, [r7, #2]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d101      	bne.n	800ec6e <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	e007      	b.n	800ec7e <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	3303      	adds	r3, #3
 800ec72:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800ec74:	7cfb      	ldrb	r3, [r7, #19]
 800ec76:	3301      	adds	r3, #1
 800ec78:	74fb      	strb	r3, [r7, #19]
 800ec7a:	e7ec      	b.n	800ec56 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b086      	sub	sp, #24
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	60f8      	str	r0, [r7, #12]
 800ec8e:	607b      	str	r3, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	72fb      	strb	r3, [r7, #11]
 800ec94:	4613      	mov	r3, r2
 800ec96:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d101      	bne.n	800eca2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800ec9e:	23d8      	movs	r3, #216	; 0xd8
 800eca0:	e015      	b.n	800ecce <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	7afa      	ldrb	r2, [r7, #11]
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f001 f9dd 	bl	8010068 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ecae:	6178      	str	r0, [r7, #20]

        if(!p)
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ecb6:	23d6      	movs	r3, #214	; 0xd6
 800ecb8:	e009      	b.n	800ecce <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	7afa      	ldrb	r2, [r7, #11]
 800ecbe:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	7aba      	ldrb	r2, [r7, #10]
 800ecca:	715a      	strb	r2, [r3, #5]

        return 0;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3718      	adds	r7, #24
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b086      	sub	sp, #24
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	60f8      	str	r0, [r7, #12]
 800ecde:	607b      	str	r3, [r7, #4]
 800ece0:	460b      	mov	r3, r1
 800ece2:	72fb      	strb	r3, [r7, #11]
 800ece4:	4613      	mov	r3, r2
 800ece6:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	7afa      	ldrb	r2, [r7, #11]
 800ecec:	4611      	mov	r1, r2
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f001 f9ba 	bl	8010068 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ecf4:	6178      	str	r0, [r7, #20]

        if(!p)
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d101      	bne.n	800ed00 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ecfc:	23d6      	movs	r3, #214	; 0xd6
 800ecfe:	e04e      	b.n	800ed9e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800ed08:	23d7      	movs	r3, #215	; 0xd7
 800ed0a:	e048      	b.n	800ed9e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800ed0c:	7aba      	ldrb	r2, [r7, #10]
 800ed0e:	7afb      	ldrb	r3, [r7, #11]
 800ed10:	4619      	mov	r1, r3
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff ff82 	bl	800ec1c <_ZN3USB14getEpInfoEntryEhh>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800ed26:	23db      	movs	r3, #219	; 0xdb
 800ed28:	e039      	b.n	800ed9e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	789b      	ldrb	r3, [r3, #2]
 800ed30:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b0f      	cmp	r3, #15
 800ed38:	bf28      	it	cs
 800ed3a:	230f      	movcs	r3, #15
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	461a      	mov	r2, r3
 800ed40:	2301      	movs	r3, #1
 800ed42:	4093      	lsls	r3, r2
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	6a3b      	ldr	r3, [r7, #32]
 800ed48:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	881b      	ldrh	r3, [r3, #0]
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	6a3b      	ldr	r3, [r7, #32]
 800ed54:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800ed56:	7afb      	ldrb	r3, [r7, #11]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	21e0      	movs	r1, #224	; 0xe0
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7f3 fc25 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800ed62:	21d8      	movs	r1, #216	; 0xd8
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f7f3 fc73 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	799b      	ldrb	r3, [r3, #6]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d009      	beq.n	800ed8a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800ed7c:	7cfb      	ldrb	r3, [r7, #19]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f043 0302 	orr.w	r3, r3, #2
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	e003      	b.n	800ed92 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800ed8a:	7cfb      	ldrb	r3, [r7, #19]
 800ed8c:	f023 0306 	bic.w	r3, r3, #6
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	461a      	mov	r2, r3
 800ed94:	21d8      	movs	r1, #216	; 0xd8
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7f3 fc08 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800eda6:	b590      	push	{r4, r7, lr}
 800eda8:	b08b      	sub	sp, #44	; 0x2c
 800edaa:	af02      	add	r7, sp, #8
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	4608      	mov	r0, r1
 800edb0:	4611      	mov	r1, r2
 800edb2:	461a      	mov	r2, r3
 800edb4:	4603      	mov	r3, r0
 800edb6:	70fb      	strb	r3, [r7, #3]
 800edb8:	460b      	mov	r3, r1
 800edba:	70bb      	strb	r3, [r7, #2]
 800edbc:	4613      	mov	r3, r2
 800edbe:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800edc0:	2300      	movs	r3, #0
 800edc2:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800edcc:	f107 000c 	add.w	r0, r7, #12
 800edd0:	78ba      	ldrb	r2, [r7, #2]
 800edd2:	78f9      	ldrb	r1, [r7, #3]
 800edd4:	f107 030a 	add.w	r3, r7, #10
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	4603      	mov	r3, r0
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff ff7a 	bl	800ecd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800ede2:	4603      	mov	r3, r0
 800ede4:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800ede6:	7ffb      	ldrb	r3, [r7, #31]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800edec:	7ffb      	ldrb	r3, [r7, #31]
 800edee:	e0ae      	b.n	800ef4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800edf0:	787b      	ldrb	r3, [r7, #1]
 800edf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bfcc      	ite	gt
 800edfa:	2301      	movgt	r3, #1
 800edfc:	2300      	movle	r3, #0
 800edfe:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800ee00:	787b      	ldrb	r3, [r7, #1]
 800ee02:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800ee04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ee08:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800ee0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ee0e:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800ee10:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ee14:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800ee16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee18:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800ee1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee1e:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800ee20:	f107 0310 	add.w	r3, r7, #16
 800ee24:	2208      	movs	r2, #8
 800ee26:	2120      	movs	r1, #32
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f001 f943 	bl	80100b4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800ee2e:	897b      	ldrh	r3, [r7, #10]
 800ee30:	78ba      	ldrb	r2, [r7, #2]
 800ee32:	2110      	movs	r1, #16
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 fb01 	bl	800f43c <_ZN3USB11dispatchPktEhht>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800ee3e:	7ffb      	ldrb	r3, [r7, #31]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d001      	beq.n	800ee48 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800ee44:	7ffb      	ldrb	r3, [r7, #31]
 800ee46:	e082      	b.n	800ef4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800ee48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d072      	beq.n	800ef34 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800ee4e:	7efb      	ldrb	r3, [r7, #27]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d057      	beq.n	800ef04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800ee54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee58:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	7893      	ldrb	r3, [r2, #2]
 800ee5e:	f043 0302 	orr.w	r3, r3, #2
 800ee62:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800ee64:	8bbb      	ldrh	r3, [r7, #28]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d05f      	beq.n	800ef2a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800ee6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee6e:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800ee70:	68f9      	ldr	r1, [r7, #12]
 800ee72:	897a      	ldrh	r2, [r7, #10]
 800ee74:	f107 0008 	add.w	r0, r7, #8
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9301      	str	r3, [sp, #4]
 800ee7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	4603      	mov	r3, r0
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f8a6 	bl	800efd4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800ee8c:	7ffb      	ldrb	r3, [r7, #31]
 800ee8e:	2b06      	cmp	r3, #6
 800ee90:	d114      	bne.n	800eebc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800ee92:	21f8      	movs	r1, #248	; 0xf8
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7f3 fbdb 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f003 0320 	and.w	r3, r3, #32
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	bf0c      	ite	eq
 800eea4:	2301      	moveq	r3, #1
 800eea6:	2300      	movne	r3, #0
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	f003 0301 	and.w	r3, r3, #1
 800eeb0:	b2d9      	uxtb	r1, r3
 800eeb2:	7893      	ldrb	r3, [r2, #2]
 800eeb4:	f361 0341 	bfi	r3, r1, #1, #1
 800eeb8:	7093      	strb	r3, [r2, #2]
 800eeba:	e7d3      	b.n	800ee64 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800eebc:	7ffb      	ldrb	r3, [r7, #31]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800eec2:	7ffb      	ldrb	r3, [r7, #31]
 800eec4:	e043      	b.n	800ef4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800eec6:	7ffb      	ldrb	r3, [r7, #31]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d111      	bne.n	800eef0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800eecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00e      	beq.n	800eef0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800eed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	681c      	ldr	r4, [r3, #0]
 800eed8:	8939      	ldrh	r1, [r7, #8]
 800eeda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eede:	8bbb      	ldrh	r3, [r7, #28]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	833b      	strh	r3, [r7, #24]
 800eee6:	f107 0318 	add.w	r3, r7, #24
 800eeea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eeee:	47a0      	blx	r4

                                left -= read;
 800eef0:	893b      	ldrh	r3, [r7, #8]
 800eef2:	8bba      	ldrh	r2, [r7, #28]
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800eef8:	893b      	ldrh	r3, [r7, #8]
 800eefa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d812      	bhi.n	800ef28 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800ef02:	e7af      	b.n	800ee64 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	7893      	ldrb	r3, [r2, #2]
 800ef08:	f043 0301 	orr.w	r3, r3, #1
 800ef0c:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800ef0e:	68f9      	ldr	r1, [r7, #12]
 800ef10:	897a      	ldrh	r2, [r7, #10]
 800ef12:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800ef16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 f957 	bl	800f1d0 <_ZN3USB11OutTransferEP6EpInfottPh>
 800ef22:	4603      	mov	r3, r0
 800ef24:	77fb      	strb	r3, [r7, #31]
 800ef26:	e000      	b.n	800ef2a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800ef28:	bf00      	nop
                }
                if(rcode) //return error
 800ef2a:	7ffb      	ldrb	r3, [r7, #31]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800ef30:	7ffb      	ldrb	r3, [r7, #31]
 800ef32:	e00c      	b.n	800ef4e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800ef34:	7efb      	ldrb	r3, [r7, #27]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800ef3a:	21a0      	movs	r1, #160	; 0xa0
 800ef3c:	e000      	b.n	800ef40 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800ef3e:	2180      	movs	r1, #128	; 0x80
 800ef40:	897b      	ldrh	r3, [r7, #10]
 800ef42:	78ba      	ldrb	r2, [r7, #2]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 fa79 	bl	800f43c <_ZN3USB11dispatchPktEhht>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	bf00      	nop
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3724      	adds	r7, #36	; 0x24
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd90      	pop	{r4, r7, pc}

0800ef56 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b08a      	sub	sp, #40	; 0x28
 800ef5a:	af02      	add	r7, sp, #8
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	607b      	str	r3, [r7, #4]
 800ef60:	460b      	mov	r3, r1
 800ef62:	72fb      	strb	r3, [r7, #11]
 800ef64:	4613      	mov	r3, r2
 800ef66:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800ef70:	f107 0018 	add.w	r0, r7, #24
 800ef74:	7aba      	ldrb	r2, [r7, #10]
 800ef76:	7af9      	ldrb	r1, [r7, #11]
 800ef78:	f107 0316 	add.w	r3, r7, #22
 800ef7c:	9300      	str	r3, [sp, #0]
 800ef7e:	4603      	mov	r3, r0
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7ff fea8 	bl	800ecd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800ef86:	4603      	mov	r3, r0
 800ef88:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800ef8a:	7ffb      	ldrb	r3, [r7, #31]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d010      	beq.n	800efb2 <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800ef90:	7ffb      	ldrb	r3, [r7, #31]
 800ef92:	2181      	movs	r1, #129	; 0x81
 800ef94:	4618      	mov	r0, r3
 800ef96:	f001 f8bb 	bl	8010110 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800ef9a:	7afb      	ldrb	r3, [r7, #11]
 800ef9c:	2181      	movs	r1, #129	; 0x81
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f001 f8b6 	bl	8010110 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800efa4:	7abb      	ldrb	r3, [r7, #10]
 800efa6:	2181      	movs	r1, #129	; 0x81
 800efa8:	4618      	mov	r0, r3
 800efaa:	f001 f8b1 	bl	8010110 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800efae:	7ffb      	ldrb	r3, [r7, #31]
 800efb0:	e00c      	b.n	800efcc <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800efb2:	69b9      	ldr	r1, [r7, #24]
 800efb4:	8afa      	ldrh	r2, [r7, #22]
 800efb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800efba:	9301      	str	r3, [sp, #4]
 800efbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 f806 	bl	800efd4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800efc8:	4603      	mov	r3, r0
 800efca:	bf00      	nop
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3720      	adds	r7, #32
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	603b      	str	r3, [r7, #0]
 800efe0:	4613      	mov	r3, r2
 800efe2:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	785b      	ldrb	r3, [r3, #1]
 800eff2:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	2200      	movs	r2, #0
 800eff8:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	789b      	ldrb	r3, [r3, #2]
 800effe:	f003 0302 	and.w	r3, r3, #2
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	d001      	beq.n	800f00c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800f008:	2320      	movs	r3, #32
 800f00a:	e000      	b.n	800f00e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800f00c:	2310      	movs	r3, #16
 800f00e:	461a      	mov	r2, r3
 800f010:	21e8      	movs	r1, #232	; 0xe8
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7f3 faca 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	781a      	ldrb	r2, [r3, #0]
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	2100      	movs	r1, #0
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f000 fa0b 	bl	800f43c <_ZN3USB11dispatchPktEhht>
 800f026:	4603      	mov	r3, r0
 800f028:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800f02a:	7dfb      	ldrb	r3, [r7, #23]
 800f02c:	2b06      	cmp	r3, #6
 800f02e:	d123      	bne.n	800f078 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800f030:	21f8      	movs	r1, #248	; 0xf8
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7f3 fb0c 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f038:	4603      	mov	r3, r0
 800f03a:	f003 0310 	and.w	r3, r3, #16
 800f03e:	2b00      	cmp	r3, #0
 800f040:	bf0c      	ite	eq
 800f042:	2301      	moveq	r3, #1
 800f044:	2300      	movne	r3, #0
 800f046:	b2db      	uxtb	r3, r3
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	b2d9      	uxtb	r1, r3
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	7893      	ldrb	r3, [r2, #2]
 800f052:	f361 0341 	bfi	r3, r1, #1, #1
 800f056:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	789b      	ldrb	r3, [r3, #2]
 800f05c:	f003 0302 	and.w	r3, r3, #2
 800f060:	b2db      	uxtb	r3, r3
 800f062:	2b00      	cmp	r3, #0
 800f064:	d001      	beq.n	800f06a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800f066:	2320      	movs	r3, #32
 800f068:	e000      	b.n	800f06c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800f06a:	2310      	movs	r3, #16
 800f06c:	461a      	mov	r2, r3
 800f06e:	21e8      	movs	r1, #232	; 0xe8
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f7f3 fa9b 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800f076:	e072      	b.n	800f15e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d170      	bne.n	800f160 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800f07e:	21c8      	movs	r1, #200	; 0xc8
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f7f3 fae5 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f086:	4603      	mov	r3, r0
 800f088:	f003 0304 	and.w	r3, r3, #4
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	bf0c      	ite	eq
 800f090:	2301      	moveq	r3, #1
 800f092:	2300      	movne	r3, #0
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800f09a:	23f0      	movs	r3, #240	; 0xf0
 800f09c:	75fb      	strb	r3, [r7, #23]
                        break;
 800f09e:	e060      	b.n	800f162 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800f0a0:	2130      	movs	r1, #48	; 0x30
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7f3 fad4 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800f0ac:	7dba      	ldrb	r2, [r7, #22]
 800f0ae:	8a7b      	ldrh	r3, [r7, #18]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	dd01      	ble.n	800f0b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800f0b4:	8a7b      	ldrh	r3, [r7, #18]
 800f0b6:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	8a7a      	ldrh	r2, [r7, #18]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800f0c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	da01      	bge.n	800f0d4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800f0d4:	7dba      	ldrb	r2, [r7, #22]
 800f0d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	bfa8      	it	ge
 800f0de:	4613      	movge	r3, r2
 800f0e0:	b2da      	uxtb	r2, r3
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	2108      	movs	r1, #8
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f001 f81e 	bl	8010128 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800f0ec:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800f0ee:	2204      	movs	r2, #4
 800f0f0:	21c8      	movs	r1, #200	; 0xc8
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f7f3 fa5a 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	881a      	ldrh	r2, [r3, #0]
 800f0fc:	7dbb      	ldrb	r3, [r7, #22]
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	4413      	add	r3, r2
 800f102:	b29a      	uxth	r2, r3
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800f108:	7dba      	ldrb	r2, [r7, #22]
 800f10a:	7c7b      	ldrb	r3, [r7, #17]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d304      	bcc.n	800f11a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	8a7a      	ldrh	r2, [r7, #18]
 800f116:	429a      	cmp	r2, r3
 800f118:	d813      	bhi.n	800f142 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800f11a:	21f8      	movs	r1, #248	; 0xf8
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f7f3 fa97 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f122:	4603      	mov	r3, r0
 800f124:	f003 0310 	and.w	r3, r3, #16
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800f12c:	2101      	movs	r1, #1
 800f12e:	e000      	b.n	800f132 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800f130:	2100      	movs	r1, #0
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	7893      	ldrb	r3, [r2, #2]
 800f136:	f361 0341 	bfi	r3, r1, #1, #1
 800f13a:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	75fb      	strb	r3, [r7, #23]
                        break;
 800f140:	e00f      	b.n	800f162 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800f142:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f146:	2b00      	cmp	r3, #0
 800f148:	f43f af66 	beq.w	800f018 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800f14c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f154:	fb02 f303 	mul.w	r3, r2, r3
 800f158:	4618      	mov	r0, r3
 800f15a:	f7f3 fd45 	bl	8002be8 <HAL_Delay>
        } //while( 1 )
 800f15e:	e75b      	b.n	800f018 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800f160:	bf00      	nop
        return ( rcode);
 800f162:	7dfb      	ldrb	r3, [r7, #23]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b088      	sub	sp, #32
 800f170:	af02      	add	r7, sp, #8
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	4608      	mov	r0, r1
 800f176:	4611      	mov	r1, r2
 800f178:	461a      	mov	r2, r3
 800f17a:	4603      	mov	r3, r0
 800f17c:	70fb      	strb	r3, [r7, #3]
 800f17e:	460b      	mov	r3, r1
 800f180:	70bb      	strb	r3, [r7, #2]
 800f182:	4613      	mov	r3, r2
 800f184:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800f186:	2300      	movs	r3, #0
 800f188:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800f18e:	f107 0010 	add.w	r0, r7, #16
 800f192:	78ba      	ldrb	r2, [r7, #2]
 800f194:	78f9      	ldrb	r1, [r7, #3]
 800f196:	f107 030e 	add.w	r3, r7, #14
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	4603      	mov	r3, r0
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff fd99 	bl	800ecd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
 800f1b0:	e00a      	b.n	800f1c8 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800f1b2:	6939      	ldr	r1, [r7, #16]
 800f1b4:	89fa      	ldrh	r2, [r7, #14]
 800f1b6:	8838      	ldrh	r0, [r7, #0]
 800f1b8:	6a3b      	ldr	r3, [r7, #32]
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	4603      	mov	r3, r0
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f806 	bl	800f1d0 <_ZN3USB11OutTransferEP6EpInfottPh>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	bf00      	nop
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3718      	adds	r7, #24
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b08a      	sub	sp, #40	; 0x28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	4611      	mov	r1, r2
 800f1dc:	461a      	mov	r2, r3
 800f1de:	460b      	mov	r3, r1
 800f1e0:	80fb      	strh	r3, [r7, #6]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800f1f0:	88bb      	ldrh	r3, [r7, #4]
 800f1f2:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	785b      	ldrb	r3, [r3, #1]
 800f1f8:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800f1fa:	7efb      	ldrb	r3, [r7, #27]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800f200:	7efb      	ldrb	r3, [r7, #27]
 800f202:	2b40      	cmp	r3, #64	; 0x40
 800f204:	d901      	bls.n	800f20a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800f206:	23da      	movs	r3, #218	; 0xda
 800f208:	e111      	b.n	800f42e <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800f20a:	f7f3 fce1 	bl	8002bd0 <HAL_GetTick>
 800f20e:	4603      	mov	r3, r0
 800f210:	4a89      	ldr	r2, [pc, #548]	; (800f438 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800f212:	fba2 2303 	umull	r2, r3, r2, r3
 800f216:	099b      	lsrs	r3, r3, #6
 800f218:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f21c:	3308      	adds	r3, #8
 800f21e:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	789b      	ldrb	r3, [r3, #2]
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800f22e:	2380      	movs	r3, #128	; 0x80
 800f230:	e000      	b.n	800f234 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800f232:	2340      	movs	r3, #64	; 0x40
 800f234:	461a      	mov	r2, r3
 800f236:	21e8      	movs	r1, #232	; 0xe8
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f7f3 f9b7 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800f23e:	8bbb      	ldrh	r3, [r7, #28]
 800f240:	2b00      	cmp	r3, #0
 800f242:	f000 80de 	beq.w	800f402 <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800f250:	7efb      	ldrb	r3, [r7, #27]
 800f252:	b29b      	uxth	r3, r3
 800f254:	8bba      	ldrh	r2, [r7, #28]
 800f256:	4293      	cmp	r3, r2
 800f258:	bf28      	it	cs
 800f25a:	4613      	movcs	r3, r2
 800f25c:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800f25e:	8a7b      	ldrh	r3, [r7, #18]
 800f260:	b2da      	uxtb	r2, r3
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	2110      	movs	r1, #16
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f000 ff24 	bl	80100b4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800f26c:	8a7b      	ldrh	r3, [r7, #18]
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	461a      	mov	r2, r3
 800f272:	2138      	movs	r1, #56	; 0x38
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7f3 f999 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	f043 0320 	orr.w	r3, r3, #32
 800f282:	b2db      	uxtb	r3, r3
 800f284:	461a      	mov	r2, r3
 800f286:	21f0      	movs	r1, #240	; 0xf0
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f7f3 f98f 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f28e:	21c8      	movs	r1, #200	; 0xc8
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f7f3 f9dd 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f296:	4603      	mov	r3, r0
 800f298:	b25b      	sxtb	r3, r3
 800f29a:	43db      	mvns	r3, r3
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	09db      	lsrs	r3, r3, #7
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d000      	beq.n	800f2a8 <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800f2a6:	e7f2      	b.n	800f28e <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800f2a8:	2280      	movs	r2, #128	; 0x80
 800f2aa:	21c8      	movs	r1, #200	; 0xc8
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7f3 f97d 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800f2b2:	21f8      	movs	r1, #248	; 0xf8
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f7f3 f9cb 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f003 030f 	and.w	r3, r3, #15
 800f2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800f2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00c      	beq.n	800f2e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f2cc:	f7f3 fc80 	bl	8002bd0 <HAL_GetTick>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	4a59      	ldr	r2, [pc, #356]	; (800f438 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800f2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d8:	099a      	lsrs	r2, r3, #6
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	da01      	bge.n	800f2e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 8081 	beq.w	800f3f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800f2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2f2:	2b0e      	cmp	r3, #14
 800f2f4:	d012      	beq.n	800f31c <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800f2f6:	2b0e      	cmp	r3, #14
 800f2f8:	f300 8085 	bgt.w	800f406 <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800f2fc:	2b04      	cmp	r3, #4
 800f2fe:	d002      	beq.n	800f306 <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800f300:	2b06      	cmp	r3, #6
 800f302:	d015      	beq.n	800f330 <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800f304:	e07f      	b.n	800f406 <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800f306:	8bfb      	ldrh	r3, [r7, #30]
 800f308:	3301      	adds	r3, #1
 800f30a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d032      	beq.n	800f378 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800f312:	8bfa      	ldrh	r2, [r7, #30]
 800f314:	88fb      	ldrh	r3, [r7, #6]
 800f316:	429a      	cmp	r2, r3
 800f318:	d12e      	bne.n	800f378 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800f31a:	e075      	b.n	800f408 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800f31c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f320:	3301      	adds	r3, #1
 800f322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800f326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d126      	bne.n	800f37c <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800f32e:	e06b      	b.n	800f408 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800f330:	21f8      	movs	r1, #248	; 0xf8
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7f3 f98c 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f338:	4603      	mov	r3, r0
 800f33a:	f003 0320 	and.w	r3, r3, #32
 800f33e:	2b00      	cmp	r3, #0
 800f340:	bf0c      	ite	eq
 800f342:	2301      	moveq	r3, #1
 800f344:	2300      	movne	r3, #0
 800f346:	b2db      	uxtb	r3, r3
 800f348:	f003 0301 	and.w	r3, r3, #1
 800f34c:	b2d9      	uxtb	r1, r3
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	7893      	ldrb	r3, [r2, #2]
 800f352:	f361 0300 	bfi	r3, r1, #0, #1
 800f356:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	789b      	ldrb	r3, [r3, #2]
 800f35c:	f003 0301 	and.w	r3, r3, #1
 800f360:	b2db      	uxtb	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800f366:	2380      	movs	r3, #128	; 0x80
 800f368:	e000      	b.n	800f36c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800f36a:	2340      	movs	r3, #64	; 0x40
 800f36c:	461a      	mov	r2, r3
 800f36e:	21e8      	movs	r1, #232	; 0xe8
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f7f3 f91b 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800f376:	e002      	b.n	800f37e <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800f378:	bf00      	nop
 800f37a:	e000      	b.n	800f37e <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800f37c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800f37e:	2200      	movs	r2, #0
 800f380:	2138      	movs	r1, #56	; 0x38
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7f3 f912 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800f388:	6a3b      	ldr	r3, [r7, #32]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	461a      	mov	r2, r3
 800f38e:	2110      	movs	r1, #16
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f7f3 f90b 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800f396:	8a7b      	ldrh	r3, [r7, #18]
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	461a      	mov	r2, r3
 800f39c:	2138      	movs	r1, #56	; 0x38
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f7f3 f904 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f043 0320 	orr.w	r3, r3, #32
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	21f0      	movs	r1, #240	; 0xf0
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7f3 f8fa 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f3b8:	21c8      	movs	r1, #200	; 0xc8
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	f7f3 f948 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	b25b      	sxtb	r3, r3
 800f3c4:	43db      	mvns	r3, r3
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	09db      	lsrs	r3, r3, #7
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d000      	beq.n	800f3d2 <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800f3d0:	e7f2      	b.n	800f3b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800f3d2:	2280      	movs	r2, #128	; 0x80
 800f3d4:	21c8      	movs	r1, #200	; 0xc8
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f7f3 f8e8 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800f3dc:	21f8      	movs	r1, #248	; 0xf8
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7f3 f936 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	f003 030f 	and.w	r3, r3, #15
 800f3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800f3ee:	e769      	b.n	800f2c4 <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800f3f0:	8bba      	ldrh	r2, [r7, #28]
 800f3f2:	8a7b      	ldrh	r3, [r7, #18]
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800f3f8:	8a7b      	ldrh	r3, [r7, #18]
 800f3fa:	6a3a      	ldr	r2, [r7, #32]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800f400:	e71d      	b.n	800f23e <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800f402:	bf00      	nop
 800f404:	e000      	b.n	800f408 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800f406:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800f408:	21f8      	movs	r1, #248	; 0xf8
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f7f3 f920 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f410:	4603      	mov	r3, r0
 800f412:	f003 0320 	and.w	r3, r3, #32
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800f41a:	2101      	movs	r1, #1
 800f41c:	e000      	b.n	800f420 <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800f41e:	2100      	movs	r1, #0
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	7893      	ldrb	r3, [r2, #2]
 800f424:	f361 0300 	bfi	r3, r1, #0, #1
 800f428:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800f42a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3728      	adds	r7, #40	; 0x28
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	10624dd3 	.word	0x10624dd3

0800f43c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	4608      	mov	r0, r1
 800f446:	4611      	mov	r1, r2
 800f448:	461a      	mov	r2, r3
 800f44a:	4603      	mov	r3, r0
 800f44c:	70fb      	strb	r3, [r7, #3]
 800f44e:	460b      	mov	r3, r1
 800f450:	70bb      	strb	r3, [r7, #2]
 800f452:	4613      	mov	r3, r2
 800f454:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800f456:	f7f3 fbbb 	bl	8002bd0 <HAL_GetTick>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4a38      	ldr	r2, [pc, #224]	; (800f540 <_ZN3USB11dispatchPktEhht+0x104>)
 800f45e:	fba2 2303 	umull	r2, r3, r2, r3
 800f462:	099b      	lsrs	r3, r3, #6
 800f464:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f468:	3308      	adds	r3, #8
 800f46a:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800f46c:	2300      	movs	r3, #0
 800f46e:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800f474:	2300      	movs	r3, #0
 800f476:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800f478:	f7f3 fbaa 	bl	8002bd0 <HAL_GetTick>
 800f47c:	4603      	mov	r3, r0
 800f47e:	4a30      	ldr	r2, [pc, #192]	; (800f540 <_ZN3USB11dispatchPktEhht+0x104>)
 800f480:	fba2 2303 	umull	r2, r3, r2, r3
 800f484:	099a      	lsrs	r2, r3, #6
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	0fdb      	lsrs	r3, r3, #31
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d050      	beq.n	800f534 <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800f492:	78fa      	ldrb	r2, [r7, #3]
 800f494:	78bb      	ldrb	r3, [r7, #2]
 800f496:	4313      	orrs	r3, r2
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	461a      	mov	r2, r3
 800f49c:	21f0      	movs	r1, #240	; 0xf0
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7f3 f884 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800f4a4:	23ff      	movs	r3, #255	; 0xff
 800f4a6:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800f4a8:	f7f3 fb92 	bl	8002bd0 <HAL_GetTick>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4a24      	ldr	r2, [pc, #144]	; (800f540 <_ZN3USB11dispatchPktEhht+0x104>)
 800f4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4b4:	099a      	lsrs	r2, r3, #6
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	0fdb      	lsrs	r3, r3, #31
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d010      	beq.n	800f4e4 <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800f4c2:	21c8      	movs	r1, #200	; 0xc8
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7f3 f8c3 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800f4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	dae8      	bge.n	800f4a8 <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800f4d6:	2280      	movs	r2, #128	; 0x80
 800f4d8:	21c8      	movs	r1, #200	; 0xc8
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7f3 f866 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800f4e4:	21f8      	movs	r1, #248	; 0xf8
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7f3 f8b2 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	f003 030f 	and.w	r3, r3, #15
 800f4f2:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	2b04      	cmp	r3, #4
 800f4f8:	d002      	beq.n	800f500 <_ZN3USB11dispatchPktEhht+0xc4>
 800f4fa:	2b0e      	cmp	r3, #14
 800f4fc:	d00c      	beq.n	800f518 <_ZN3USB11dispatchPktEhht+0xdc>
 800f4fe:	e013      	b.n	800f528 <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800f500:	8abb      	ldrh	r3, [r7, #20]
 800f502:	3301      	adds	r3, #1
 800f504:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800f506:	883b      	ldrh	r3, [r7, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00f      	beq.n	800f52c <_ZN3USB11dispatchPktEhht+0xf0>
 800f50c:	8aba      	ldrh	r2, [r7, #20]
 800f50e:	883b      	ldrh	r3, [r7, #0]
 800f510:	429a      	cmp	r2, r3
 800f512:	d10b      	bne.n	800f52c <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800f514:	7dfb      	ldrb	r3, [r7, #23]
 800f516:	e00e      	b.n	800f536 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800f518:	7dbb      	ldrb	r3, [r7, #22]
 800f51a:	3301      	adds	r3, #1
 800f51c:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800f51e:	7dbb      	ldrb	r3, [r7, #22]
 800f520:	2b03      	cmp	r3, #3
 800f522:	d105      	bne.n	800f530 <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800f524:	7dfb      	ldrb	r3, [r7, #23]
 800f526:	e006      	b.n	800f536 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	e004      	b.n	800f536 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800f52c:	bf00      	nop
 800f52e:	e7a3      	b.n	800f478 <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800f530:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800f532:	e7a1      	b.n	800f478 <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800f534:	7dfb      	ldrb	r3, [r7, #23]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	10624dd3 	.word	0x10624dd3

0800f544 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fe17 	bl	8010184 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 fe2c 	bl	80101b4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800f55c:	4603      	mov	r3, r0
 800f55e:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800f560:	7b3b      	ldrb	r3, [r7, #12]
 800f562:	2b03      	cmp	r3, #3
 800f564:	d832      	bhi.n	800f5cc <_ZN3USB4TaskEv+0x88>
 800f566:	a201      	add	r2, pc, #4	; (adr r2, 800f56c <_ZN3USB4TaskEv+0x28>)
 800f568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f56c:	0800f589 	.word	0x0800f589
 800f570:	0800f57d 	.word	0x0800f57d
 800f574:	0800f5a5 	.word	0x0800f5a5
 800f578:	0800f5a1 	.word	0x0800f5a1
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800f57c:	4bc7      	ldr	r3, [pc, #796]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f57e:	2213      	movs	r2, #19
 800f580:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800f582:	2300      	movs	r3, #0
 800f584:	73fb      	strb	r3, [r7, #15]
                        break;
 800f586:	e021      	b.n	800f5cc <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800f588:	4bc4      	ldr	r3, [pc, #784]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f590:	2b10      	cmp	r3, #16
 800f592:	d002      	beq.n	800f59a <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800f594:	4bc1      	ldr	r3, [pc, #772]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f596:	2211      	movs	r2, #17
 800f598:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800f59a:	2300      	movs	r3, #0
 800f59c:	73fb      	strb	r3, [r7, #15]
                        break;
 800f59e:	e015      	b.n	800f5cc <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800f5a4:	4bbd      	ldr	r3, [pc, #756]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5ac:	2b10      	cmp	r3, #16
 800f5ae:	d10c      	bne.n	800f5ca <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800f5b0:	f7f3 fb0e 	bl	8002bd0 <HAL_GetTick>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	4aba      	ldr	r2, [pc, #744]	; (800f8a0 <_ZN3USB4TaskEv+0x35c>)
 800f5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f5bc:	099b      	lsrs	r3, r3, #6
 800f5be:	33c8      	adds	r3, #200	; 0xc8
 800f5c0:	4ab8      	ldr	r2, [pc, #736]	; (800f8a4 <_ZN3USB4TaskEv+0x360>)
 800f5c2:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800f5c4:	4bb5      	ldr	r3, [pc, #724]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f5c6:	2220      	movs	r2, #32
 800f5c8:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800f5ca:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	73bb      	strb	r3, [r7, #14]
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
 800f5d2:	2b0f      	cmp	r3, #15
 800f5d4:	d81b      	bhi.n	800f60e <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800f5d6:	7bba      	ldrb	r2, [r7, #14]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	321e      	adds	r2, #30
 800f5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d010      	beq.n	800f606 <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800f5e4:	7bba      	ldrb	r2, [r7, #14]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	321e      	adds	r2, #30
 800f5ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5ee:	7bba      	ldrb	r2, [r7, #14]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	321e      	adds	r2, #30
 800f5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	330c      	adds	r3, #12
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4608      	mov	r0, r1
 800f600:	4798      	blx	r3
 800f602:	4603      	mov	r3, r0
 800f604:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f606:	7bbb      	ldrb	r3, [r7, #14]
 800f608:	3301      	adds	r3, #1
 800f60a:	73bb      	strb	r3, [r7, #14]
 800f60c:	e7e0      	b.n	800f5d0 <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800f60e:	4ba3      	ldr	r3, [pc, #652]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2ba0      	cmp	r3, #160	; 0xa0
 800f614:	f000 812f 	beq.w	800f876 <_ZN3USB4TaskEv+0x332>
 800f618:	2ba0      	cmp	r3, #160	; 0xa0
 800f61a:	f300 813b 	bgt.w	800f894 <_ZN3USB4TaskEv+0x350>
 800f61e:	2b90      	cmp	r3, #144	; 0x90
 800f620:	f000 812b 	beq.w	800f87a <_ZN3USB4TaskEv+0x336>
 800f624:	2b90      	cmp	r3, #144	; 0x90
 800f626:	f300 8135 	bgt.w	800f894 <_ZN3USB4TaskEv+0x350>
 800f62a:	2b80      	cmp	r3, #128	; 0x80
 800f62c:	f000 810a 	beq.w	800f844 <_ZN3USB4TaskEv+0x300>
 800f630:	2b80      	cmp	r3, #128	; 0x80
 800f632:	f300 812f 	bgt.w	800f894 <_ZN3USB4TaskEv+0x350>
 800f636:	2b51      	cmp	r3, #81	; 0x51
 800f638:	f000 80f2 	beq.w	800f820 <_ZN3USB4TaskEv+0x2dc>
 800f63c:	2b51      	cmp	r3, #81	; 0x51
 800f63e:	f300 8129 	bgt.w	800f894 <_ZN3USB4TaskEv+0x350>
 800f642:	2b40      	cmp	r3, #64	; 0x40
 800f644:	dc6a      	bgt.n	800f71c <_ZN3USB4TaskEv+0x1d8>
 800f646:	2b11      	cmp	r3, #17
 800f648:	f2c0 8124 	blt.w	800f894 <_ZN3USB4TaskEv+0x350>
 800f64c:	3b11      	subs	r3, #17
 800f64e:	2b2f      	cmp	r3, #47	; 0x2f
 800f650:	f200 8120 	bhi.w	800f894 <_ZN3USB4TaskEv+0x350>
 800f654:	a201      	add	r2, pc, #4	; (adr r2, 800f65c <_ZN3USB4TaskEv+0x118>)
 800f656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65a:	bf00      	nop
 800f65c:	0800f723 	.word	0x0800f723
 800f660:	0800f87f 	.word	0x0800f87f
 800f664:	0800f87f 	.word	0x0800f87f
 800f668:	0800f895 	.word	0x0800f895
 800f66c:	0800f895 	.word	0x0800f895
 800f670:	0800f895 	.word	0x0800f895
 800f674:	0800f895 	.word	0x0800f895
 800f678:	0800f895 	.word	0x0800f895
 800f67c:	0800f895 	.word	0x0800f895
 800f680:	0800f895 	.word	0x0800f895
 800f684:	0800f895 	.word	0x0800f895
 800f688:	0800f895 	.word	0x0800f895
 800f68c:	0800f895 	.word	0x0800f895
 800f690:	0800f895 	.word	0x0800f895
 800f694:	0800f895 	.word	0x0800f895
 800f698:	0800f773 	.word	0x0800f773
 800f69c:	0800f895 	.word	0x0800f895
 800f6a0:	0800f895 	.word	0x0800f895
 800f6a4:	0800f895 	.word	0x0800f895
 800f6a8:	0800f895 	.word	0x0800f895
 800f6ac:	0800f895 	.word	0x0800f895
 800f6b0:	0800f895 	.word	0x0800f895
 800f6b4:	0800f895 	.word	0x0800f895
 800f6b8:	0800f895 	.word	0x0800f895
 800f6bc:	0800f895 	.word	0x0800f895
 800f6c0:	0800f895 	.word	0x0800f895
 800f6c4:	0800f895 	.word	0x0800f895
 800f6c8:	0800f895 	.word	0x0800f895
 800f6cc:	0800f895 	.word	0x0800f895
 800f6d0:	0800f895 	.word	0x0800f895
 800f6d4:	0800f895 	.word	0x0800f895
 800f6d8:	0800f797 	.word	0x0800f797
 800f6dc:	0800f895 	.word	0x0800f895
 800f6e0:	0800f895 	.word	0x0800f895
 800f6e4:	0800f895 	.word	0x0800f895
 800f6e8:	0800f895 	.word	0x0800f895
 800f6ec:	0800f895 	.word	0x0800f895
 800f6f0:	0800f895 	.word	0x0800f895
 800f6f4:	0800f895 	.word	0x0800f895
 800f6f8:	0800f895 	.word	0x0800f895
 800f6fc:	0800f895 	.word	0x0800f895
 800f700:	0800f895 	.word	0x0800f895
 800f704:	0800f895 	.word	0x0800f895
 800f708:	0800f895 	.word	0x0800f895
 800f70c:	0800f895 	.word	0x0800f895
 800f710:	0800f895 	.word	0x0800f895
 800f714:	0800f895 	.word	0x0800f895
 800f718:	0800f7a9 	.word	0x0800f7a9
 800f71c:	2b50      	cmp	r3, #80	; 0x50
 800f71e:	d063      	beq.n	800f7e8 <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800f720:	e0b8      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        init();
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7ff fa6c 	bl	800ec00 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f728:	2300      	movs	r3, #0
 800f72a:	737b      	strb	r3, [r7, #13]
 800f72c:	7b7b      	ldrb	r3, [r7, #13]
 800f72e:	2b0f      	cmp	r3, #15
 800f730:	d81b      	bhi.n	800f76a <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800f732:	7b7a      	ldrb	r2, [r7, #13]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	321e      	adds	r2, #30
 800f738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d010      	beq.n	800f762 <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800f740:	7b7a      	ldrb	r2, [r7, #13]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	321e      	adds	r2, #30
 800f746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f74a:	7b7a      	ldrb	r2, [r7, #13]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	321e      	adds	r2, #30
 800f750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	3308      	adds	r3, #8
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4608      	mov	r0, r1
 800f75c:	4798      	blx	r3
 800f75e:	4603      	mov	r3, r0
 800f760:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f762:	7b7b      	ldrb	r3, [r7, #13]
 800f764:	3301      	adds	r3, #1
 800f766:	737b      	strb	r3, [r7, #13]
 800f768:	e7e0      	b.n	800f72c <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800f76a:	4b4c      	ldr	r3, [pc, #304]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f76c:	2212      	movs	r2, #18
 800f76e:	701a      	strb	r2, [r3, #0]
                        break;
 800f770:	e090      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800f772:	f7f3 fa2d 	bl	8002bd0 <HAL_GetTick>
 800f776:	4603      	mov	r3, r0
 800f778:	4a49      	ldr	r2, [pc, #292]	; (800f8a0 <_ZN3USB4TaskEv+0x35c>)
 800f77a:	fba2 2303 	umull	r2, r3, r2, r3
 800f77e:	099a      	lsrs	r2, r3, #6
 800f780:	4b48      	ldr	r3, [pc, #288]	; (800f8a4 <_ZN3USB4TaskEv+0x360>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	43db      	mvns	r3, r3
 800f788:	0fdb      	lsrs	r3, r3, #31
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d078      	beq.n	800f882 <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800f790:	4b42      	ldr	r3, [pc, #264]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f792:	2230      	movs	r2, #48	; 0x30
 800f794:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800f796:	2201      	movs	r2, #1
 800f798:	21e8      	movs	r1, #232	; 0xe8
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7f2 ff06 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800f7a0:	4b3e      	ldr	r3, [pc, #248]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f7a2:	2240      	movs	r2, #64	; 0x40
 800f7a4:	701a      	strb	r2, [r3, #0]
                        break;
 800f7a6:	e075      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800f7a8:	21e8      	movs	r1, #232	; 0xe8
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7f2 ff50 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	bf0c      	ite	eq
 800f7ba:	2301      	moveq	r3, #1
 800f7bc:	2300      	movne	r3, #0
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d060      	beq.n	800f886 <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800f7c4:	21d8      	movs	r1, #216	; 0xd8
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7f2 ff42 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f043 0308 	orr.w	r3, r3, #8
 800f7d2:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800f7d4:	7b3b      	ldrb	r3, [r7, #12]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	21d8      	movs	r1, #216	; 0xd8
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f7f2 fee6 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800f7e0:	4b2e      	ldr	r3, [pc, #184]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f7e2:	2250      	movs	r2, #80	; 0x50
 800f7e4:	701a      	strb	r2, [r3, #0]
                        break;
 800f7e6:	e04e      	b.n	800f886 <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800f7e8:	21c8      	movs	r1, #200	; 0xc8
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7f2 ff30 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	bf14      	ite	ne
 800f7fa:	2301      	movne	r3, #1
 800f7fc:	2300      	moveq	r3, #0
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b00      	cmp	r3, #0
 800f802:	d042      	beq.n	800f88a <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800f804:	4b25      	ldr	r3, [pc, #148]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f806:	2251      	movs	r2, #81	; 0x51
 800f808:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800f80a:	f7f3 f9e1 	bl	8002bd0 <HAL_GetTick>
 800f80e:	4603      	mov	r3, r0
 800f810:	4a23      	ldr	r2, [pc, #140]	; (800f8a0 <_ZN3USB4TaskEv+0x35c>)
 800f812:	fba2 2303 	umull	r2, r3, r2, r3
 800f816:	099b      	lsrs	r3, r3, #6
 800f818:	3314      	adds	r3, #20
 800f81a:	4a22      	ldr	r2, [pc, #136]	; (800f8a4 <_ZN3USB4TaskEv+0x360>)
 800f81c:	6013      	str	r3, [r2, #0]
                        break;
 800f81e:	e034      	b.n	800f88a <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800f820:	f7f3 f9d6 	bl	8002bd0 <HAL_GetTick>
 800f824:	4603      	mov	r3, r0
 800f826:	4a1e      	ldr	r2, [pc, #120]	; (800f8a0 <_ZN3USB4TaskEv+0x35c>)
 800f828:	fba2 2303 	umull	r2, r3, r2, r3
 800f82c:	099a      	lsrs	r2, r3, #6
 800f82e:	4b1d      	ldr	r3, [pc, #116]	; (800f8a4 <_ZN3USB4TaskEv+0x360>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	43db      	mvns	r3, r3
 800f836:	0fdb      	lsrs	r3, r3, #31
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d027      	beq.n	800f88e <_ZN3USB4TaskEv+0x34a>
 800f83e:	4b17      	ldr	r3, [pc, #92]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f840:	2280      	movs	r2, #128	; 0x80
 800f842:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800f844:	7bfb      	ldrb	r3, [r7, #15]
 800f846:	2200      	movs	r2, #0
 800f848:	2100      	movs	r1, #0
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 f928 	bl	800faa0 <_ZN3USB11ConfiguringEhhb>
 800f850:	4603      	mov	r3, r0
 800f852:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800f854:	7afb      	ldrb	r3, [r7, #11]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d009      	beq.n	800f86e <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800f85a:	7afb      	ldrb	r3, [r7, #11]
 800f85c:	2bd2      	cmp	r3, #210	; 0xd2
 800f85e:	d018      	beq.n	800f892 <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800f860:	4a11      	ldr	r2, [pc, #68]	; (800f8a8 <_ZN3USB4TaskEv+0x364>)
 800f862:	7afb      	ldrb	r3, [r7, #11]
 800f864:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800f866:	4b0d      	ldr	r3, [pc, #52]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f868:	22a0      	movs	r2, #160	; 0xa0
 800f86a:	701a      	strb	r2, [r3, #0]
                        break;
 800f86c:	e011      	b.n	800f892 <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800f86e:	4b0b      	ldr	r3, [pc, #44]	; (800f89c <_ZN3USB4TaskEv+0x358>)
 800f870:	2290      	movs	r2, #144	; 0x90
 800f872:	701a      	strb	r2, [r3, #0]
                        break;
 800f874:	e00d      	b.n	800f892 <_ZN3USB4TaskEv+0x34e>
                        break;
 800f876:	bf00      	nop
 800f878:	e00c      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        break;
 800f87a:	bf00      	nop
 800f87c:	e00a      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        break;
 800f87e:	bf00      	nop
 800f880:	e008      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800f882:	bf00      	nop
 800f884:	e006      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        break;
 800f886:	bf00      	nop
 800f888:	e004      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        break;
 800f88a:	bf00      	nop
 800f88c:	e002      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800f88e:	bf00      	nop
 800f890:	e000      	b.n	800f894 <_ZN3USB4TaskEv+0x350>
                        break;
 800f892:	bf00      	nop
}
 800f894:	bf00      	nop
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	2000066d 	.word	0x2000066d
 800f8a0:	10624dd3 	.word	0x10624dd3
 800f8a4:	20000670 	.word	0x20000670
 800f8a8:	2000066c 	.word	0x2000066c

0800f8ac <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	4608      	mov	r0, r1
 800f8b6:	4611      	mov	r1, r2
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	70fb      	strb	r3, [r7, #3]
 800f8be:	460b      	mov	r3, r1
 800f8c0:	70bb      	strb	r3, [r7, #2]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 fbc8 	bl	8010068 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800f8d8:	6178      	str	r0, [r7, #20]

        if(!p0)
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800f8e0:	23d6      	movs	r3, #214	; 0xd6
 800f8e2:	e03a      	b.n	800f95a <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800f8ec:	23d7      	movs	r3, #215	; 0xd7
 800f8ee:	e034      	b.n	800f95a <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	787a      	ldrb	r2, [r7, #1]
 800f8f4:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	78bb      	ldrb	r3, [r7, #2]
 800f8fa:	78f9      	ldrb	r1, [r7, #3]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f000 fc67 	bl	80101d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800f902:	4603      	mov	r3, r0
 800f904:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800f906:	7bfb      	ldrb	r3, [r7, #15]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800f90c:	23d4      	movs	r3, #212	; 0xd4
 800f90e:	e024      	b.n	800f95a <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	7bfa      	ldrb	r2, [r7, #15]
 800f914:	4611      	mov	r1, r2
 800f916:	4618      	mov	r0, r3
 800f918:	f000 fba6 	bl	8010068 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800f91c:	6138      	str	r0, [r7, #16]

        if(!p)
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d101      	bne.n	800f928 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800f924:	23d6      	movs	r3, #214	; 0xd6
 800f926:	e018      	b.n	800f95a <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	787a      	ldrb	r2, [r7, #1]
 800f92c:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
 800f930:	2200      	movs	r2, #0
 800f932:	2100      	movs	r1, #0
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 fae9 	bl	800ff0c <_ZN3USB7setAddrEhhh>
 800f93a:	4603      	mov	r3, r0
 800f93c:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800f93e:	7bbb      	ldrb	r3, [r7, #14]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d009      	beq.n	800f958 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	7bfa      	ldrb	r2, [r7, #15]
 800f948:	4611      	mov	r1, r2
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 fcd8 	bl	8010300 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800f954:	7bbb      	ldrb	r3, [r7, #14]
 800f956:	e000      	b.n	800f95a <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800f958:	2300      	movs	r3, #0
};
 800f95a:	4618      	mov	r0, r3
 800f95c:	3718      	adds	r7, #24
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800f964:	b590      	push	{r4, r7, lr}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	4608      	mov	r0, r1
 800f96e:	4611      	mov	r1, r2
 800f970:	461a      	mov	r2, r3
 800f972:	4603      	mov	r3, r0
 800f974:	70fb      	strb	r3, [r7, #3]
 800f976:	460b      	mov	r3, r1
 800f978:	70bb      	strb	r3, [r7, #2]
 800f97a:	4613      	mov	r3, r2
 800f97c:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800f97e:	2300      	movs	r3, #0
 800f980:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800f982:	78fa      	ldrb	r2, [r7, #3]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	321e      	adds	r2, #30
 800f988:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f98c:	78fa      	ldrb	r2, [r7, #3]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	321e      	adds	r2, #30
 800f992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3304      	adds	r3, #4
 800f99a:	681c      	ldr	r4, [r3, #0]
 800f99c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f9a0:	787a      	ldrb	r2, [r7, #1]
 800f9a2:	78b9      	ldrb	r1, [r7, #2]
 800f9a4:	47a0      	blx	r4
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800f9aa:	7bbb      	ldrb	r3, [r7, #14]
 800f9ac:	2be0      	cmp	r3, #224	; 0xe0
 800f9ae:	d11c      	bne.n	800f9ea <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800f9b0:	78bb      	ldrb	r3, [r7, #2]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d108      	bne.n	800f9c8 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	21e8      	movs	r1, #232	; 0xe8
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7f2 fdf6 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800f9c0:	4835      	ldr	r0, [pc, #212]	; (800fa98 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800f9c2:	f7f3 f911 	bl	8002be8 <HAL_Delay>
 800f9c6:	e022      	b.n	800fa0e <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800f9c8:	78ba      	ldrb	r2, [r7, #2]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	321e      	adds	r2, #30
 800f9ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f9d2:	78ba      	ldrb	r2, [r7, #2]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	321e      	adds	r2, #30
 800f9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3314      	adds	r3, #20
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	787a      	ldrb	r2, [r7, #1]
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4798      	blx	r3
 800f9e8:	e011      	b.n	800fa0e <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800f9ea:	7bbb      	ldrb	r3, [r7, #14]
 800f9ec:	2b0d      	cmp	r3, #13
 800f9ee:	d109      	bne.n	800fa04 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800f9f0:	7bfb      	ldrb	r3, [r7, #15]
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	d806      	bhi.n	800fa04 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800f9f6:	4829      	ldr	r0, [pc, #164]	; (800fa9c <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800f9f8:	f7f3 f8f6 	bl	8002be8 <HAL_Delay>
                retries++;
 800f9fc:	7bfb      	ldrb	r3, [r7, #15]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	73fb      	strb	r3, [r7, #15]
                goto again;
 800fa02:	e7be      	b.n	800f982 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800fa04:	7bbb      	ldrb	r3, [r7, #14]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800fa0a:	7bbb      	ldrb	r3, [r7, #14]
 800fa0c:	e03f      	b.n	800fa8e <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800fa0e:	78fa      	ldrb	r2, [r7, #3]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	321e      	adds	r2, #30
 800fa14:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fa18:	78fa      	ldrb	r2, [r7, #3]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	321e      	adds	r2, #30
 800fa1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	681c      	ldr	r4, [r3, #0]
 800fa26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fa2a:	787a      	ldrb	r2, [r7, #1]
 800fa2c:	78b9      	ldrb	r1, [r7, #2]
 800fa2e:	47a0      	blx	r4
 800fa30:	4603      	mov	r3, r0
 800fa32:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800fa34:	7bbb      	ldrb	r3, [r7, #14]
 800fa36:	2b0d      	cmp	r3, #13
 800fa38:	d109      	bne.n	800fa4e <_ZN3USB13AttemptConfigEhhhb+0xea>
 800fa3a:	7bfb      	ldrb	r3, [r7, #15]
 800fa3c:	2b02      	cmp	r3, #2
 800fa3e:	d806      	bhi.n	800fa4e <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800fa40:	4816      	ldr	r0, [pc, #88]	; (800fa9c <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800fa42:	f7f3 f8d1 	bl	8002be8 <HAL_Delay>
                retries++;
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	73fb      	strb	r3, [r7, #15]
                goto again;
 800fa4c:	e799      	b.n	800f982 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800fa4e:	7bbb      	ldrb	r3, [r7, #14]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d01b      	beq.n	800fa8c <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800fa54:	78bb      	ldrb	r3, [r7, #2]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d108      	bne.n	800fa6c <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	21e8      	movs	r1, #232	; 0xe8
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7f2 fda4 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800fa64:	480c      	ldr	r0, [pc, #48]	; (800fa98 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800fa66:	f7f3 f8bf 	bl	8002be8 <HAL_Delay>
 800fa6a:	e00f      	b.n	800fa8c <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800fa6c:	78ba      	ldrb	r2, [r7, #2]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	321e      	adds	r2, #30
 800fa72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fa76:	78ba      	ldrb	r2, [r7, #2]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	321e      	adds	r2, #30
 800fa7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3314      	adds	r3, #20
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	787a      	ldrb	r2, [r7, #1]
 800fa88:	4611      	mov	r1, r2
 800fa8a:	4798      	blx	r3
                }
        }
        return rcode;
 800fa8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd90      	pop	{r4, r7, pc}
 800fa96:	bf00      	nop
 800fa98:	00018e70 	.word	0x00018e70
 800fa9c:	000186a0 	.word	0x000186a0

0800faa0 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b090      	sub	sp, #64	; 0x40
 800faa4:	af02      	add	r7, sp, #8
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	4608      	mov	r0, r1
 800faaa:	4611      	mov	r1, r2
 800faac:	461a      	mov	r2, r3
 800faae:	4603      	mov	r3, r0
 800fab0:	70fb      	strb	r3, [r7, #3]
 800fab2:	460b      	mov	r3, r1
 800fab4:	70bb      	strb	r3, [r7, #2]
 800fab6:	4613      	mov	r3, r2
 800fab8:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800faba:	2300      	movs	r3, #0
 800fabc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800fac0:	f107 030c 	add.w	r3, r7, #12
 800fac4:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800faca:	2300      	movs	r3, #0
 800facc:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800fad2:	2308      	movs	r3, #8
 800fad4:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800fad6:	7abb      	ldrb	r3, [r7, #10]
 800fad8:	f36f 0300 	bfc	r3, #0, #1
 800fadc:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800fade:	7abb      	ldrb	r3, [r7, #10]
 800fae0:	f36f 0341 	bfc	r3, #1, #1
 800fae4:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800fae6:	7abb      	ldrb	r3, [r7, #10]
 800fae8:	220f      	movs	r2, #15
 800faea:	f362 0387 	bfi	r3, r2, #2, #6
 800faee:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7fa fce3 	bl	800a4bc <_ZN3USB14GetAddressPoolEv>
 800faf6:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2100      	movs	r1, #0
 800fb00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb02:	4798      	blx	r3
 800fb04:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d101      	bne.n	800fb10 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800fb0c:	23d6      	movs	r3, #214	; 0xd6
 800fb0e:	e15c      	b.n	800fdca <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800fb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb18:	f107 0208 	add.w	r2, r7, #8
 800fb1c:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800fb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb20:	787a      	ldrb	r2, [r7, #1]
 800fb22:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800fb24:	f107 030c 	add.w	r3, r7, #12
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	2312      	movs	r3, #18
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	2100      	movs	r1, #0
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 f94e 	bl	800fdd2 <_ZN3USB11getDevDescrEhhtPh>
 800fb36:	4603      	mov	r3, r0
 800fb38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800fb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb40:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800fb42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d002      	beq.n	800fb50 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800fb4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb4e:	e13c      	b.n	800fdca <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800fb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb52:	7a1a      	ldrb	r2, [r3, #8]
 800fb54:	7a5b      	ldrb	r3, [r3, #9]
 800fb56:	021b      	lsls	r3, r3, #8
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5e:	7a9a      	ldrb	r2, [r3, #10]
 800fb60:	7adb      	ldrb	r3, [r3, #11]
 800fb62:	021b      	lsls	r3, r3, #8
 800fb64:	4313      	orrs	r3, r2
 800fb66:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800fb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6a:	791b      	ldrb	r3, [r3, #4]
 800fb6c:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800fb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb70:	795b      	ldrb	r3, [r3, #5]
 800fb72:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800fb74:	2300      	movs	r3, #0
 800fb76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb7e:	2b0f      	cmp	r3, #15
 800fb80:	f200 8081 	bhi.w	800fc86 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800fb84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	321e      	adds	r2, #30
 800fb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d06e      	beq.n	800fc72 <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800fb94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	321e      	adds	r2, #30
 800fb9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fba0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	321e      	adds	r2, #30
 800fba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3310      	adds	r3, #16
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4608      	mov	r0, r1
 800fbb4:	4798      	blx	r3
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	bf14      	ite	ne
 800fbbc:	2301      	movne	r3, #1
 800fbbe:	2300      	moveq	r3, #0
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d157      	bne.n	800fc76 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800fbc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	321e      	adds	r2, #30
 800fbce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fbd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	321e      	adds	r2, #30
 800fbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3320      	adds	r3, #32
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	7fba      	ldrb	r2, [r7, #30]
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	4798      	blx	r3
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d02b      	beq.n	800fc48 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800fbf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	321e      	adds	r2, #30
 800fbf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fbfc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	321e      	adds	r2, #30
 800fc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	3318      	adds	r3, #24
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	8c3a      	ldrh	r2, [r7, #32]
 800fc10:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800fc12:	4798      	blx	r3
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d114      	bne.n	800fc44 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800fc1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	321e      	adds	r2, #30
 800fc22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fc26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	321e      	adds	r2, #30
 800fc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	331c      	adds	r3, #28
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	7ffa      	ldrb	r2, [r7, #31]
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	4798      	blx	r3
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800fc44:	2301      	movs	r3, #1
 800fc46:	e000      	b.n	800fc4a <_ZN3USB11ConfiguringEhhb+0x1aa>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d014      	beq.n	800fc78 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800fc4e:	78b8      	ldrb	r0, [r7, #2]
 800fc50:	78fa      	ldrb	r2, [r7, #3]
 800fc52:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fc56:	787b      	ldrb	r3, [r7, #1]
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f7ff fe81 	bl	800f964 <_ZN3USB13AttemptConfigEhhhb>
 800fc62:	4603      	mov	r3, r0
 800fc64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800fc68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fc6c:	2bd1      	cmp	r3, #209	; 0xd1
 800fc6e:	d109      	bne.n	800fc84 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800fc70:	e002      	b.n	800fc78 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800fc72:	bf00      	nop
 800fc74:	e000      	b.n	800fc78 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800fc76:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800fc78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fc82:	e77a      	b.n	800fb7a <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800fc84:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800fc86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc8a:	2b0f      	cmp	r3, #15
 800fc8c:	d802      	bhi.n	800fc94 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800fc8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fc92:	e09a      	b.n	800fdca <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800fc94:	2300      	movs	r3, #0
 800fc96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fc9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc9e:	2b0f      	cmp	r3, #15
 800fca0:	f200 8088 	bhi.w	800fdb4 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800fca4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	321e      	adds	r2, #30
 800fcac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d074      	beq.n	800fd9e <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800fcb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	321e      	adds	r2, #30
 800fcbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	321e      	adds	r2, #30
 800fcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3310      	adds	r3, #16
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4608      	mov	r0, r1
 800fcd4:	4798      	blx	r3
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	bf14      	ite	ne
 800fcdc:	2301      	movne	r3, #1
 800fcde:	2300      	moveq	r3, #0
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d15d      	bne.n	800fda2 <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800fce6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	321e      	adds	r2, #30
 800fcee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fcf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	321e      	adds	r2, #30
 800fcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3320      	adds	r3, #32
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	7fba      	ldrb	r2, [r7, #30]
 800fd06:	4611      	mov	r1, r2
 800fd08:	4798      	blx	r3
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d02b      	beq.n	800fd68 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800fd10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	321e      	adds	r2, #30
 800fd18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fd1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	321e      	adds	r2, #30
 800fd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3318      	adds	r3, #24
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	8c3a      	ldrh	r2, [r7, #32]
 800fd30:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800fd32:	4798      	blx	r3
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d114      	bne.n	800fd64 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800fd3a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	321e      	adds	r2, #30
 800fd42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fd46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	321e      	adds	r2, #30
 800fd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	331c      	adds	r3, #28
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	7ffa      	ldrb	r2, [r7, #31]
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4798      	blx	r3
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d001      	beq.n	800fd68 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800fd64:	2301      	movs	r3, #1
 800fd66:	e000      	b.n	800fd6a <_ZN3USB11ConfiguringEhhb+0x2ca>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d11b      	bne.n	800fda6 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800fd6e:	78b8      	ldrb	r0, [r7, #2]
 800fd70:	78fa      	ldrb	r2, [r7, #3]
 800fd72:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fd76:	787b      	ldrb	r3, [r7, #1]
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff fdf1 	bl	800f964 <_ZN3USB13AttemptConfigEhhhb>
 800fd82:	4603      	mov	r3, r0
 800fd84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800fd88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd8c:	2bd1      	cmp	r3, #209	; 0xd1
 800fd8e:	d00b      	beq.n	800fda8 <_ZN3USB11ConfiguringEhhb+0x308>
 800fd90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd94:	2bd9      	cmp	r3, #217	; 0xd9
 800fd96:	d007      	beq.n	800fda8 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800fd98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd9c:	e015      	b.n	800fdca <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800fd9e:	bf00      	nop
 800fda0:	e002      	b.n	800fda8 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800fda2:	bf00      	nop
 800fda4:	e000      	b.n	800fda8 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800fda6:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800fda8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdac:	3301      	adds	r3, #1
 800fdae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdb2:	e772      	b.n	800fc9a <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800fdb4:	787b      	ldrb	r3, [r7, #1]
 800fdb6:	78ba      	ldrb	r2, [r7, #2]
 800fdb8:	78f9      	ldrb	r1, [r7, #3]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7ff fd76 	bl	800f8ac <_ZN3USB17DefaultAddressingEhhb>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800fdc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3738      	adds	r7, #56	; 0x38
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b08a      	sub	sp, #40	; 0x28
 800fdd6:	af08      	add	r7, sp, #32
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	4608      	mov	r0, r1
 800fddc:	4611      	mov	r1, r2
 800fdde:	461a      	mov	r2, r3
 800fde0:	4603      	mov	r3, r0
 800fde2:	70fb      	strb	r3, [r7, #3]
 800fde4:	460b      	mov	r3, r1
 800fde6:	70bb      	strb	r3, [r7, #2]
 800fde8:	4613      	mov	r3, r2
 800fdea:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800fdec:	78ba      	ldrb	r2, [r7, #2]
 800fdee:	78f9      	ldrb	r1, [r7, #3]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	9307      	str	r3, [sp, #28]
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	9306      	str	r3, [sp, #24]
 800fdf8:	883b      	ldrh	r3, [r7, #0]
 800fdfa:	9305      	str	r3, [sp, #20]
 800fdfc:	883b      	ldrh	r3, [r7, #0]
 800fdfe:	9304      	str	r3, [sp, #16]
 800fe00:	2300      	movs	r3, #0
 800fe02:	9303      	str	r3, [sp, #12]
 800fe04:	2301      	movs	r3, #1
 800fe06:	9302      	str	r3, [sp, #8]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9301      	str	r3, [sp, #4]
 800fe0c:	2306      	movs	r3, #6
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	2380      	movs	r3, #128	; 0x80
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7fe ffc7 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800fe18:	4603      	mov	r3, r0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b08a      	sub	sp, #40	; 0x28
 800fe26:	af08      	add	r7, sp, #32
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	4608      	mov	r0, r1
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	461a      	mov	r2, r3
 800fe30:	4603      	mov	r3, r0
 800fe32:	70fb      	strb	r3, [r7, #3]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70bb      	strb	r3, [r7, #2]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800fe3c:	78ba      	ldrb	r2, [r7, #2]
 800fe3e:	78f9      	ldrb	r1, [r7, #3]
 800fe40:	2300      	movs	r3, #0
 800fe42:	9307      	str	r3, [sp, #28]
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	9306      	str	r3, [sp, #24]
 800fe48:	883b      	ldrh	r3, [r7, #0]
 800fe4a:	9305      	str	r3, [sp, #20]
 800fe4c:	883b      	ldrh	r3, [r7, #0]
 800fe4e:	9304      	str	r3, [sp, #16]
 800fe50:	2300      	movs	r3, #0
 800fe52:	9303      	str	r3, [sp, #12]
 800fe54:	2302      	movs	r3, #2
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	7c3b      	ldrb	r3, [r7, #16]
 800fe5a:	9301      	str	r3, [sp, #4]
 800fe5c:	2306      	movs	r3, #6
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	2380      	movs	r3, #128	; 0x80
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7fe ff9f 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800fe68:	4603      	mov	r3, r0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b09e      	sub	sp, #120	; 0x78
 800fe76:	af08      	add	r7, sp, #32
 800fe78:	6078      	str	r0, [r7, #4]
 800fe7a:	4608      	mov	r0, r1
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	461a      	mov	r2, r3
 800fe80:	4603      	mov	r3, r0
 800fe82:	70fb      	strb	r3, [r7, #3]
 800fe84:	460b      	mov	r3, r1
 800fe86:	70bb      	strb	r3, [r7, #2]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800fe8c:	2340      	movs	r3, #64	; 0x40
 800fe8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800fe92:	f107 030c 	add.w	r3, r7, #12
 800fe96:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800fe98:	78ba      	ldrb	r2, [r7, #2]
 800fe9a:	78f9      	ldrb	r1, [r7, #3]
 800fe9c:	f107 030c 	add.w	r3, r7, #12
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	787b      	ldrb	r3, [r7, #1]
 800fea4:	9300      	str	r3, [sp, #0]
 800fea6:	2309      	movs	r3, #9
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff ffba 	bl	800fe22 <_ZN3USB12getConfDescrEhhthPh>
 800feae:	4603      	mov	r3, r0
 800feb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800feb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800febc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fec0:	e020      	b.n	800ff04 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800fec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec4:	789a      	ldrb	r2, [r3, #2]
 800fec6:	78db      	ldrb	r3, [r3, #3]
 800fec8:	021b      	lsls	r3, r3, #8
 800feca:	4313      	orrs	r3, r2
 800fecc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800fed0:	78ba      	ldrb	r2, [r7, #2]
 800fed2:	78f9      	ldrb	r1, [r7, #3]
 800fed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fed6:	9307      	str	r3, [sp, #28]
 800fed8:	f107 030c 	add.w	r3, r7, #12
 800fedc:	9306      	str	r3, [sp, #24]
 800fede:	2340      	movs	r3, #64	; 0x40
 800fee0:	9305      	str	r3, [sp, #20]
 800fee2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800fee6:	9304      	str	r3, [sp, #16]
 800fee8:	2300      	movs	r3, #0
 800feea:	9303      	str	r3, [sp, #12]
 800feec:	2302      	movs	r3, #2
 800feee:	9302      	str	r3, [sp, #8]
 800fef0:	787b      	ldrb	r3, [r7, #1]
 800fef2:	9301      	str	r3, [sp, #4]
 800fef4:	2306      	movs	r3, #6
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	2380      	movs	r3, #128	; 0x80
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f7fe ff53 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ff00:	4603      	mov	r3, r0
 800ff02:	bf00      	nop
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3758      	adds	r7, #88	; 0x58
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b08c      	sub	sp, #48	; 0x30
 800ff10:	af08      	add	r7, sp, #32
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	4608      	mov	r0, r1
 800ff16:	4611      	mov	r1, r2
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	70fb      	strb	r3, [r7, #3]
 800ff1e:	460b      	mov	r3, r1
 800ff20:	70bb      	strb	r3, [r7, #2]
 800ff22:	4613      	mov	r3, r2
 800ff24:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800ff26:	78ba      	ldrb	r2, [r7, #2]
 800ff28:	78f9      	ldrb	r1, [r7, #3]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	9307      	str	r3, [sp, #28]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	9306      	str	r3, [sp, #24]
 800ff32:	2300      	movs	r3, #0
 800ff34:	9305      	str	r3, [sp, #20]
 800ff36:	2300      	movs	r3, #0
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	9303      	str	r3, [sp, #12]
 800ff3e:	2300      	movs	r3, #0
 800ff40:	9302      	str	r3, [sp, #8]
 800ff42:	787b      	ldrb	r3, [r7, #1]
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	2305      	movs	r3, #5
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7fe ff2a 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ff52:	4603      	mov	r3, r0
 800ff54:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800ff56:	4804      	ldr	r0, [pc, #16]	; (800ff68 <_ZN3USB7setAddrEhhh+0x5c>)
 800ff58:	f7f2 fe46 	bl	8002be8 <HAL_Delay>
        return rcode;
 800ff5c:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	000493e0 	.word	0x000493e0

0800ff6c <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	; 0x28
 800ff70:	af08      	add	r7, sp, #32
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	4608      	mov	r0, r1
 800ff76:	4611      	mov	r1, r2
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	70fb      	strb	r3, [r7, #3]
 800ff7e:	460b      	mov	r3, r1
 800ff80:	70bb      	strb	r3, [r7, #2]
 800ff82:	4613      	mov	r3, r2
 800ff84:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800ff86:	78ba      	ldrb	r2, [r7, #2]
 800ff88:	78f9      	ldrb	r1, [r7, #3]
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	9307      	str	r3, [sp, #28]
 800ff8e:	2300      	movs	r3, #0
 800ff90:	9306      	str	r3, [sp, #24]
 800ff92:	2300      	movs	r3, #0
 800ff94:	9305      	str	r3, [sp, #20]
 800ff96:	2300      	movs	r3, #0
 800ff98:	9304      	str	r3, [sp, #16]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9303      	str	r3, [sp, #12]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	9302      	str	r3, [sp, #8]
 800ffa2:	787b      	ldrb	r3, [r7, #1]
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	2309      	movs	r3, #9
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7fe fefa 	bl	800eda6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ffb2:	4603      	mov	r3, r0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
};
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	370c      	adds	r7, #12
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
	...

0800ffd4 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	4a04      	ldr	r2, [pc, #16]	; (800fff0 <_ZN11AddressPoolC1Ev+0x1c>)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr
 800fff0:	08010e28 	.word	0x08010e28

0800fff4 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4618      	mov	r0, r3
 8010000:	f7ff ffe8 	bl	800ffd4 <_ZN11AddressPoolC1Ev>
 8010004:	4a17      	ldr	r2, [pc, #92]	; (8010064 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	601a      	str	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8010010:	2100      	movs	r1, #0
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f990 	bl	8010338 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	1d1a      	adds	r2, r3, #4
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2208      	movs	r2, #8
 8010030:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	7993      	ldrb	r3, [r2, #6]
 8010036:	f36f 0300 	bfc	r3, #0, #1
 801003a:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	7993      	ldrb	r3, [r2, #6]
 8010040:	f36f 0341 	bfc	r3, #1, #1
 8010044:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	7993      	ldrb	r3, [r2, #6]
 801004a:	210f      	movs	r1, #15
 801004c:	f361 0387 	bfi	r3, r1, #2, #6
 8010050:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f9a1 	bl	801039a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4618      	mov	r0, r3
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	08010e14 	.word	0x08010e14

08010068 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	460b      	mov	r3, r1
 8010072:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8010074:	78fb      	ldrb	r3, [r7, #3]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d102      	bne.n	8010080 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	3308      	adds	r3, #8
 801007e:	e014      	b.n	80100aa <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8010080:	78fb      	ldrb	r3, [r7, #3]
 8010082:	4619      	mov	r1, r3
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f9a1 	bl	80103cc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801008a:	4603      	mov	r3, r0
 801008c:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 801008e:	7bfb      	ldrb	r3, [r7, #15]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d008      	beq.n	80100a6 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f103 0108 	add.w	r1, r3, #8
 801009a:	7bfa      	ldrb	r2, [r7, #15]
 801009c:	4613      	mov	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	1a9b      	subs	r3, r3, r2
 80100a2:	440b      	add	r3, r1
 80100a4:	e000      	b.n	80100a8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 80100a6:	2300      	movs	r3, #0
 80100a8:	bf00      	nop
        };
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
	...

080100b4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b086      	sub	sp, #24
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	607b      	str	r3, [r7, #4]
 80100be:	460b      	mov	r3, r1
 80100c0:	72fb      	strb	r3, [r7, #11]
 80100c2:	4613      	mov	r3, r2
 80100c4:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 80100c6:	f7f1 fa73 	bl	80015b0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 80100ca:	7afb      	ldrb	r3, [r7, #11]
 80100cc:	f043 0302 	orr.w	r3, r3, #2
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 80100d4:	f107 0117 	add.w	r1, r7, #23
 80100d8:	f04f 33ff 	mov.w	r3, #4294967295
 80100dc:	2201      	movs	r2, #1
 80100de:	480b      	ldr	r0, [pc, #44]	; (801010c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80100e0:	f7f5 fddf 	bl	8005ca2 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80100e4:	7abb      	ldrb	r3, [r7, #10]
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4807      	ldr	r0, [pc, #28]	; (801010c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80100f0:	f7f5 fdd7 	bl	8005ca2 <HAL_SPI_Transmit>
        data_p += nbytes;
 80100f4:	7abb      	ldrb	r3, [r7, #10]
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	4413      	add	r3, r2
 80100fa:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80100fc:	f7f1 fa4c 	bl	8001598 <_ZN3P103SetEv>
        return ( data_p);
 8010100:	687b      	ldr	r3, [r7, #4]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3718      	adds	r7, #24
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	20000304 	.word	0x20000304

08010110 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	4603      	mov	r3, r0
 8010118:	6039      	str	r1, [r7, #0]
 801011a:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 801011c:	bf00      	nop
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	607b      	str	r3, [r7, #4]
 8010132:	460b      	mov	r3, r1
 8010134:	72fb      	strb	r3, [r7, #11]
 8010136:	4613      	mov	r3, r2
 8010138:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 801013a:	f7f1 fa39 	bl	80015b0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 801013e:	f107 010b 	add.w	r1, r7, #11
 8010142:	f04f 33ff 	mov.w	r3, #4294967295
 8010146:	2201      	movs	r2, #1
 8010148:	480d      	ldr	r0, [pc, #52]	; (8010180 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801014a:	f7f5 fdaa 	bl	8005ca2 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 801014e:	7abb      	ldrb	r3, [r7, #10]
 8010150:	461a      	mov	r2, r3
 8010152:	2100      	movs	r1, #0
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fc0f 	bl	8010978 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 801015a:	7abb      	ldrb	r3, [r7, #10]
 801015c:	b29a      	uxth	r2, r3
 801015e:	f04f 33ff 	mov.w	r3, #4294967295
 8010162:	6879      	ldr	r1, [r7, #4]
 8010164:	4806      	ldr	r0, [pc, #24]	; (8010180 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8010166:	f7f5 fed8 	bl	8005f1a <HAL_SPI_Receive>
        data_p += nbytes;
 801016a:	7abb      	ldrb	r3, [r7, #10]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	4413      	add	r3, r2
 8010170:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8010172:	f7f1 fa11 	bl	8001598 <_ZN3P103SetEv>
        return ( data_p);
 8010176:	687b      	ldr	r3, [r7, #4]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	20000304 	.word	0x20000304

08010184 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8010190:	f7fe fd0e 	bl	800ebb0 <_ZN2P95IsSetEv>
 8010194:	4603      	mov	r3, r0
 8010196:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8010198:	7bbb      	ldrb	r3, [r7, #14]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d104      	bne.n	80101a8 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 f937 	bl	8010412 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
                return vbusState;
 80101bc:	4b03      	ldr	r3, [pc, #12]	; (80101cc <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 80101be:	781b      	ldrb	r3, [r3, #0]
        };
 80101c0:	4618      	mov	r0, r3
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr
 80101cc:	20000655 	.word	0x20000655

080101d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	4608      	mov	r0, r1
 80101da:	4611      	mov	r1, r2
 80101dc:	461a      	mov	r2, r3
 80101de:	4603      	mov	r3, r0
 80101e0:	70fb      	strb	r3, [r7, #3]
 80101e2:	460b      	mov	r3, r1
 80101e4:	70bb      	strb	r3, [r7, #2]
 80101e6:	4613      	mov	r3, r2
 80101e8:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80101ea:	78fb      	ldrb	r3, [r7, #3]
 80101ec:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80101ee:	7b3b      	ldrb	r3, [r7, #12]
 80101f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 80101fa:	787b      	ldrb	r3, [r7, #1]
 80101fc:	2b07      	cmp	r3, #7
 80101fe:	d901      	bls.n	8010204 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8010200:	2300      	movs	r3, #0
 8010202:	e079      	b.n	80102f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 8010204:	78bb      	ldrb	r3, [r7, #2]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d005      	beq.n	8010216 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	79db      	ldrb	r3, [r3, #7]
 801020e:	2b07      	cmp	r3, #7
 8010210:	d101      	bne.n	8010216 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 8010212:	2300      	movs	r3, #0
 8010214:	e070      	b.n	80102f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 8010216:	2100      	movs	r1, #0
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 f8d7 	bl	80103cc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801021e:	4603      	mov	r3, r0
 8010220:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 8010222:	7bfb      	ldrb	r3, [r7, #15]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8010228:	2300      	movs	r3, #0
 801022a:	e065      	b.n	80102f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 801022c:	7b3b      	ldrb	r3, [r7, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d124      	bne.n	801027c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 8010232:	78bb      	ldrb	r3, [r7, #2]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00f      	beq.n	8010258 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8010238:	7bfa      	ldrb	r2, [r7, #15]
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	4613      	mov	r3, r2
 801023e:	00db      	lsls	r3, r3, #3
 8010240:	1a9b      	subs	r3, r3, r2
 8010242:	440b      	add	r3, r1
 8010244:	330c      	adds	r3, #12
 8010246:	2241      	movs	r2, #65	; 0x41
 8010248:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	79db      	ldrb	r3, [r3, #7]
 801024e:	3301      	adds	r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	71da      	strb	r2, [r3, #7]
 8010256:	e008      	b.n	801026a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8010258:	7bfa      	ldrb	r2, [r7, #15]
 801025a:	6879      	ldr	r1, [r7, #4]
 801025c:	4613      	mov	r3, r2
 801025e:	00db      	lsls	r3, r3, #3
 8010260:	1a9b      	subs	r3, r3, r2
 8010262:	440b      	add	r3, r1
 8010264:	330c      	adds	r3, #12
 8010266:	2201      	movs	r2, #1
 8010268:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 801026a:	7bfa      	ldrb	r2, [r7, #15]
 801026c:	6879      	ldr	r1, [r7, #4]
 801026e:	4613      	mov	r3, r2
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	1a9b      	subs	r3, r3, r2
 8010274:	440b      	add	r3, r1
 8010276:	330c      	adds	r3, #12
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	e03d      	b.n	80102f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 801027c:	2300      	movs	r3, #0
 801027e:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8010280:	7b3b      	ldrb	r3, [r7, #12]
 8010282:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010286:	b2da      	uxtb	r2, r3
 8010288:	7a3b      	ldrb	r3, [r7, #8]
 801028a:	f362 03c5 	bfi	r3, r2, #3, #3
 801028e:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8010290:	78bb      	ldrb	r3, [r7, #2]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d013      	beq.n	80102be <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 8010296:	7a3b      	ldrb	r3, [r7, #8]
 8010298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801029c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	79db      	ldrb	r3, [r3, #7]
 80102a2:	3301      	adds	r3, #1
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	71da      	strb	r2, [r3, #7]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	79db      	ldrb	r3, [r3, #7]
 80102ae:	f003 0307 	and.w	r3, r3, #7
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	7a3b      	ldrb	r3, [r7, #8]
 80102b6:	f362 0302 	bfi	r3, r2, #0, #3
 80102ba:	723b      	strb	r3, [r7, #8]
 80102bc:	e00b      	b.n	80102d6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80102be:	7a3b      	ldrb	r3, [r7, #8]
 80102c0:	f36f 1386 	bfc	r3, #6, #1
 80102c4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80102c6:	787b      	ldrb	r3, [r7, #1]
 80102c8:	f003 0307 	and.w	r3, r3, #7
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	7a3b      	ldrb	r3, [r7, #8]
 80102d0:	f362 0302 	bfi	r3, r2, #0, #3
 80102d4:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80102d6:	7bfa      	ldrb	r2, [r7, #15]
 80102d8:	6879      	ldr	r1, [r7, #4]
 80102da:	4613      	mov	r3, r2
 80102dc:	00db      	lsls	r3, r3, #3
 80102de:	1a9b      	subs	r3, r3, r2
 80102e0:	440b      	add	r3, r1
 80102e2:	330c      	adds	r3, #12
 80102e4:	7a3a      	ldrb	r2, [r7, #8]
 80102e6:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80102e8:	7bfa      	ldrb	r2, [r7, #15]
 80102ea:	6879      	ldr	r1, [r7, #4]
 80102ec:	4613      	mov	r3, r2
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	1a9b      	subs	r3, r3, r2
 80102f2:	440b      	add	r3, r1
 80102f4:	330c      	adds	r3, #12
 80102f6:	781b      	ldrb	r3, [r3, #0]
        };
 80102f8:	4618      	mov	r0, r3
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 801030c:	78fb      	ldrb	r3, [r7, #3]
 801030e:	2b41      	cmp	r3, #65	; 0x41
 8010310:	d103      	bne.n	801031a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 f841 	bl	801039a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8010318:	e00b      	b.n	8010332 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 801031a:	78fb      	ldrb	r3, [r7, #3]
 801031c:	4619      	mov	r1, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f854 	bl	80103cc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8010324:	4603      	mov	r3, r0
 8010326:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8010328:	7bfb      	ldrb	r3, [r7, #15]
 801032a:	4619      	mov	r1, r3
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f893 	bl	8010458 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 8010344:	78fa      	ldrb	r2, [r7, #3]
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	4613      	mov	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	1a9b      	subs	r3, r3, r2
 801034e:	440b      	add	r3, r1
 8010350:	330c      	adds	r3, #12
 8010352:	2200      	movs	r2, #0
 8010354:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 8010356:	78fa      	ldrb	r2, [r7, #3]
 8010358:	6879      	ldr	r1, [r7, #4]
 801035a:	4613      	mov	r3, r2
 801035c:	00db      	lsls	r3, r3, #3
 801035e:	1a9b      	subs	r3, r3, r2
 8010360:	440b      	add	r3, r1
 8010362:	330d      	adds	r3, #13
 8010364:	2201      	movs	r2, #1
 8010366:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8010368:	78fa      	ldrb	r2, [r7, #3]
 801036a:	6879      	ldr	r1, [r7, #4]
 801036c:	4613      	mov	r3, r2
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	1a9b      	subs	r3, r3, r2
 8010372:	440b      	add	r3, r1
 8010374:	330e      	adds	r3, #14
 8010376:	2200      	movs	r2, #0
 8010378:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 801037a:	78fa      	ldrb	r2, [r7, #3]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	1d19      	adds	r1, r3, #4
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	4613      	mov	r3, r2
 8010384:	00db      	lsls	r3, r3, #3
 8010386:	1a9b      	subs	r3, r3, r2
 8010388:	4403      	add	r3, r0
 801038a:	3308      	adds	r3, #8
 801038c:	6019      	str	r1, [r3, #0]
        };
 801038e:	bf00      	nop
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 801039a:	b580      	push	{r7, lr}
 801039c:	b084      	sub	sp, #16
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80103a2:	2301      	movs	r3, #1
 80103a4:	73fb      	strb	r3, [r7, #15]
 80103a6:	7bfb      	ldrb	r3, [r7, #15]
 80103a8:	2b0f      	cmp	r3, #15
 80103aa:	d808      	bhi.n	80103be <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80103ac:	7bfb      	ldrb	r3, [r7, #15]
 80103ae:	4619      	mov	r1, r3
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f7ff ffc1 	bl	8010338 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
 80103b8:	3301      	adds	r3, #1
 80103ba:	73fb      	strb	r3, [r7, #15]
 80103bc:	e7f3      	b.n	80103a6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	71da      	strb	r2, [r3, #7]
        };
 80103c4:	bf00      	nop
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80103cc:	b480      	push	{r7}
 80103ce:	b085      	sub	sp, #20
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	460b      	mov	r3, r1
 80103d6:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80103d8:	2301      	movs	r3, #1
 80103da:	73fb      	strb	r3, [r7, #15]
 80103dc:	7bfb      	ldrb	r3, [r7, #15]
 80103de:	2b0f      	cmp	r3, #15
 80103e0:	d810      	bhi.n	8010404 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80103e2:	7bfa      	ldrb	r2, [r7, #15]
 80103e4:	6879      	ldr	r1, [r7, #4]
 80103e6:	4613      	mov	r3, r2
 80103e8:	00db      	lsls	r3, r3, #3
 80103ea:	1a9b      	subs	r3, r3, r2
 80103ec:	440b      	add	r3, r1
 80103ee:	330c      	adds	r3, #12
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	78fa      	ldrb	r2, [r7, #3]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d101      	bne.n	80103fc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	e004      	b.n	8010406 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80103fc:	7bfb      	ldrb	r3, [r7, #15]
 80103fe:	3301      	adds	r3, #1
 8010400:	73fb      	strb	r3, [r7, #15]
 8010402:	e7eb      	b.n	80103dc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 8010404:	2300      	movs	r3, #0
        };
 8010406:	4618      	mov	r0, r3
 8010408:	3714      	adds	r7, #20
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 801041a:	2300      	movs	r3, #0
 801041c:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 801041e:	21c8      	movs	r1, #200	; 0xc8
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7f2 f915 	bl	8002650 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010426:	4603      	mov	r3, r0
 8010428:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 801042a:	7bbb      	ldrb	r3, [r7, #14]
 801042c:	f003 0320 	and.w	r3, r3, #32
 8010430:	2b00      	cmp	r3, #0
 8010432:	d006      	beq.n	8010442 <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7f2 f92d 	bl	8002694 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	f043 0320 	orr.w	r3, r3, #32
 8010440:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 8010442:	7bfb      	ldrb	r3, [r7, #15]
 8010444:	461a      	mov	r2, r3
 8010446:	21c8      	movs	r1, #200	; 0xc8
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7f2 f8af 	bl	80025ac <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 801044e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010450:	4618      	mov	r0, r3
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	460b      	mov	r3, r1
 8010462:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 8010464:	78fb      	ldrb	r3, [r7, #3]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d03a      	beq.n	80104e0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 801046a:	78fa      	ldrb	r2, [r7, #3]
 801046c:	6879      	ldr	r1, [r7, #4]
 801046e:	4613      	mov	r3, r2
 8010470:	00db      	lsls	r3, r3, #3
 8010472:	1a9b      	subs	r3, r3, r2
 8010474:	440b      	add	r3, r1
 8010476:	330c      	adds	r3, #12
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 801047c:	7b3b      	ldrb	r3, [r7, #12]
 801047e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010482:	b2db      	uxtb	r3, r3
 8010484:	2b00      	cmp	r3, #0
 8010486:	d025      	beq.n	80104d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8010488:	2301      	movs	r3, #1
 801048a:	73fb      	strb	r3, [r7, #15]
 801048c:	7bfb      	ldrb	r3, [r7, #15]
 801048e:	461a      	mov	r2, r3
 8010490:	7b39      	ldrb	r1, [r7, #12]
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 f828 	bl	80104e8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8010498:	4603      	mov	r3, r0
 801049a:	73fb      	strb	r3, [r7, #15]
 801049c:	7bfb      	ldrb	r3, [r7, #15]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bf14      	ite	ne
 80104a2:	2301      	movne	r3, #1
 80104a4:	2300      	moveq	r3, #0
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d005      	beq.n	80104b8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
 80104ae:	4619      	mov	r1, r3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff ffd1 	bl	8010458 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80104b6:	e7e9      	b.n	801048c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	79db      	ldrb	r3, [r3, #7]
 80104bc:	7b3a      	ldrb	r2, [r7, #12]
 80104be:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80104c2:	b2d2      	uxtb	r2, r2
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d105      	bne.n	80104d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	79db      	ldrb	r3, [r3, #7]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	b2da      	uxtb	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80104d4:	78fb      	ldrb	r3, [r7, #3]
 80104d6:	4619      	mov	r1, r3
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff ff2d 	bl	8010338 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80104de:	e000      	b.n	80104e2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80104e0:	bf00      	nop
        }
 80104e2:	3710      	adds	r7, #16
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	7039      	strb	r1, [r7, #0]
 80104f2:	4613      	mov	r3, r2
 80104f4:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80104f6:	78fb      	ldrb	r3, [r7, #3]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d004      	beq.n	8010506 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80104fc:	78fb      	ldrb	r3, [r7, #3]
 80104fe:	2b0f      	cmp	r3, #15
 8010500:	d801      	bhi.n	8010506 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8010502:	78fb      	ldrb	r3, [r7, #3]
 8010504:	e000      	b.n	8010508 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 8010506:	2301      	movs	r3, #1
 8010508:	73fb      	strb	r3, [r7, #15]
 801050a:	7bfb      	ldrb	r3, [r7, #15]
 801050c:	2b0f      	cmp	r3, #15
 801050e:	d816      	bhi.n	801053e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8010510:	7bfa      	ldrb	r2, [r7, #15]
 8010512:	6879      	ldr	r1, [r7, #4]
 8010514:	4613      	mov	r3, r2
 8010516:	00db      	lsls	r3, r3, #3
 8010518:	1a9b      	subs	r3, r3, r2
 801051a:	440b      	add	r3, r1
 801051c:	3308      	adds	r3, #8
 801051e:	791b      	ldrb	r3, [r3, #4]
 8010520:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8010524:	b2da      	uxtb	r2, r3
 8010526:	783b      	ldrb	r3, [r7, #0]
 8010528:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801052c:	b2db      	uxtb	r3, r3
 801052e:	429a      	cmp	r2, r3
 8010530:	d101      	bne.n	8010536 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 8010532:	7bfb      	ldrb	r3, [r7, #15]
 8010534:	e004      	b.n	8010540 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	3301      	adds	r3, #1
 801053a:	73fb      	strb	r3, [r7, #15]
 801053c:	e7e5      	b.n	801050a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 801053e:	2300      	movs	r3, #0
        };
 8010540:	4618      	mov	r0, r3
 8010542:	3714      	adds	r7, #20
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8010560:	2300      	movs	r3, #0
 8010562:	e031      	b.n	80105c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	791b      	ldrb	r3, [r3, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d022      	beq.n	80105b2 <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	881b      	ldrh	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d01e      	beq.n	80105b2 <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68f9      	ldr	r1, [r7, #12]
 801057e:	7949      	ldrb	r1, [r1, #5]
 8010580:	4608      	mov	r0, r1
 8010582:	68f9      	ldr	r1, [r7, #12]
 8010584:	7909      	ldrb	r1, [r1, #4]
 8010586:	1a41      	subs	r1, r0, r1
 8010588:	440b      	add	r3, r1
 801058a:	7812      	ldrb	r2, [r2, #0]
 801058c:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	791b      	ldrb	r3, [r3, #4]
 8010592:	3b01      	subs	r3, #1
 8010594:	b2da      	uxtb	r2, r3
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	711a      	strb	r2, [r3, #4]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	3b01      	subs	r3, #1
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	801a      	strh	r2, [r3, #0]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	1c5a      	adds	r2, r3, #1
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	601a      	str	r2, [r3, #0]
 80105b0:	e7d8      	b.n	8010564 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	791b      	ldrb	r3, [r3, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80105ba:	2300      	movs	r3, #0
 80105bc:	e004      	b.n	80105c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	795a      	ldrb	r2, [r3, #5]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	711a      	strb	r2, [r3, #4]
        return true;
 80105c6:	2301      	movs	r3, #1
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3714      	adds	r7, #20
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <__cxa_pure_virtual>:
 80105d4:	b508      	push	{r3, lr}
 80105d6:	f000 f80d 	bl	80105f4 <_ZSt9terminatev>

080105da <_ZN10__cxxabiv111__terminateEPFvvE>:
 80105da:	b508      	push	{r3, lr}
 80105dc:	4780      	blx	r0
 80105de:	f000 f98c 	bl	80108fa <abort>
	...

080105e4 <_ZSt13get_terminatev>:
 80105e4:	4b02      	ldr	r3, [pc, #8]	; (80105f0 <_ZSt13get_terminatev+0xc>)
 80105e6:	6818      	ldr	r0, [r3, #0]
 80105e8:	f3bf 8f5b 	dmb	ish
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	20000174 	.word	0x20000174

080105f4 <_ZSt9terminatev>:
 80105f4:	b508      	push	{r3, lr}
 80105f6:	f7ff fff5 	bl	80105e4 <_ZSt13get_terminatev>
 80105fa:	f7ff ffee 	bl	80105da <_ZN10__cxxabiv111__terminateEPFvvE>

080105fe <atan2f>:
 80105fe:	f000 b801 	b.w	8010604 <__ieee754_atan2f>
	...

08010604 <__ieee754_atan2f>:
 8010604:	ee10 2a90 	vmov	r2, s1
 8010608:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801060c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010610:	b510      	push	{r4, lr}
 8010612:	eef0 7a40 	vmov.f32	s15, s0
 8010616:	dc06      	bgt.n	8010626 <__ieee754_atan2f+0x22>
 8010618:	ee10 0a10 	vmov	r0, s0
 801061c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010620:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010624:	dd04      	ble.n	8010630 <__ieee754_atan2f+0x2c>
 8010626:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801062a:	eeb0 0a67 	vmov.f32	s0, s15
 801062e:	bd10      	pop	{r4, pc}
 8010630:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010634:	d103      	bne.n	801063e <__ieee754_atan2f+0x3a>
 8010636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801063a:	f000 b883 	b.w	8010744 <atanf>
 801063e:	1794      	asrs	r4, r2, #30
 8010640:	f004 0402 	and.w	r4, r4, #2
 8010644:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010648:	b943      	cbnz	r3, 801065c <__ieee754_atan2f+0x58>
 801064a:	2c02      	cmp	r4, #2
 801064c:	d05e      	beq.n	801070c <__ieee754_atan2f+0x108>
 801064e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010720 <__ieee754_atan2f+0x11c>
 8010652:	2c03      	cmp	r4, #3
 8010654:	bf08      	it	eq
 8010656:	eef0 7a47 	vmoveq.f32	s15, s14
 801065a:	e7e6      	b.n	801062a <__ieee754_atan2f+0x26>
 801065c:	b941      	cbnz	r1, 8010670 <__ieee754_atan2f+0x6c>
 801065e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8010724 <__ieee754_atan2f+0x120>
 8010662:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010728 <__ieee754_atan2f+0x124>
 8010666:	2800      	cmp	r0, #0
 8010668:	bfb8      	it	lt
 801066a:	eef0 7a40 	vmovlt.f32	s15, s0
 801066e:	e7dc      	b.n	801062a <__ieee754_atan2f+0x26>
 8010670:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010674:	d110      	bne.n	8010698 <__ieee754_atan2f+0x94>
 8010676:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801067a:	f104 34ff 	add.w	r4, r4, #4294967295
 801067e:	d107      	bne.n	8010690 <__ieee754_atan2f+0x8c>
 8010680:	2c02      	cmp	r4, #2
 8010682:	d846      	bhi.n	8010712 <__ieee754_atan2f+0x10e>
 8010684:	4b29      	ldr	r3, [pc, #164]	; (801072c <__ieee754_atan2f+0x128>)
 8010686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801068a:	edd4 7a00 	vldr	s15, [r4]
 801068e:	e7cc      	b.n	801062a <__ieee754_atan2f+0x26>
 8010690:	2c02      	cmp	r4, #2
 8010692:	d841      	bhi.n	8010718 <__ieee754_atan2f+0x114>
 8010694:	4b26      	ldr	r3, [pc, #152]	; (8010730 <__ieee754_atan2f+0x12c>)
 8010696:	e7f6      	b.n	8010686 <__ieee754_atan2f+0x82>
 8010698:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801069c:	d0df      	beq.n	801065e <__ieee754_atan2f+0x5a>
 801069e:	1a5b      	subs	r3, r3, r1
 80106a0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80106a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80106a8:	da1a      	bge.n	80106e0 <__ieee754_atan2f+0xdc>
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	da01      	bge.n	80106b2 <__ieee754_atan2f+0xae>
 80106ae:	313c      	adds	r1, #60	; 0x3c
 80106b0:	db19      	blt.n	80106e6 <__ieee754_atan2f+0xe2>
 80106b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80106b6:	f000 f919 	bl	80108ec <fabsf>
 80106ba:	f000 f843 	bl	8010744 <atanf>
 80106be:	eef0 7a40 	vmov.f32	s15, s0
 80106c2:	2c01      	cmp	r4, #1
 80106c4:	d012      	beq.n	80106ec <__ieee754_atan2f+0xe8>
 80106c6:	2c02      	cmp	r4, #2
 80106c8:	d017      	beq.n	80106fa <__ieee754_atan2f+0xf6>
 80106ca:	2c00      	cmp	r4, #0
 80106cc:	d0ad      	beq.n	801062a <__ieee754_atan2f+0x26>
 80106ce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010734 <__ieee754_atan2f+0x130>
 80106d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80106d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010738 <__ieee754_atan2f+0x134>
 80106da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80106de:	e7a4      	b.n	801062a <__ieee754_atan2f+0x26>
 80106e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010724 <__ieee754_atan2f+0x120>
 80106e4:	e7ed      	b.n	80106c2 <__ieee754_atan2f+0xbe>
 80106e6:	eddf 7a15 	vldr	s15, [pc, #84]	; 801073c <__ieee754_atan2f+0x138>
 80106ea:	e7ea      	b.n	80106c2 <__ieee754_atan2f+0xbe>
 80106ec:	ee17 3a90 	vmov	r3, s15
 80106f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80106f4:	ee07 3a90 	vmov	s15, r3
 80106f8:	e797      	b.n	801062a <__ieee754_atan2f+0x26>
 80106fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010734 <__ieee754_atan2f+0x130>
 80106fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010702:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010738 <__ieee754_atan2f+0x134>
 8010706:	ee70 7a67 	vsub.f32	s15, s0, s15
 801070a:	e78e      	b.n	801062a <__ieee754_atan2f+0x26>
 801070c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010738 <__ieee754_atan2f+0x134>
 8010710:	e78b      	b.n	801062a <__ieee754_atan2f+0x26>
 8010712:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010740 <__ieee754_atan2f+0x13c>
 8010716:	e788      	b.n	801062a <__ieee754_atan2f+0x26>
 8010718:	eddf 7a08 	vldr	s15, [pc, #32]	; 801073c <__ieee754_atan2f+0x138>
 801071c:	e785      	b.n	801062a <__ieee754_atan2f+0x26>
 801071e:	bf00      	nop
 8010720:	c0490fdb 	.word	0xc0490fdb
 8010724:	3fc90fdb 	.word	0x3fc90fdb
 8010728:	bfc90fdb 	.word	0xbfc90fdb
 801072c:	08010e34 	.word	0x08010e34
 8010730:	08010e40 	.word	0x08010e40
 8010734:	33bbbd2e 	.word	0x33bbbd2e
 8010738:	40490fdb 	.word	0x40490fdb
 801073c:	00000000 	.word	0x00000000
 8010740:	3f490fdb 	.word	0x3f490fdb

08010744 <atanf>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	ee10 5a10 	vmov	r5, s0
 801074a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801074e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010752:	eef0 7a40 	vmov.f32	s15, s0
 8010756:	db10      	blt.n	801077a <atanf+0x36>
 8010758:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801075c:	dd04      	ble.n	8010768 <atanf+0x24>
 801075e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010762:	eeb0 0a67 	vmov.f32	s0, s15
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80108a0 <atanf+0x15c>
 801076c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80108a4 <atanf+0x160>
 8010770:	2d00      	cmp	r5, #0
 8010772:	bfd8      	it	le
 8010774:	eef0 7a40 	vmovle.f32	s15, s0
 8010778:	e7f3      	b.n	8010762 <atanf+0x1e>
 801077a:	4b4b      	ldr	r3, [pc, #300]	; (80108a8 <atanf+0x164>)
 801077c:	429c      	cmp	r4, r3
 801077e:	dc10      	bgt.n	80107a2 <atanf+0x5e>
 8010780:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010784:	da0a      	bge.n	801079c <atanf+0x58>
 8010786:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80108ac <atanf+0x168>
 801078a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801078e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010792:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079a:	dce2      	bgt.n	8010762 <atanf+0x1e>
 801079c:	f04f 33ff 	mov.w	r3, #4294967295
 80107a0:	e013      	b.n	80107ca <atanf+0x86>
 80107a2:	f000 f8a3 	bl	80108ec <fabsf>
 80107a6:	4b42      	ldr	r3, [pc, #264]	; (80108b0 <atanf+0x16c>)
 80107a8:	429c      	cmp	r4, r3
 80107aa:	dc4f      	bgt.n	801084c <atanf+0x108>
 80107ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80107b0:	429c      	cmp	r4, r3
 80107b2:	dc41      	bgt.n	8010838 <atanf+0xf4>
 80107b4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80107b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80107bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80107c0:	2300      	movs	r3, #0
 80107c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80107ca:	1c5a      	adds	r2, r3, #1
 80107cc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80107d0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80108b4 <atanf+0x170>
 80107d4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80108b8 <atanf+0x174>
 80107d8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80108bc <atanf+0x178>
 80107dc:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80108c0 <atanf+0x17c>
 80107e0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80107e4:	eea7 6a25 	vfma.f32	s12, s14, s11
 80107e8:	eddf 5a36 	vldr	s11, [pc, #216]	; 80108c4 <atanf+0x180>
 80107ec:	eee6 5a07 	vfma.f32	s11, s12, s14
 80107f0:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80108c8 <atanf+0x184>
 80107f4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80107f8:	eddf 5a34 	vldr	s11, [pc, #208]	; 80108cc <atanf+0x188>
 80107fc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010800:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80108d0 <atanf+0x18c>
 8010804:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010808:	eddf 5a32 	vldr	s11, [pc, #200]	; 80108d4 <atanf+0x190>
 801080c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8010810:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80108d8 <atanf+0x194>
 8010814:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010818:	eddf 5a30 	vldr	s11, [pc, #192]	; 80108dc <atanf+0x198>
 801081c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010820:	eea5 0a87 	vfma.f32	s0, s11, s14
 8010824:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010828:	eea6 0a26 	vfma.f32	s0, s12, s13
 801082c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010830:	d121      	bne.n	8010876 <atanf+0x132>
 8010832:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010836:	e794      	b.n	8010762 <atanf+0x1e>
 8010838:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801083c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010840:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010844:	2301      	movs	r3, #1
 8010846:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801084a:	e7be      	b.n	80107ca <atanf+0x86>
 801084c:	4b24      	ldr	r3, [pc, #144]	; (80108e0 <atanf+0x19c>)
 801084e:	429c      	cmp	r4, r3
 8010850:	dc0b      	bgt.n	801086a <atanf+0x126>
 8010852:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801085a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801085e:	2302      	movs	r3, #2
 8010860:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010868:	e7af      	b.n	80107ca <atanf+0x86>
 801086a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801086e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010872:	2303      	movs	r3, #3
 8010874:	e7a9      	b.n	80107ca <atanf+0x86>
 8010876:	4a1b      	ldr	r2, [pc, #108]	; (80108e4 <atanf+0x1a0>)
 8010878:	491b      	ldr	r1, [pc, #108]	; (80108e8 <atanf+0x1a4>)
 801087a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801087e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010882:	ed93 7a00 	vldr	s14, [r3]
 8010886:	ee30 0a47 	vsub.f32	s0, s0, s14
 801088a:	2d00      	cmp	r5, #0
 801088c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010890:	ed92 0a00 	vldr	s0, [r2]
 8010894:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010898:	bfb8      	it	lt
 801089a:	eef1 7a67 	vneglt.f32	s15, s15
 801089e:	e760      	b.n	8010762 <atanf+0x1e>
 80108a0:	3fc90fdb 	.word	0x3fc90fdb
 80108a4:	bfc90fdb 	.word	0xbfc90fdb
 80108a8:	3edfffff 	.word	0x3edfffff
 80108ac:	7149f2ca 	.word	0x7149f2ca
 80108b0:	3f97ffff 	.word	0x3f97ffff
 80108b4:	3c8569d7 	.word	0x3c8569d7
 80108b8:	3d4bda59 	.word	0x3d4bda59
 80108bc:	bd15a221 	.word	0xbd15a221
 80108c0:	be4ccccd 	.word	0xbe4ccccd
 80108c4:	3d886b35 	.word	0x3d886b35
 80108c8:	3dba2e6e 	.word	0x3dba2e6e
 80108cc:	3e124925 	.word	0x3e124925
 80108d0:	3eaaaaab 	.word	0x3eaaaaab
 80108d4:	bd6ef16b 	.word	0xbd6ef16b
 80108d8:	bd9d8795 	.word	0xbd9d8795
 80108dc:	bde38e38 	.word	0xbde38e38
 80108e0:	401bffff 	.word	0x401bffff
 80108e4:	08010e4c 	.word	0x08010e4c
 80108e8:	08010e5c 	.word	0x08010e5c

080108ec <fabsf>:
 80108ec:	ee10 3a10 	vmov	r3, s0
 80108f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108f4:	ee00 3a10 	vmov	s0, r3
 80108f8:	4770      	bx	lr

080108fa <abort>:
 80108fa:	b508      	push	{r3, lr}
 80108fc:	2006      	movs	r0, #6
 80108fe:	f000 f86b 	bl	80109d8 <raise>
 8010902:	2001      	movs	r0, #1
 8010904:	f7f2 f8b4 	bl	8002a70 <_exit>

08010908 <__errno>:
 8010908:	4b01      	ldr	r3, [pc, #4]	; (8010910 <__errno+0x8>)
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop
 8010910:	20000178 	.word	0x20000178

08010914 <__libc_init_array>:
 8010914:	b570      	push	{r4, r5, r6, lr}
 8010916:	4d0d      	ldr	r5, [pc, #52]	; (801094c <__libc_init_array+0x38>)
 8010918:	4c0d      	ldr	r4, [pc, #52]	; (8010950 <__libc_init_array+0x3c>)
 801091a:	1b64      	subs	r4, r4, r5
 801091c:	10a4      	asrs	r4, r4, #2
 801091e:	2600      	movs	r6, #0
 8010920:	42a6      	cmp	r6, r4
 8010922:	d109      	bne.n	8010938 <__libc_init_array+0x24>
 8010924:	4d0b      	ldr	r5, [pc, #44]	; (8010954 <__libc_init_array+0x40>)
 8010926:	4c0c      	ldr	r4, [pc, #48]	; (8010958 <__libc_init_array+0x44>)
 8010928:	f000 f884 	bl	8010a34 <_init>
 801092c:	1b64      	subs	r4, r4, r5
 801092e:	10a4      	asrs	r4, r4, #2
 8010930:	2600      	movs	r6, #0
 8010932:	42a6      	cmp	r6, r4
 8010934:	d105      	bne.n	8010942 <__libc_init_array+0x2e>
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	f855 3b04 	ldr.w	r3, [r5], #4
 801093c:	4798      	blx	r3
 801093e:	3601      	adds	r6, #1
 8010940:	e7ee      	b.n	8010920 <__libc_init_array+0xc>
 8010942:	f855 3b04 	ldr.w	r3, [r5], #4
 8010946:	4798      	blx	r3
 8010948:	3601      	adds	r6, #1
 801094a:	e7f2      	b.n	8010932 <__libc_init_array+0x1e>
 801094c:	08010ed4 	.word	0x08010ed4
 8010950:	08010ed4 	.word	0x08010ed4
 8010954:	08010ed4 	.word	0x08010ed4
 8010958:	08010edc 	.word	0x08010edc

0801095c <memcpy>:
 801095c:	440a      	add	r2, r1
 801095e:	4291      	cmp	r1, r2
 8010960:	f100 33ff 	add.w	r3, r0, #4294967295
 8010964:	d100      	bne.n	8010968 <memcpy+0xc>
 8010966:	4770      	bx	lr
 8010968:	b510      	push	{r4, lr}
 801096a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801096e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010972:	4291      	cmp	r1, r2
 8010974:	d1f9      	bne.n	801096a <memcpy+0xe>
 8010976:	bd10      	pop	{r4, pc}

08010978 <memset>:
 8010978:	4402      	add	r2, r0
 801097a:	4603      	mov	r3, r0
 801097c:	4293      	cmp	r3, r2
 801097e:	d100      	bne.n	8010982 <memset+0xa>
 8010980:	4770      	bx	lr
 8010982:	f803 1b01 	strb.w	r1, [r3], #1
 8010986:	e7f9      	b.n	801097c <memset+0x4>

08010988 <_raise_r>:
 8010988:	291f      	cmp	r1, #31
 801098a:	b538      	push	{r3, r4, r5, lr}
 801098c:	4604      	mov	r4, r0
 801098e:	460d      	mov	r5, r1
 8010990:	d904      	bls.n	801099c <_raise_r+0x14>
 8010992:	2316      	movs	r3, #22
 8010994:	6003      	str	r3, [r0, #0]
 8010996:	f04f 30ff 	mov.w	r0, #4294967295
 801099a:	bd38      	pop	{r3, r4, r5, pc}
 801099c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801099e:	b112      	cbz	r2, 80109a6 <_raise_r+0x1e>
 80109a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109a4:	b94b      	cbnz	r3, 80109ba <_raise_r+0x32>
 80109a6:	4620      	mov	r0, r4
 80109a8:	f000 f830 	bl	8010a0c <_getpid_r>
 80109ac:	462a      	mov	r2, r5
 80109ae:	4601      	mov	r1, r0
 80109b0:	4620      	mov	r0, r4
 80109b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109b6:	f000 b817 	b.w	80109e8 <_kill_r>
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d00a      	beq.n	80109d4 <_raise_r+0x4c>
 80109be:	1c59      	adds	r1, r3, #1
 80109c0:	d103      	bne.n	80109ca <_raise_r+0x42>
 80109c2:	2316      	movs	r3, #22
 80109c4:	6003      	str	r3, [r0, #0]
 80109c6:	2001      	movs	r0, #1
 80109c8:	e7e7      	b.n	801099a <_raise_r+0x12>
 80109ca:	2400      	movs	r4, #0
 80109cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109d0:	4628      	mov	r0, r5
 80109d2:	4798      	blx	r3
 80109d4:	2000      	movs	r0, #0
 80109d6:	e7e0      	b.n	801099a <_raise_r+0x12>

080109d8 <raise>:
 80109d8:	4b02      	ldr	r3, [pc, #8]	; (80109e4 <raise+0xc>)
 80109da:	4601      	mov	r1, r0
 80109dc:	6818      	ldr	r0, [r3, #0]
 80109de:	f7ff bfd3 	b.w	8010988 <_raise_r>
 80109e2:	bf00      	nop
 80109e4:	20000178 	.word	0x20000178

080109e8 <_kill_r>:
 80109e8:	b538      	push	{r3, r4, r5, lr}
 80109ea:	4d07      	ldr	r5, [pc, #28]	; (8010a08 <_kill_r+0x20>)
 80109ec:	2300      	movs	r3, #0
 80109ee:	4604      	mov	r4, r0
 80109f0:	4608      	mov	r0, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	602b      	str	r3, [r5, #0]
 80109f6:	f7f2 f82b 	bl	8002a50 <_kill>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	d102      	bne.n	8010a04 <_kill_r+0x1c>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	b103      	cbz	r3, 8010a04 <_kill_r+0x1c>
 8010a02:	6023      	str	r3, [r4, #0]
 8010a04:	bd38      	pop	{r3, r4, r5, pc}
 8010a06:	bf00      	nop
 8010a08:	20000f50 	.word	0x20000f50

08010a0c <_getpid_r>:
 8010a0c:	f7f2 b818 	b.w	8002a40 <_getpid>

08010a10 <strncmp>:
 8010a10:	b510      	push	{r4, lr}
 8010a12:	b16a      	cbz	r2, 8010a30 <strncmp+0x20>
 8010a14:	3901      	subs	r1, #1
 8010a16:	1884      	adds	r4, r0, r2
 8010a18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010a1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d103      	bne.n	8010a2c <strncmp+0x1c>
 8010a24:	42a0      	cmp	r0, r4
 8010a26:	d001      	beq.n	8010a2c <strncmp+0x1c>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1f5      	bne.n	8010a18 <strncmp+0x8>
 8010a2c:	1a98      	subs	r0, r3, r2
 8010a2e:	bd10      	pop	{r4, pc}
 8010a30:	4610      	mov	r0, r2
 8010a32:	e7fc      	b.n	8010a2e <strncmp+0x1e>

08010a34 <_init>:
 8010a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a36:	bf00      	nop
 8010a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a3a:	bc08      	pop	{r3}
 8010a3c:	469e      	mov	lr, r3
 8010a3e:	4770      	bx	lr

08010a40 <_fini>:
 8010a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a42:	bf00      	nop
 8010a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a46:	bc08      	pop	{r3}
 8010a48:	469e      	mov	lr, r3
 8010a4a:	4770      	bx	lr
